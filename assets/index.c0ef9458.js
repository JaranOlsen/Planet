(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))l(n);new MutationObserver(n=>{for(const q of n)if(q.type==="childList")for(const s of q.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&l(s)}).observe(document,{childList:!0,subtree:!0});function t(n){const q={};return n.integrity&&(q.integrity=n.integrity),n.referrerpolicy&&(q.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?q.credentials="include":n.crossorigin==="anonymous"?q.credentials="omit":q.credentials="same-origin",q}function l(n){if(n.ep)return;n.ep=!0;const q=t(n);fetch(n.href,q)}})();/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const v5="144",w3={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},T3={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},a9=0,U5=1,s9=2,f7=1,r9=2,f4=3,i3=0,v2=1,w2=2,q3=0,K3=1,k5=2,G5=3,V5=4,o9=5,j3=100,m9=101,h9=102,H5=103,W5=104,c9=200,u9=201,f9=202,d9=203,d7=204,x7=205,x9=206,p9=207,_9=208,g9=209,A9=210,E9=0,v9=1,C9=2,o5=3,D9=4,B9=5,y9=6,M9=7,C5=0,F9=1,S9=2,Y2=0,b9=1,z9=2,w9=3,T9=4,L9=5,p7=300,t4=301,l4=302,m5=303,h5=304,f6=306,c5=1e3,S2=1001,u5=1002,o2=1003,X5=1004,Y5=1005,A2=1006,P9=1007,d6=1008,E3=1009,R9=1010,I9=1011,_7=1012,N9=1013,x3=1014,p3=1015,v4=1016,O9=1017,U9=1018,Q3=1020,k9=1021,G9=1022,T2=1023,V9=1024,H9=1025,g3=1026,n4=1027,W9=1028,X9=1029,Y9=1030,j9=1031,Z9=1033,M6=33776,F6=33777,S6=33778,b6=33779,j5=35840,Z5=35841,J5=35842,$5=35843,J9=36196,K5=37492,Q5=37496,e8=37808,t8=37809,l8=37810,n8=37811,q8=37812,i8=37813,a8=37814,s8=37815,r8=37816,o8=37817,m8=37818,h8=37819,c8=37820,u8=37821,f8=36492,v3=3e3,U1=3001,$9=3200,K9=3201,D5=0,Q9=1,H2="srgb",_3="srgb-linear",z6=7680,e0=519,d8=35044,x8="300 es",f5=1035;class y3{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const l=this._listeners;l[e]===void 0&&(l[e]=[]),l[e].indexOf(t)===-1&&l[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const l=this._listeners;return l[e]!==void 0&&l[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const n=this._listeners[e];if(n!==void 0){const q=n.indexOf(t);q!==-1&&n.splice(q,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const l=this._listeners[e.type];if(l!==void 0){e.target=this;const n=l.slice(0);for(let q=0,s=n.length;q<s;q++)n[q].call(this,e);e.target=null}}}const l2=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let p8=1234567;const p4=Math.PI/180,m6=180/Math.PI;function M3(){const i=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,l=Math.random()*4294967295|0;return(l2[i&255]+l2[i>>8&255]+l2[i>>16&255]+l2[i>>24&255]+"-"+l2[e&255]+l2[e>>8&255]+"-"+l2[e>>16&15|64]+l2[e>>24&255]+"-"+l2[t&63|128]+l2[t>>8&255]+"-"+l2[t>>16&255]+l2[t>>24&255]+l2[l&255]+l2[l>>8&255]+l2[l>>16&255]+l2[l>>24&255]).toLowerCase()}function e2(i,e,t){return Math.max(e,Math.min(t,i))}function B5(i,e){return(i%e+e)%e}function t0(i,e,t,l,n){return l+(i-e)*(n-l)/(t-e)}function l0(i,e,t){return i!==e?(t-i)/(e-i):0}function _4(i,e,t){return(1-t)*i+t*e}function n0(i,e,t,l){return _4(i,e,1-Math.exp(-t*l))}function q0(i,e=1){return e-Math.abs(B5(i,e*2)-e)}function i0(i,e,t){return i<=e?0:i>=t?1:(i=(i-e)/(t-e),i*i*(3-2*i))}function a0(i,e,t){return i<=e?0:i>=t?1:(i=(i-e)/(t-e),i*i*i*(i*(i*6-15)+10))}function s0(i,e){return i+Math.floor(Math.random()*(e-i+1))}function r0(i,e){return i+Math.random()*(e-i)}function o0(i){return i*(.5-Math.random())}function m0(i){i!==void 0&&(p8=i);let e=p8+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function h0(i){return i*p4}function c0(i){return i*m6}function d5(i){return(i&i-1)===0&&i!==0}function u0(i){return Math.pow(2,Math.ceil(Math.log(i)/Math.LN2))}function h6(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function f0(i,e,t,l,n){const q=Math.cos,s=Math.sin,a=q(t/2),r=s(t/2),o=q((e+l)/2),m=s((e+l)/2),h=q((e-l)/2),c=s((e-l)/2),f=q((l-e)/2),x=s((l-e)/2);switch(n){case"XYX":i.set(a*m,r*h,r*c,a*o);break;case"YZY":i.set(r*c,a*m,r*h,a*o);break;case"ZXZ":i.set(r*h,r*c,a*m,a*o);break;case"XZX":i.set(a*m,r*x,r*f,a*o);break;case"YXY":i.set(r*f,a*m,r*x,a*o);break;case"ZYZ":i.set(r*x,r*f,a*m,a*o);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+n)}}function d4(i,e){switch(e.constructor){case Float32Array:return i;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function r2(i,e){switch(e.constructor){case Float32Array:return i;case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}var _8=Object.freeze({__proto__:null,DEG2RAD:p4,RAD2DEG:m6,generateUUID:M3,clamp:e2,euclideanModulo:B5,mapLinear:t0,inverseLerp:l0,lerp:_4,damp:n0,pingpong:q0,smoothstep:i0,smootherstep:a0,randInt:s0,randFloat:r0,randFloatSpread:o0,seededRandom:m0,degToRad:h0,radToDeg:c0,isPowerOfTwo:d5,ceilPowerOfTwo:u0,floorPowerOfTwo:h6,setQuaternionFromProperEuler:f0,normalize:r2,denormalize:d4});class r1{constructor(e=0,t=0){r1.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,l=this.y,n=e.elements;return this.x=n[0]*t+n[3]*l+n[6],this.y=n[1]*t+n[4]*l+n[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Math.max(e,Math.min(t,l)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,l=this.y-e.y;return t*t+l*l}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,l){return this.x=e.x+(t.x-e.x)*l,this.y=e.y+(t.y-e.y)*l,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const l=Math.cos(t),n=Math.sin(t),q=this.x-e.x,s=this.y-e.y;return this.x=q*l-s*n+e.x,this.y=q*n+s*l+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class E2{constructor(){E2.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,t,l,n,q,s,a,r,o){const m=this.elements;return m[0]=e,m[1]=n,m[2]=a,m[3]=t,m[4]=q,m[5]=r,m[6]=l,m[7]=s,m[8]=o,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,l=e.elements;return t[0]=l[0],t[1]=l[1],t[2]=l[2],t[3]=l[3],t[4]=l[4],t[5]=l[5],t[6]=l[6],t[7]=l[7],t[8]=l[8],this}extractBasis(e,t,l){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),l.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const l=e.elements,n=t.elements,q=this.elements,s=l[0],a=l[3],r=l[6],o=l[1],m=l[4],h=l[7],c=l[2],f=l[5],x=l[8],d=n[0],u=n[3],p=n[6],A=n[1],B=n[4],v=n[7],g=n[2],F=n[5],z=n[8];return q[0]=s*d+a*A+r*g,q[3]=s*u+a*B+r*F,q[6]=s*p+a*v+r*z,q[1]=o*d+m*A+h*g,q[4]=o*u+m*B+h*F,q[7]=o*p+m*v+h*z,q[2]=c*d+f*A+x*g,q[5]=c*u+f*B+x*F,q[8]=c*p+f*v+x*z,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],l=e[1],n=e[2],q=e[3],s=e[4],a=e[5],r=e[6],o=e[7],m=e[8];return t*s*m-t*a*o-l*q*m+l*a*r+n*q*o-n*s*r}invert(){const e=this.elements,t=e[0],l=e[1],n=e[2],q=e[3],s=e[4],a=e[5],r=e[6],o=e[7],m=e[8],h=m*s-a*o,c=a*r-m*q,f=o*q-s*r,x=t*h+l*c+n*f;if(x===0)return this.set(0,0,0,0,0,0,0,0,0);const d=1/x;return e[0]=h*d,e[1]=(n*o-m*l)*d,e[2]=(a*l-n*s)*d,e[3]=c*d,e[4]=(m*t-n*r)*d,e[5]=(n*q-a*t)*d,e[6]=f*d,e[7]=(l*r-o*t)*d,e[8]=(s*t-l*q)*d,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,l,n,q,s,a){const r=Math.cos(q),o=Math.sin(q);return this.set(l*r,l*o,-l*(r*s+o*a)+s+e,-n*o,n*r,-n*(-o*s+r*a)+a+t,0,0,1),this}scale(e,t){const l=this.elements;return l[0]*=e,l[3]*=e,l[6]*=e,l[1]*=t,l[4]*=t,l[7]*=t,this}rotate(e){const t=Math.cos(e),l=Math.sin(e),n=this.elements,q=n[0],s=n[3],a=n[6],r=n[1],o=n[4],m=n[7];return n[0]=t*q+l*r,n[3]=t*s+l*o,n[6]=t*a+l*m,n[1]=-l*q+t*r,n[4]=-l*s+t*o,n[7]=-l*a+t*m,this}translate(e,t){const l=this.elements;return l[0]+=e*l[2],l[3]+=e*l[5],l[6]+=e*l[8],l[1]+=t*l[2],l[4]+=t*l[5],l[7]+=t*l[8],this}equals(e){const t=this.elements,l=e.elements;for(let n=0;n<9;n++)if(t[n]!==l[n])return!1;return!0}fromArray(e,t=0){for(let l=0;l<9;l++)this.elements[l]=e[l+t];return this}toArray(e=[],t=0){const l=this.elements;return e[t]=l[0],e[t+1]=l[1],e[t+2]=l[2],e[t+3]=l[3],e[t+4]=l[4],e[t+5]=l[5],e[t+6]=l[6],e[t+7]=l[7],e[t+8]=l[8],e}clone(){return new this.constructor().fromArray(this.elements)}}function g7(i){for(let e=i.length-1;e>=0;--e)if(i[e]>=65535)return!0;return!1}function C4(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function A3(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function a6(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}const w6={[H2]:{[_3]:A3},[_3]:{[H2]:a6}},B2={legacyMode:!0,get workingColorSpace(){return _3},set workingColorSpace(i){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(i,e,t){if(this.legacyMode||e===t||!e||!t)return i;if(w6[e]&&w6[e][t]!==void 0){const l=w6[e][t];return i.r=l(i.r),i.g=l(i.g),i.b=l(i.b),i}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(i,e){return this.convert(i,this.workingColorSpace,e)},toWorkingColorSpace:function(i,e){return this.convert(i,e,this.workingColorSpace)}},A7={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Z1={r:0,g:0,b:0},y2={h:0,s:0,l:0},T4={h:0,s:0,l:0};function T6(i,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?i+(e-i)*6*t:t<1/2?e:t<2/3?i+(e-i)*6*(2/3-t):i}function L4(i,e){return e.r=i.r,e.g=i.g,e.b=i.b,e}class z1{constructor(e,t,l){return this.isColor=!0,this.r=1,this.g=1,this.b=1,t===void 0&&l===void 0?this.set(e):this.setRGB(e,t,l)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=H2){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,B2.toWorkingColorSpace(this,t),this}setRGB(e,t,l,n=_3){return this.r=e,this.g=t,this.b=l,B2.toWorkingColorSpace(this,n),this}setHSL(e,t,l,n=_3){if(e=B5(e,1),t=e2(t,0,1),l=e2(l,0,1),t===0)this.r=this.g=this.b=l;else{const q=l<=.5?l*(1+t):l+t-l*t,s=2*l-q;this.r=T6(s,q,e+1/3),this.g=T6(s,q,e),this.b=T6(s,q,e-1/3)}return B2.toWorkingColorSpace(this,n),this}setStyle(e,t=H2){function l(q){q!==void 0&&parseFloat(q)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let q;const s=n[1],a=n[2];switch(s){case"rgb":case"rgba":if(q=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(q[1],10))/255,this.g=Math.min(255,parseInt(q[2],10))/255,this.b=Math.min(255,parseInt(q[3],10))/255,B2.toWorkingColorSpace(this,t),l(q[4]),this;if(q=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(q[1],10))/100,this.g=Math.min(100,parseInt(q[2],10))/100,this.b=Math.min(100,parseInt(q[3],10))/100,B2.toWorkingColorSpace(this,t),l(q[4]),this;break;case"hsl":case"hsla":if(q=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){const r=parseFloat(q[1])/360,o=parseFloat(q[2])/100,m=parseFloat(q[3])/100;return l(q[4]),this.setHSL(r,o,m,t)}break}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(e)){const q=n[1],s=q.length;if(s===3)return this.r=parseInt(q.charAt(0)+q.charAt(0),16)/255,this.g=parseInt(q.charAt(1)+q.charAt(1),16)/255,this.b=parseInt(q.charAt(2)+q.charAt(2),16)/255,B2.toWorkingColorSpace(this,t),this;if(s===6)return this.r=parseInt(q.charAt(0)+q.charAt(1),16)/255,this.g=parseInt(q.charAt(2)+q.charAt(3),16)/255,this.b=parseInt(q.charAt(4)+q.charAt(5),16)/255,B2.toWorkingColorSpace(this,t),this}return e&&e.length>0?this.setColorName(e,t):this}setColorName(e,t=H2){const l=A7[e.toLowerCase()];return l!==void 0?this.setHex(l,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=A3(e.r),this.g=A3(e.g),this.b=A3(e.b),this}copyLinearToSRGB(e){return this.r=a6(e.r),this.g=a6(e.g),this.b=a6(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=H2){return B2.fromWorkingColorSpace(L4(this,Z1),e),e2(Z1.r*255,0,255)<<16^e2(Z1.g*255,0,255)<<8^e2(Z1.b*255,0,255)<<0}getHexString(e=H2){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=_3){B2.fromWorkingColorSpace(L4(this,Z1),t);const l=Z1.r,n=Z1.g,q=Z1.b,s=Math.max(l,n,q),a=Math.min(l,n,q);let r,o;const m=(a+s)/2;if(a===s)r=0,o=0;else{const h=s-a;switch(o=m<=.5?h/(s+a):h/(2-s-a),s){case l:r=(n-q)/h+(n<q?6:0);break;case n:r=(q-l)/h+2;break;case q:r=(l-n)/h+4;break}r/=6}return e.h=r,e.s=o,e.l=m,e}getRGB(e,t=_3){return B2.fromWorkingColorSpace(L4(this,Z1),t),e.r=Z1.r,e.g=Z1.g,e.b=Z1.b,e}getStyle(e=H2){return B2.fromWorkingColorSpace(L4(this,Z1),e),e!==H2?`color(${e} ${Z1.r} ${Z1.g} ${Z1.b})`:`rgb(${Z1.r*255|0},${Z1.g*255|0},${Z1.b*255|0})`}offsetHSL(e,t,l){return this.getHSL(y2),y2.h+=e,y2.s+=t,y2.l+=l,this.setHSL(y2.h,y2.s,y2.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,l){return this.r=e.r+(t.r-e.r)*l,this.g=e.g+(t.g-e.g)*l,this.b=e.b+(t.b-e.b)*l,this}lerpHSL(e,t){this.getHSL(y2),e.getHSL(T4);const l=_4(y2.h,T4.h,t),n=_4(y2.s,T4.s,t),q=_4(y2.l,T4.l,t);return this.setHSL(l,n,q),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}z1.NAMES=A7;let L3;class E7{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{L3===void 0&&(L3=C4("canvas")),L3.width=e.width,L3.height=e.height;const l=L3.getContext("2d");e instanceof ImageData?l.putImageData(e,0,0):l.drawImage(e,0,0,e.width,e.height),t=L3}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=C4("canvas");t.width=e.width,t.height=e.height;const l=t.getContext("2d");l.drawImage(e,0,0,e.width,e.height);const n=l.getImageData(0,0,e.width,e.height),q=n.data;for(let s=0;s<q.length;s++)q[s]=A3(q[s]/255)*255;return l.putImageData(n,0,0),t}else if(e.data){const t=e.data.slice(0);for(let l=0;l<t.length;l++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[l]=Math.floor(A3(t[l]/255)*255):t[l]=A3(t[l]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class v7{constructor(e=null){this.isSource=!0,this.uuid=M3(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const l={uuid:this.uuid,url:""},n=this.data;if(n!==null){let q;if(Array.isArray(n)){q=[];for(let s=0,a=n.length;s<a;s++)n[s].isDataTexture?q.push(L6(n[s].image)):q.push(L6(n[s]))}else q=L6(n);l.url=q}return t||(e.images[this.uuid]=l),l}}function L6(i){return typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&i instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&i instanceof ImageBitmap?E7.getDataURL(i):i.data?{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let d0=0;class C2 extends y3{constructor(e=C2.DEFAULT_IMAGE,t=C2.DEFAULT_MAPPING,l=S2,n=S2,q=A2,s=d6,a=T2,r=E3,o=1,m=v3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:d0++}),this.uuid=M3(),this.name="",this.source=new v7(e),this.mipmaps=[],this.mapping=t,this.wrapS=l,this.wrapT=n,this.magFilter=q,this.minFilter=s,this.anisotropy=o,this.format=a,this.internalFormat=null,this.type=r,this.offset=new r1(0,0),this.repeat=new r1(1,1),this.center=new r1(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new E2,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=m,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const l={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return JSON.stringify(this.userData)!=="{}"&&(l.userData=this.userData),t||(e.textures[this.uuid]=l),l}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==p7)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case c5:e.x=e.x-Math.floor(e.x);break;case S2:e.x=e.x<0?0:1;break;case u5:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case c5:e.y=e.y-Math.floor(e.y);break;case S2:e.y=e.y<0?0:1;break;case u5:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}}C2.DEFAULT_IMAGE=null;C2.DEFAULT_MAPPING=p7;class R1{constructor(e=0,t=0,l=0,n=1){R1.prototype.isVector4=!0,this.x=e,this.y=t,this.z=l,this.w=n}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,l,n){return this.x=e,this.y=t,this.z=l,this.w=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,l=this.y,n=this.z,q=this.w,s=e.elements;return this.x=s[0]*t+s[4]*l+s[8]*n+s[12]*q,this.y=s[1]*t+s[5]*l+s[9]*n+s[13]*q,this.z=s[2]*t+s[6]*l+s[10]*n+s[14]*q,this.w=s[3]*t+s[7]*l+s[11]*n+s[15]*q,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,l,n,q;const r=e.elements,o=r[0],m=r[4],h=r[8],c=r[1],f=r[5],x=r[9],d=r[2],u=r[6],p=r[10];if(Math.abs(m-c)<.01&&Math.abs(h-d)<.01&&Math.abs(x-u)<.01){if(Math.abs(m+c)<.1&&Math.abs(h+d)<.1&&Math.abs(x+u)<.1&&Math.abs(o+f+p-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const B=(o+1)/2,v=(f+1)/2,g=(p+1)/2,F=(m+c)/4,z=(h+d)/4,_=(x+u)/4;return B>v&&B>g?B<.01?(l=0,n=.707106781,q=.707106781):(l=Math.sqrt(B),n=F/l,q=z/l):v>g?v<.01?(l=.707106781,n=0,q=.707106781):(n=Math.sqrt(v),l=F/n,q=_/n):g<.01?(l=.707106781,n=.707106781,q=0):(q=Math.sqrt(g),l=z/q,n=_/q),this.set(l,n,q,t),this}let A=Math.sqrt((u-x)*(u-x)+(h-d)*(h-d)+(c-m)*(c-m));return Math.abs(A)<.001&&(A=1),this.x=(u-x)/A,this.y=(h-d)/A,this.z=(c-m)/A,this.w=Math.acos((o+f+p-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Math.max(e,Math.min(t,l)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,l){return this.x=e.x+(t.x-e.x)*l,this.y=e.y+(t.y-e.y)*l,this.z=e.z+(t.z-e.z)*l,this.w=e.w+(t.w-e.w)*l,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class C3 extends y3{constructor(e,t,l={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new R1(0,0,e,t),this.scissorTest=!1,this.viewport=new R1(0,0,e,t);const n={width:e,height:t,depth:1};this.texture=new C2(n,l.mapping,l.wrapS,l.wrapT,l.magFilter,l.minFilter,l.format,l.type,l.anisotropy,l.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=l.generateMipmaps!==void 0?l.generateMipmaps:!1,this.texture.internalFormat=l.internalFormat!==void 0?l.internalFormat:null,this.texture.minFilter=l.minFilter!==void 0?l.minFilter:A2,this.depthBuffer=l.depthBuffer!==void 0?l.depthBuffer:!0,this.stencilBuffer=l.stencilBuffer!==void 0?l.stencilBuffer:!1,this.depthTexture=l.depthTexture!==void 0?l.depthTexture:null,this.samples=l.samples!==void 0?l.samples:0}setSize(e,t,l=1){(this.width!==e||this.height!==t||this.depth!==l)&&(this.width=e,this.height=t,this.depth=l,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=l,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new v7(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class C7 extends C2{constructor(e=null,t=1,l=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:l,depth:n},this.magFilter=o2,this.minFilter=o2,this.wrapR=S2,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class x0 extends C2{constructor(e=null,t=1,l=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:l,depth:n},this.magFilter=o2,this.minFilter=o2,this.wrapR=S2,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class D3{constructor(e=0,t=0,l=0,n=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=l,this._w=n}static slerpFlat(e,t,l,n,q,s,a){let r=l[n+0],o=l[n+1],m=l[n+2],h=l[n+3];const c=q[s+0],f=q[s+1],x=q[s+2],d=q[s+3];if(a===0){e[t+0]=r,e[t+1]=o,e[t+2]=m,e[t+3]=h;return}if(a===1){e[t+0]=c,e[t+1]=f,e[t+2]=x,e[t+3]=d;return}if(h!==d||r!==c||o!==f||m!==x){let u=1-a;const p=r*c+o*f+m*x+h*d,A=p>=0?1:-1,B=1-p*p;if(B>Number.EPSILON){const g=Math.sqrt(B),F=Math.atan2(g,p*A);u=Math.sin(u*F)/g,a=Math.sin(a*F)/g}const v=a*A;if(r=r*u+c*v,o=o*u+f*v,m=m*u+x*v,h=h*u+d*v,u===1-a){const g=1/Math.sqrt(r*r+o*o+m*m+h*h);r*=g,o*=g,m*=g,h*=g}}e[t]=r,e[t+1]=o,e[t+2]=m,e[t+3]=h}static multiplyQuaternionsFlat(e,t,l,n,q,s){const a=l[n],r=l[n+1],o=l[n+2],m=l[n+3],h=q[s],c=q[s+1],f=q[s+2],x=q[s+3];return e[t]=a*x+m*h+r*f-o*c,e[t+1]=r*x+m*c+o*h-a*f,e[t+2]=o*x+m*f+a*c-r*h,e[t+3]=m*x-a*h-r*c-o*f,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,l,n){return this._x=e,this._y=t,this._z=l,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){const l=e._x,n=e._y,q=e._z,s=e._order,a=Math.cos,r=Math.sin,o=a(l/2),m=a(n/2),h=a(q/2),c=r(l/2),f=r(n/2),x=r(q/2);switch(s){case"XYZ":this._x=c*m*h+o*f*x,this._y=o*f*h-c*m*x,this._z=o*m*x+c*f*h,this._w=o*m*h-c*f*x;break;case"YXZ":this._x=c*m*h+o*f*x,this._y=o*f*h-c*m*x,this._z=o*m*x-c*f*h,this._w=o*m*h+c*f*x;break;case"ZXY":this._x=c*m*h-o*f*x,this._y=o*f*h+c*m*x,this._z=o*m*x+c*f*h,this._w=o*m*h-c*f*x;break;case"ZYX":this._x=c*m*h-o*f*x,this._y=o*f*h+c*m*x,this._z=o*m*x-c*f*h,this._w=o*m*h+c*f*x;break;case"YZX":this._x=c*m*h+o*f*x,this._y=o*f*h+c*m*x,this._z=o*m*x-c*f*h,this._w=o*m*h-c*f*x;break;case"XZY":this._x=c*m*h-o*f*x,this._y=o*f*h-c*m*x,this._z=o*m*x+c*f*h,this._w=o*m*h+c*f*x;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const l=t/2,n=Math.sin(l);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(l),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,l=t[0],n=t[4],q=t[8],s=t[1],a=t[5],r=t[9],o=t[2],m=t[6],h=t[10],c=l+a+h;if(c>0){const f=.5/Math.sqrt(c+1);this._w=.25/f,this._x=(m-r)*f,this._y=(q-o)*f,this._z=(s-n)*f}else if(l>a&&l>h){const f=2*Math.sqrt(1+l-a-h);this._w=(m-r)/f,this._x=.25*f,this._y=(n+s)/f,this._z=(q+o)/f}else if(a>h){const f=2*Math.sqrt(1+a-l-h);this._w=(q-o)/f,this._x=(n+s)/f,this._y=.25*f,this._z=(r+m)/f}else{const f=2*Math.sqrt(1+h-l-a);this._w=(s-n)/f,this._x=(q+o)/f,this._y=(r+m)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let l=e.dot(t)+1;return l<Number.EPSILON?(l=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=l):(this._x=0,this._y=-e.z,this._z=e.y,this._w=l)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=l),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(e2(this.dot(e),-1,1)))}rotateTowards(e,t){const l=this.angleTo(e);if(l===0)return this;const n=Math.min(1,t/l);return this.slerp(e,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const l=e._x,n=e._y,q=e._z,s=e._w,a=t._x,r=t._y,o=t._z,m=t._w;return this._x=l*m+s*a+n*o-q*r,this._y=n*m+s*r+q*a-l*o,this._z=q*m+s*o+l*r-n*a,this._w=s*m-l*a-n*r-q*o,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const l=this._x,n=this._y,q=this._z,s=this._w;let a=s*e._w+l*e._x+n*e._y+q*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=s,this._x=l,this._y=n,this._z=q,this;const r=1-a*a;if(r<=Number.EPSILON){const f=1-t;return this._w=f*s+t*this._w,this._x=f*l+t*this._x,this._y=f*n+t*this._y,this._z=f*q+t*this._z,this.normalize(),this._onChangeCallback(),this}const o=Math.sqrt(r),m=Math.atan2(o,a),h=Math.sin((1-t)*m)/o,c=Math.sin(t*m)/o;return this._w=s*h+this._w*c,this._x=l*h+this._x*c,this._y=n*h+this._y*c,this._z=q*h+this._z*c,this._onChangeCallback(),this}slerpQuaternions(e,t,l){return this.copy(e).slerp(t,l)}random(){const e=Math.random(),t=Math.sqrt(1-e),l=Math.sqrt(e),n=2*Math.PI*Math.random(),q=2*Math.PI*Math.random();return this.set(t*Math.cos(n),l*Math.sin(q),l*Math.cos(q),t*Math.sin(n))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class S{constructor(e=0,t=0,l=0){S.prototype.isVector3=!0,this.x=e,this.y=t,this.z=l}set(e,t,l){return l===void 0&&(l=this.z),this.x=e,this.y=t,this.z=l,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(g8.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(g8.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,l=this.y,n=this.z,q=e.elements;return this.x=q[0]*t+q[3]*l+q[6]*n,this.y=q[1]*t+q[4]*l+q[7]*n,this.z=q[2]*t+q[5]*l+q[8]*n,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,l=this.y,n=this.z,q=e.elements,s=1/(q[3]*t+q[7]*l+q[11]*n+q[15]);return this.x=(q[0]*t+q[4]*l+q[8]*n+q[12])*s,this.y=(q[1]*t+q[5]*l+q[9]*n+q[13])*s,this.z=(q[2]*t+q[6]*l+q[10]*n+q[14])*s,this}applyQuaternion(e){const t=this.x,l=this.y,n=this.z,q=e.x,s=e.y,a=e.z,r=e.w,o=r*t+s*n-a*l,m=r*l+a*t-q*n,h=r*n+q*l-s*t,c=-q*t-s*l-a*n;return this.x=o*r+c*-q+m*-a-h*-s,this.y=m*r+c*-s+h*-q-o*-a,this.z=h*r+c*-a+o*-s-m*-q,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,l=this.y,n=this.z,q=e.elements;return this.x=q[0]*t+q[4]*l+q[8]*n,this.y=q[1]*t+q[5]*l+q[9]*n,this.z=q[2]*t+q[6]*l+q[10]*n,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Math.max(e,Math.min(t,l)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,l){return this.x=e.x+(t.x-e.x)*l,this.y=e.y+(t.y-e.y)*l,this.z=e.z+(t.z-e.z)*l,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const l=e.x,n=e.y,q=e.z,s=t.x,a=t.y,r=t.z;return this.x=n*r-q*a,this.y=q*s-l*r,this.z=l*a-n*s,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const l=e.dot(this)/t;return this.copy(e).multiplyScalar(l)}projectOnPlane(e){return P6.copy(this).projectOnVector(e),this.sub(P6)}reflect(e){return this.sub(P6.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const l=this.dot(e)/t;return Math.acos(e2(l,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,l=this.y-e.y,n=this.z-e.z;return t*t+l*l+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,l){const n=Math.sin(t)*e;return this.x=n*Math.sin(l),this.y=Math.cos(t)*e,this.z=n*Math.cos(l),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,l){return this.x=e*Math.sin(t),this.y=l,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),l=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=l,this.z=n,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,l=Math.sqrt(1-e**2);return this.x=l*Math.cos(t),this.y=l*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const P6=new S,g8=new D3;class F4{constructor(e=new S(1/0,1/0,1/0),t=new S(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,l=1/0,n=1/0,q=-1/0,s=-1/0,a=-1/0;for(let r=0,o=e.length;r<o;r+=3){const m=e[r],h=e[r+1],c=e[r+2];m<t&&(t=m),h<l&&(l=h),c<n&&(n=c),m>q&&(q=m),h>s&&(s=h),c>a&&(a=c)}return this.min.set(t,l,n),this.max.set(q,s,a),this}setFromBufferAttribute(e){let t=1/0,l=1/0,n=1/0,q=-1/0,s=-1/0,a=-1/0;for(let r=0,o=e.count;r<o;r++){const m=e.getX(r),h=e.getY(r),c=e.getZ(r);m<t&&(t=m),h<l&&(l=h),c<n&&(n=c),m>q&&(q=m),h>s&&(s=h),c>a&&(a=c)}return this.min.set(t,l,n),this.max.set(q,s,a),this}setFromPoints(e){this.makeEmpty();for(let t=0,l=e.length;t<l;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const l=o3.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(l),this.max.copy(e).add(l),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const l=e.geometry;if(l!==void 0)if(t&&l.attributes!=null&&l.attributes.position!==void 0){const q=l.attributes.position;for(let s=0,a=q.count;s<a;s++)o3.fromBufferAttribute(q,s).applyMatrix4(e.matrixWorld),this.expandByPoint(o3)}else l.boundingBox===null&&l.computeBoundingBox(),R6.copy(l.boundingBox),R6.applyMatrix4(e.matrixWorld),this.union(R6);const n=e.children;for(let q=0,s=n.length;q<s;q++)this.expandByObject(n[q],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,o3),o3.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,l;return e.normal.x>0?(t=e.normal.x*this.min.x,l=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,l=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,l+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,l+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,l+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,l+=e.normal.z*this.min.z),t<=-e.constant&&l>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(m4),P4.subVectors(this.max,m4),P3.subVectors(e.a,m4),R3.subVectors(e.b,m4),I3.subVectors(e.c,m4),$2.subVectors(R3,P3),K2.subVectors(I3,R3),m3.subVectors(P3,I3);let t=[0,-$2.z,$2.y,0,-K2.z,K2.y,0,-m3.z,m3.y,$2.z,0,-$2.x,K2.z,0,-K2.x,m3.z,0,-m3.x,-$2.y,$2.x,0,-K2.y,K2.x,0,-m3.y,m3.x,0];return!I6(t,P3,R3,I3,P4)||(t=[1,0,0,0,1,0,0,0,1],!I6(t,P3,R3,I3,P4))?!1:(R4.crossVectors($2,K2),t=[R4.x,R4.y,R4.z],I6(t,P3,R3,I3,P4))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return o3.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=this.getSize(o3).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(N2[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),N2[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),N2[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),N2[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),N2[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),N2[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),N2[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),N2[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(N2),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const N2=[new S,new S,new S,new S,new S,new S,new S,new S],o3=new S,R6=new F4,P3=new S,R3=new S,I3=new S,$2=new S,K2=new S,m3=new S,m4=new S,P4=new S,R4=new S,h3=new S;function I6(i,e,t,l,n){for(let q=0,s=i.length-3;q<=s;q+=3){h3.fromArray(i,q);const a=n.x*Math.abs(h3.x)+n.y*Math.abs(h3.y)+n.z*Math.abs(h3.z),r=e.dot(h3),o=t.dot(h3),m=l.dot(h3);if(Math.max(-Math.max(r,o,m),Math.min(r,o,m))>a)return!1}return!0}const p0=new F4,A8=new S,I4=new S,N6=new S;class x6{constructor(e=new S,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const l=this.center;t!==void 0?l.copy(t):p0.setFromPoints(e).getCenter(l);let n=0;for(let q=0,s=e.length;q<s;q++)n=Math.max(n,l.distanceToSquared(e[q]));return this.radius=Math.sqrt(n),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const l=this.center.distanceToSquared(e);return t.copy(e),l>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){N6.subVectors(e,this.center);const t=N6.lengthSq();if(t>this.radius*this.radius){const l=Math.sqrt(t),n=(l-this.radius)*.5;this.center.add(N6.multiplyScalar(n/l)),this.radius+=n}return this}union(e){return this.center.equals(e.center)===!0?I4.set(0,0,1).multiplyScalar(e.radius):I4.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(A8.copy(e.center).add(I4)),this.expandByPoint(A8.copy(e.center).sub(I4)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const O2=new S,O6=new S,N4=new S,Q2=new S,U6=new S,O4=new S,k6=new S;class y5{constructor(e=new S,t=new S(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,O2)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const l=t.dot(this.direction);return l<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(l).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=O2.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(O2.copy(this.direction).multiplyScalar(t).add(this.origin),O2.distanceToSquared(e))}distanceSqToSegment(e,t,l,n){O6.copy(e).add(t).multiplyScalar(.5),N4.copy(t).sub(e).normalize(),Q2.copy(this.origin).sub(O6);const q=e.distanceTo(t)*.5,s=-this.direction.dot(N4),a=Q2.dot(this.direction),r=-Q2.dot(N4),o=Q2.lengthSq(),m=Math.abs(1-s*s);let h,c,f,x;if(m>0)if(h=s*r-a,c=s*a-r,x=q*m,h>=0)if(c>=-x)if(c<=x){const d=1/m;h*=d,c*=d,f=h*(h+s*c+2*a)+c*(s*h+c+2*r)+o}else c=q,h=Math.max(0,-(s*c+a)),f=-h*h+c*(c+2*r)+o;else c=-q,h=Math.max(0,-(s*c+a)),f=-h*h+c*(c+2*r)+o;else c<=-x?(h=Math.max(0,-(-s*q+a)),c=h>0?-q:Math.min(Math.max(-q,-r),q),f=-h*h+c*(c+2*r)+o):c<=x?(h=0,c=Math.min(Math.max(-q,-r),q),f=c*(c+2*r)+o):(h=Math.max(0,-(s*q+a)),c=h>0?q:Math.min(Math.max(-q,-r),q),f=-h*h+c*(c+2*r)+o);else c=s>0?-q:q,h=Math.max(0,-(s*c+a)),f=-h*h+c*(c+2*r)+o;return l&&l.copy(this.direction).multiplyScalar(h).add(this.origin),n&&n.copy(N4).multiplyScalar(c).add(O6),f}intersectSphere(e,t){O2.subVectors(e.center,this.origin);const l=O2.dot(this.direction),n=O2.dot(O2)-l*l,q=e.radius*e.radius;if(n>q)return null;const s=Math.sqrt(q-n),a=l-s,r=l+s;return a<0&&r<0?null:a<0?this.at(r,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const l=-(this.origin.dot(e.normal)+e.constant)/t;return l>=0?l:null}intersectPlane(e,t){const l=this.distanceToPlane(e);return l===null?null:this.at(l,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let l,n,q,s,a,r;const o=1/this.direction.x,m=1/this.direction.y,h=1/this.direction.z,c=this.origin;return o>=0?(l=(e.min.x-c.x)*o,n=(e.max.x-c.x)*o):(l=(e.max.x-c.x)*o,n=(e.min.x-c.x)*o),m>=0?(q=(e.min.y-c.y)*m,s=(e.max.y-c.y)*m):(q=(e.max.y-c.y)*m,s=(e.min.y-c.y)*m),l>s||q>n||((q>l||l!==l)&&(l=q),(s<n||n!==n)&&(n=s),h>=0?(a=(e.min.z-c.z)*h,r=(e.max.z-c.z)*h):(a=(e.max.z-c.z)*h,r=(e.min.z-c.z)*h),l>r||a>n)||((a>l||l!==l)&&(l=a),(r<n||n!==n)&&(n=r),n<0)?null:this.at(l>=0?l:n,t)}intersectsBox(e){return this.intersectBox(e,O2)!==null}intersectTriangle(e,t,l,n,q){U6.subVectors(t,e),O4.subVectors(l,e),k6.crossVectors(U6,O4);let s=this.direction.dot(k6),a;if(s>0){if(n)return null;a=1}else if(s<0)a=-1,s=-s;else return null;Q2.subVectors(this.origin,e);const r=a*this.direction.dot(O4.crossVectors(Q2,O4));if(r<0)return null;const o=a*this.direction.dot(U6.cross(Q2));if(o<0||r+o>s)return null;const m=-a*Q2.dot(k6);return m<0?null:this.at(m/s,q)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class G1{constructor(){G1.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,t,l,n,q,s,a,r,o,m,h,c,f,x,d,u){const p=this.elements;return p[0]=e,p[4]=t,p[8]=l,p[12]=n,p[1]=q,p[5]=s,p[9]=a,p[13]=r,p[2]=o,p[6]=m,p[10]=h,p[14]=c,p[3]=f,p[7]=x,p[11]=d,p[15]=u,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new G1().fromArray(this.elements)}copy(e){const t=this.elements,l=e.elements;return t[0]=l[0],t[1]=l[1],t[2]=l[2],t[3]=l[3],t[4]=l[4],t[5]=l[5],t[6]=l[6],t[7]=l[7],t[8]=l[8],t[9]=l[9],t[10]=l[10],t[11]=l[11],t[12]=l[12],t[13]=l[13],t[14]=l[14],t[15]=l[15],this}copyPosition(e){const t=this.elements,l=e.elements;return t[12]=l[12],t[13]=l[13],t[14]=l[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,l){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),l.setFromMatrixColumn(this,2),this}makeBasis(e,t,l){return this.set(e.x,t.x,l.x,0,e.y,t.y,l.y,0,e.z,t.z,l.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,l=e.elements,n=1/N3.setFromMatrixColumn(e,0).length(),q=1/N3.setFromMatrixColumn(e,1).length(),s=1/N3.setFromMatrixColumn(e,2).length();return t[0]=l[0]*n,t[1]=l[1]*n,t[2]=l[2]*n,t[3]=0,t[4]=l[4]*q,t[5]=l[5]*q,t[6]=l[6]*q,t[7]=0,t[8]=l[8]*s,t[9]=l[9]*s,t[10]=l[10]*s,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,l=e.x,n=e.y,q=e.z,s=Math.cos(l),a=Math.sin(l),r=Math.cos(n),o=Math.sin(n),m=Math.cos(q),h=Math.sin(q);if(e.order==="XYZ"){const c=s*m,f=s*h,x=a*m,d=a*h;t[0]=r*m,t[4]=-r*h,t[8]=o,t[1]=f+x*o,t[5]=c-d*o,t[9]=-a*r,t[2]=d-c*o,t[6]=x+f*o,t[10]=s*r}else if(e.order==="YXZ"){const c=r*m,f=r*h,x=o*m,d=o*h;t[0]=c+d*a,t[4]=x*a-f,t[8]=s*o,t[1]=s*h,t[5]=s*m,t[9]=-a,t[2]=f*a-x,t[6]=d+c*a,t[10]=s*r}else if(e.order==="ZXY"){const c=r*m,f=r*h,x=o*m,d=o*h;t[0]=c-d*a,t[4]=-s*h,t[8]=x+f*a,t[1]=f+x*a,t[5]=s*m,t[9]=d-c*a,t[2]=-s*o,t[6]=a,t[10]=s*r}else if(e.order==="ZYX"){const c=s*m,f=s*h,x=a*m,d=a*h;t[0]=r*m,t[4]=x*o-f,t[8]=c*o+d,t[1]=r*h,t[5]=d*o+c,t[9]=f*o-x,t[2]=-o,t[6]=a*r,t[10]=s*r}else if(e.order==="YZX"){const c=s*r,f=s*o,x=a*r,d=a*o;t[0]=r*m,t[4]=d-c*h,t[8]=x*h+f,t[1]=h,t[5]=s*m,t[9]=-a*m,t[2]=-o*m,t[6]=f*h+x,t[10]=c-d*h}else if(e.order==="XZY"){const c=s*r,f=s*o,x=a*r,d=a*o;t[0]=r*m,t[4]=-h,t[8]=o*m,t[1]=c*h+d,t[5]=s*m,t[9]=f*h-x,t[2]=x*h-f,t[6]=a*m,t[10]=d*h+c}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(_0,e,g0)}lookAt(e,t,l){const n=this.elements;return u2.subVectors(e,t),u2.lengthSq()===0&&(u2.z=1),u2.normalize(),e3.crossVectors(l,u2),e3.lengthSq()===0&&(Math.abs(l.z)===1?u2.x+=1e-4:u2.z+=1e-4,u2.normalize(),e3.crossVectors(l,u2)),e3.normalize(),U4.crossVectors(u2,e3),n[0]=e3.x,n[4]=U4.x,n[8]=u2.x,n[1]=e3.y,n[5]=U4.y,n[9]=u2.y,n[2]=e3.z,n[6]=U4.z,n[10]=u2.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const l=e.elements,n=t.elements,q=this.elements,s=l[0],a=l[4],r=l[8],o=l[12],m=l[1],h=l[5],c=l[9],f=l[13],x=l[2],d=l[6],u=l[10],p=l[14],A=l[3],B=l[7],v=l[11],g=l[15],F=n[0],z=n[4],_=n[8],M=n[12],T=n[1],X=n[5],q1=n[9],N=n[13],w=n[2],W=n[6],j=n[10],Z=n[14],G=n[3],P=n[7],I=n[11],$=n[15];return q[0]=s*F+a*T+r*w+o*G,q[4]=s*z+a*X+r*W+o*P,q[8]=s*_+a*q1+r*j+o*I,q[12]=s*M+a*N+r*Z+o*$,q[1]=m*F+h*T+c*w+f*G,q[5]=m*z+h*X+c*W+f*P,q[9]=m*_+h*q1+c*j+f*I,q[13]=m*M+h*N+c*Z+f*$,q[2]=x*F+d*T+u*w+p*G,q[6]=x*z+d*X+u*W+p*P,q[10]=x*_+d*q1+u*j+p*I,q[14]=x*M+d*N+u*Z+p*$,q[3]=A*F+B*T+v*w+g*G,q[7]=A*z+B*X+v*W+g*P,q[11]=A*_+B*q1+v*j+g*I,q[15]=A*M+B*N+v*Z+g*$,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],l=e[4],n=e[8],q=e[12],s=e[1],a=e[5],r=e[9],o=e[13],m=e[2],h=e[6],c=e[10],f=e[14],x=e[3],d=e[7],u=e[11],p=e[15];return x*(+q*r*h-n*o*h-q*a*c+l*o*c+n*a*f-l*r*f)+d*(+t*r*f-t*o*c+q*s*c-n*s*f+n*o*m-q*r*m)+u*(+t*o*h-t*a*f-q*s*h+l*s*f+q*a*m-l*o*m)+p*(-n*a*m-t*r*h+t*a*c+n*s*h-l*s*c+l*r*m)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,l){const n=this.elements;return e.isVector3?(n[12]=e.x,n[13]=e.y,n[14]=e.z):(n[12]=e,n[13]=t,n[14]=l),this}invert(){const e=this.elements,t=e[0],l=e[1],n=e[2],q=e[3],s=e[4],a=e[5],r=e[6],o=e[7],m=e[8],h=e[9],c=e[10],f=e[11],x=e[12],d=e[13],u=e[14],p=e[15],A=h*u*o-d*c*o+d*r*f-a*u*f-h*r*p+a*c*p,B=x*c*o-m*u*o-x*r*f+s*u*f+m*r*p-s*c*p,v=m*d*o-x*h*o+x*a*f-s*d*f-m*a*p+s*h*p,g=x*h*r-m*d*r-x*a*c+s*d*c+m*a*u-s*h*u,F=t*A+l*B+n*v+q*g;if(F===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const z=1/F;return e[0]=A*z,e[1]=(d*c*q-h*u*q-d*n*f+l*u*f+h*n*p-l*c*p)*z,e[2]=(a*u*q-d*r*q+d*n*o-l*u*o-a*n*p+l*r*p)*z,e[3]=(h*r*q-a*c*q-h*n*o+l*c*o+a*n*f-l*r*f)*z,e[4]=B*z,e[5]=(m*u*q-x*c*q+x*n*f-t*u*f-m*n*p+t*c*p)*z,e[6]=(x*r*q-s*u*q-x*n*o+t*u*o+s*n*p-t*r*p)*z,e[7]=(s*c*q-m*r*q+m*n*o-t*c*o-s*n*f+t*r*f)*z,e[8]=v*z,e[9]=(x*h*q-m*d*q-x*l*f+t*d*f+m*l*p-t*h*p)*z,e[10]=(s*d*q-x*a*q+x*l*o-t*d*o-s*l*p+t*a*p)*z,e[11]=(m*a*q-s*h*q-m*l*o+t*h*o+s*l*f-t*a*f)*z,e[12]=g*z,e[13]=(m*d*n-x*h*n+x*l*c-t*d*c-m*l*u+t*h*u)*z,e[14]=(x*a*n-s*d*n-x*l*r+t*d*r+s*l*u-t*a*u)*z,e[15]=(s*h*n-m*a*n+m*l*r-t*h*r-s*l*c+t*a*c)*z,this}scale(e){const t=this.elements,l=e.x,n=e.y,q=e.z;return t[0]*=l,t[4]*=n,t[8]*=q,t[1]*=l,t[5]*=n,t[9]*=q,t[2]*=l,t[6]*=n,t[10]*=q,t[3]*=l,t[7]*=n,t[11]*=q,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],l=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,l,n))}makeTranslation(e,t,l){return this.set(1,0,0,e,0,1,0,t,0,0,1,l,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),l=Math.sin(e);return this.set(1,0,0,0,0,t,-l,0,0,l,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),l=Math.sin(e);return this.set(t,0,l,0,0,1,0,0,-l,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),l=Math.sin(e);return this.set(t,-l,0,0,l,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const l=Math.cos(t),n=Math.sin(t),q=1-l,s=e.x,a=e.y,r=e.z,o=q*s,m=q*a;return this.set(o*s+l,o*a-n*r,o*r+n*a,0,o*a+n*r,m*a+l,m*r-n*s,0,o*r-n*a,m*r+n*s,q*r*r+l,0,0,0,0,1),this}makeScale(e,t,l){return this.set(e,0,0,0,0,t,0,0,0,0,l,0,0,0,0,1),this}makeShear(e,t,l,n,q,s){return this.set(1,l,q,0,e,1,s,0,t,n,1,0,0,0,0,1),this}compose(e,t,l){const n=this.elements,q=t._x,s=t._y,a=t._z,r=t._w,o=q+q,m=s+s,h=a+a,c=q*o,f=q*m,x=q*h,d=s*m,u=s*h,p=a*h,A=r*o,B=r*m,v=r*h,g=l.x,F=l.y,z=l.z;return n[0]=(1-(d+p))*g,n[1]=(f+v)*g,n[2]=(x-B)*g,n[3]=0,n[4]=(f-v)*F,n[5]=(1-(c+p))*F,n[6]=(u+A)*F,n[7]=0,n[8]=(x+B)*z,n[9]=(u-A)*z,n[10]=(1-(c+d))*z,n[11]=0,n[12]=e.x,n[13]=e.y,n[14]=e.z,n[15]=1,this}decompose(e,t,l){const n=this.elements;let q=N3.set(n[0],n[1],n[2]).length();const s=N3.set(n[4],n[5],n[6]).length(),a=N3.set(n[8],n[9],n[10]).length();this.determinant()<0&&(q=-q),e.x=n[12],e.y=n[13],e.z=n[14],M2.copy(this);const o=1/q,m=1/s,h=1/a;return M2.elements[0]*=o,M2.elements[1]*=o,M2.elements[2]*=o,M2.elements[4]*=m,M2.elements[5]*=m,M2.elements[6]*=m,M2.elements[8]*=h,M2.elements[9]*=h,M2.elements[10]*=h,t.setFromRotationMatrix(M2),l.x=q,l.y=s,l.z=a,this}makePerspective(e,t,l,n,q,s){const a=this.elements,r=2*q/(t-e),o=2*q/(l-n),m=(t+e)/(t-e),h=(l+n)/(l-n),c=-(s+q)/(s-q),f=-2*s*q/(s-q);return a[0]=r,a[4]=0,a[8]=m,a[12]=0,a[1]=0,a[5]=o,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=c,a[14]=f,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(e,t,l,n,q,s){const a=this.elements,r=1/(t-e),o=1/(l-n),m=1/(s-q),h=(t+e)*r,c=(l+n)*o,f=(s+q)*m;return a[0]=2*r,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*o,a[9]=0,a[13]=-c,a[2]=0,a[6]=0,a[10]=-2*m,a[14]=-f,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(e){const t=this.elements,l=e.elements;for(let n=0;n<16;n++)if(t[n]!==l[n])return!1;return!0}fromArray(e,t=0){for(let l=0;l<16;l++)this.elements[l]=e[l+t];return this}toArray(e=[],t=0){const l=this.elements;return e[t]=l[0],e[t+1]=l[1],e[t+2]=l[2],e[t+3]=l[3],e[t+4]=l[4],e[t+5]=l[5],e[t+6]=l[6],e[t+7]=l[7],e[t+8]=l[8],e[t+9]=l[9],e[t+10]=l[10],e[t+11]=l[11],e[t+12]=l[12],e[t+13]=l[13],e[t+14]=l[14],e[t+15]=l[15],e}}const N3=new S,M2=new G1,_0=new S(0,0,0),g0=new S(1,1,1),e3=new S,U4=new S,u2=new S,E8=new G1,v8=new D3;class S4{constructor(e=0,t=0,l=0,n=S4.DefaultOrder){this.isEuler=!0,this._x=e,this._y=t,this._z=l,this._order=n}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,l,n=this._order){return this._x=e,this._y=t,this._z=l,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,l=!0){const n=e.elements,q=n[0],s=n[4],a=n[8],r=n[1],o=n[5],m=n[9],h=n[2],c=n[6],f=n[10];switch(t){case"XYZ":this._y=Math.asin(e2(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-m,f),this._z=Math.atan2(-s,q)):(this._x=Math.atan2(c,o),this._z=0);break;case"YXZ":this._x=Math.asin(-e2(m,-1,1)),Math.abs(m)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(r,o)):(this._y=Math.atan2(-h,q),this._z=0);break;case"ZXY":this._x=Math.asin(e2(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(-h,f),this._z=Math.atan2(-s,o)):(this._y=0,this._z=Math.atan2(r,q));break;case"ZYX":this._y=Math.asin(-e2(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(c,f),this._z=Math.atan2(r,q)):(this._x=0,this._z=Math.atan2(-s,o));break;case"YZX":this._z=Math.asin(e2(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(-m,o),this._y=Math.atan2(-h,q)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-e2(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(c,o),this._y=Math.atan2(a,q)):(this._x=Math.atan2(-m,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,l===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,l){return E8.makeRotationFromQuaternion(e),this.setFromRotationMatrix(E8,t,l)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return v8.setFromEuler(this),this.setFromQuaternion(v8,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}S4.DefaultOrder="XYZ";S4.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class M5{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let A0=0;const C8=new S,O3=new D3,U2=new G1,k4=new S,h4=new S,E0=new S,v0=new D3,D8=new S(1,0,0),B8=new S(0,1,0),y8=new S(0,0,1),C0={type:"added"},M8={type:"removed"};class J1 extends y3{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:A0++}),this.uuid=M3(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=J1.DefaultUp.clone();const e=new S,t=new S4,l=new D3,n=new S(1,1,1);function q(){l.setFromEuler(t,!1)}function s(){t.setFromQuaternion(l,void 0,!1)}t._onChange(q),l._onChange(s),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:l},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new G1},normalMatrix:{value:new E2}}),this.matrix=new G1,this.matrixWorld=new G1,this.matrixAutoUpdate=J1.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=J1.DefaultMatrixWorldAutoUpdate,this.layers=new M5,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return O3.setFromAxisAngle(e,t),this.quaternion.multiply(O3),this}rotateOnWorldAxis(e,t){return O3.setFromAxisAngle(e,t),this.quaternion.premultiply(O3),this}rotateX(e){return this.rotateOnAxis(D8,e)}rotateY(e){return this.rotateOnAxis(B8,e)}rotateZ(e){return this.rotateOnAxis(y8,e)}translateOnAxis(e,t){return C8.copy(e).applyQuaternion(this.quaternion),this.position.add(C8.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(D8,e)}translateY(e){return this.translateOnAxis(B8,e)}translateZ(e){return this.translateOnAxis(y8,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(U2.copy(this.matrixWorld).invert())}lookAt(e,t,l){e.isVector3?k4.copy(e):k4.set(e,t,l);const n=this.parent;this.updateWorldMatrix(!0,!1),h4.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?U2.lookAt(h4,k4,this.up):U2.lookAt(k4,h4,this.up),this.quaternion.setFromRotationMatrix(U2),n&&(U2.extractRotation(n.matrixWorld),O3.setFromRotationMatrix(U2),this.quaternion.premultiply(O3.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(C0)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.remove(arguments[l]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(M8)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(M8)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),U2.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),U2.multiply(e.parent.matrixWorld)),e.applyMatrix4(U2),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let l=0,n=this.children.length;l<n;l++){const s=this.children[l].getObjectByProperty(e,t);if(s!==void 0)return s}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(h4,e,E0),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(h4,v0,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let l=0,n=t.length;l<n;l++)t[l].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let l=0,n=t.length;l<n;l++)t[l].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let l=0,n=t.length;l<n;l++){const q=t[l];(q.matrixWorldAutoUpdate===!0||e===!0)&&q.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const l=this.parent;if(e===!0&&l!==null&&l.matrixWorldAutoUpdate===!0&&l.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const n=this.children;for(let q=0,s=n.length;q<s;q++){const a=n[q];a.matrixWorldAutoUpdate===!0&&a.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",l={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},l.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.castShadow===!0&&(n.castShadow=!0),this.receiveShadow===!0&&(n.receiveShadow=!0),this.visible===!1&&(n.visible=!1),this.frustumCulled===!1&&(n.frustumCulled=!1),this.renderOrder!==0&&(n.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(n.instanceColor=this.instanceColor.toJSON()));function q(a,r){return a[r.uuid]===void 0&&(a[r.uuid]=r.toJSON(e)),r.uuid}if(this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(n.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=q(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const r=a.shapes;if(Array.isArray(r))for(let o=0,m=r.length;o<m;o++){const h=r[o];q(e.shapes,h)}else q(e.shapes,r)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(q(e.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let r=0,o=this.material.length;r<o;r++)a.push(q(e.materials,this.material[r]));n.material=a}else n.material=q(e.materials,this.material);if(this.children.length>0){n.children=[];for(let a=0;a<this.children.length;a++)n.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){n.animations=[];for(let a=0;a<this.animations.length;a++){const r=this.animations[a];n.animations.push(q(e.animations,r))}}if(t){const a=s(e.geometries),r=s(e.materials),o=s(e.textures),m=s(e.images),h=s(e.shapes),c=s(e.skeletons),f=s(e.animations),x=s(e.nodes);a.length>0&&(l.geometries=a),r.length>0&&(l.materials=r),o.length>0&&(l.textures=o),m.length>0&&(l.images=m),h.length>0&&(l.shapes=h),c.length>0&&(l.skeletons=c),f.length>0&&(l.animations=f),x.length>0&&(l.nodes=x)}return l.object=n,l;function s(a){const r=[];for(const o in a){const m=a[o];delete m.metadata,r.push(m)}return r}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let l=0;l<e.children.length;l++){const n=e.children[l];this.add(n.clone())}return this}}J1.DefaultUp=new S(0,1,0);J1.DefaultMatrixAutoUpdate=!0;J1.DefaultMatrixWorldAutoUpdate=!0;const F2=new S,k2=new S,G6=new S,G2=new S,U3=new S,k3=new S,F8=new S,V6=new S,H6=new S,W6=new S;class X2{constructor(e=new S,t=new S,l=new S){this.a=e,this.b=t,this.c=l}static getNormal(e,t,l,n){n.subVectors(l,t),F2.subVectors(e,t),n.cross(F2);const q=n.lengthSq();return q>0?n.multiplyScalar(1/Math.sqrt(q)):n.set(0,0,0)}static getBarycoord(e,t,l,n,q){F2.subVectors(n,t),k2.subVectors(l,t),G6.subVectors(e,t);const s=F2.dot(F2),a=F2.dot(k2),r=F2.dot(G6),o=k2.dot(k2),m=k2.dot(G6),h=s*o-a*a;if(h===0)return q.set(-2,-1,-1);const c=1/h,f=(o*r-a*m)*c,x=(s*m-a*r)*c;return q.set(1-f-x,x,f)}static containsPoint(e,t,l,n){return this.getBarycoord(e,t,l,n,G2),G2.x>=0&&G2.y>=0&&G2.x+G2.y<=1}static getUV(e,t,l,n,q,s,a,r){return this.getBarycoord(e,t,l,n,G2),r.set(0,0),r.addScaledVector(q,G2.x),r.addScaledVector(s,G2.y),r.addScaledVector(a,G2.z),r}static isFrontFacing(e,t,l,n){return F2.subVectors(l,t),k2.subVectors(e,t),F2.cross(k2).dot(n)<0}set(e,t,l){return this.a.copy(e),this.b.copy(t),this.c.copy(l),this}setFromPointsAndIndices(e,t,l,n){return this.a.copy(e[t]),this.b.copy(e[l]),this.c.copy(e[n]),this}setFromAttributeAndIndices(e,t,l,n){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,l),this.c.fromBufferAttribute(e,n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return F2.subVectors(this.c,this.b),k2.subVectors(this.a,this.b),F2.cross(k2).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return X2.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return X2.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,l,n,q){return X2.getUV(e,this.a,this.b,this.c,t,l,n,q)}containsPoint(e){return X2.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return X2.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const l=this.a,n=this.b,q=this.c;let s,a;U3.subVectors(n,l),k3.subVectors(q,l),V6.subVectors(e,l);const r=U3.dot(V6),o=k3.dot(V6);if(r<=0&&o<=0)return t.copy(l);H6.subVectors(e,n);const m=U3.dot(H6),h=k3.dot(H6);if(m>=0&&h<=m)return t.copy(n);const c=r*h-m*o;if(c<=0&&r>=0&&m<=0)return s=r/(r-m),t.copy(l).addScaledVector(U3,s);W6.subVectors(e,q);const f=U3.dot(W6),x=k3.dot(W6);if(x>=0&&f<=x)return t.copy(q);const d=f*o-r*x;if(d<=0&&o>=0&&x<=0)return a=o/(o-x),t.copy(l).addScaledVector(k3,a);const u=m*x-f*h;if(u<=0&&h-m>=0&&f-x>=0)return F8.subVectors(q,n),a=(h-m)/(h-m+(f-x)),t.copy(n).addScaledVector(F8,a);const p=1/(u+d+c);return s=d*p,a=c*p,t.copy(l).addScaledVector(U3,s).addScaledVector(k3,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let D0=0;class F3 extends y3{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:D0++}),this.uuid=M3(),this.name="",this.type="Material",this.blending=K3,this.side=i3,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=d7,this.blendDst=x7,this.blendEquation=j3,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=o5,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=e0,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=z6,this.stencilZFail=z6,this.stencilZPass=z6,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const l=e[t];if(l===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}const n=this[t];if(n===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}n&&n.isColor?n.set(l):n&&n.isVector3&&l&&l.isVector3?n.copy(l):this[t]=l}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const l={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};l.uuid=this.uuid,l.type=this.type,this.name!==""&&(l.name=this.name),this.color&&this.color.isColor&&(l.color=this.color.getHex()),this.roughness!==void 0&&(l.roughness=this.roughness),this.metalness!==void 0&&(l.metalness=this.metalness),this.sheen!==void 0&&(l.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(l.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(l.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(l.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(l.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(l.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(l.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(l.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(l.shininess=this.shininess),this.clearcoat!==void 0&&(l.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(l.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(l.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(l.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(l.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,l.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(l.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(l.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(l.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(l.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(l.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(l.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(l.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(l.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(l.lightMap=this.lightMap.toJSON(e).uuid,l.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(l.aoMap=this.aoMap.toJSON(e).uuid,l.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(l.bumpMap=this.bumpMap.toJSON(e).uuid,l.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(l.normalMap=this.normalMap.toJSON(e).uuid,l.normalMapType=this.normalMapType,l.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(l.displacementMap=this.displacementMap.toJSON(e).uuid,l.displacementScale=this.displacementScale,l.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(l.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(l.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(l.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(l.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(l.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(l.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(l.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(l.combine=this.combine)),this.envMapIntensity!==void 0&&(l.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(l.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(l.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(l.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(l.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(l.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(l.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(l.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&(l.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(l.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(l.size=this.size),this.shadowSide!==null&&(l.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(l.sizeAttenuation=this.sizeAttenuation),this.blending!==K3&&(l.blending=this.blending),this.side!==i3&&(l.side=this.side),this.vertexColors&&(l.vertexColors=!0),this.opacity<1&&(l.opacity=this.opacity),this.transparent===!0&&(l.transparent=this.transparent),l.depthFunc=this.depthFunc,l.depthTest=this.depthTest,l.depthWrite=this.depthWrite,l.colorWrite=this.colorWrite,l.stencilWrite=this.stencilWrite,l.stencilWriteMask=this.stencilWriteMask,l.stencilFunc=this.stencilFunc,l.stencilRef=this.stencilRef,l.stencilFuncMask=this.stencilFuncMask,l.stencilFail=this.stencilFail,l.stencilZFail=this.stencilZFail,l.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(l.rotation=this.rotation),this.polygonOffset===!0&&(l.polygonOffset=!0),this.polygonOffsetFactor!==0&&(l.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(l.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(l.linewidth=this.linewidth),this.dashSize!==void 0&&(l.dashSize=this.dashSize),this.gapSize!==void 0&&(l.gapSize=this.gapSize),this.scale!==void 0&&(l.scale=this.scale),this.dithering===!0&&(l.dithering=!0),this.alphaTest>0&&(l.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(l.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(l.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(l.wireframe=this.wireframe),this.wireframeLinewidth>1&&(l.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(l.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(l.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(l.flatShading=this.flatShading),this.visible===!1&&(l.visible=!1),this.toneMapped===!1&&(l.toneMapped=!1),this.fog===!1&&(l.fog=!1),JSON.stringify(this.userData)!=="{}"&&(l.userData=this.userData);function n(q){const s=[];for(const a in q){const r=q[a];delete r.metadata,s.push(r)}return s}if(t){const q=n(e.textures),s=n(e.images);q.length>0&&(l.textures=q),s.length>0&&(l.images=s)}return l}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let l=null;if(t!==null){const n=t.length;l=new Array(n);for(let q=0;q!==n;++q)l[q]=t[q].clone()}return this.clippingPlanes=l,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class q4 extends F3{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new z1(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=C5,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const X1=new S,G4=new r1;class L2{constructor(e,t,l){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=l===!0,this.usage=d8,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,l){e*=this.itemSize,l*=t.itemSize;for(let n=0,q=this.itemSize;n<q;n++)this.array[e+n]=t.array[l+n];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,l=this.count;t<l;t++)G4.fromBufferAttribute(this,t),G4.applyMatrix3(e),this.setXY(t,G4.x,G4.y);else if(this.itemSize===3)for(let t=0,l=this.count;t<l;t++)X1.fromBufferAttribute(this,t),X1.applyMatrix3(e),this.setXYZ(t,X1.x,X1.y,X1.z);return this}applyMatrix4(e){for(let t=0,l=this.count;t<l;t++)X1.fromBufferAttribute(this,t),X1.applyMatrix4(e),this.setXYZ(t,X1.x,X1.y,X1.z);return this}applyNormalMatrix(e){for(let t=0,l=this.count;t<l;t++)X1.fromBufferAttribute(this,t),X1.applyNormalMatrix(e),this.setXYZ(t,X1.x,X1.y,X1.z);return this}transformDirection(e){for(let t=0,l=this.count;t<l;t++)X1.fromBufferAttribute(this,t),X1.transformDirection(e),this.setXYZ(t,X1.x,X1.y,X1.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=d4(t,this.array)),t}setX(e,t){return this.normalized&&(t=r2(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=d4(t,this.array)),t}setY(e,t){return this.normalized&&(t=r2(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=d4(t,this.array)),t}setZ(e,t){return this.normalized&&(t=r2(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=d4(t,this.array)),t}setW(e,t){return this.normalized&&(t=r2(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,l){return e*=this.itemSize,this.normalized&&(t=r2(t,this.array),l=r2(l,this.array)),this.array[e+0]=t,this.array[e+1]=l,this}setXYZ(e,t,l,n){return e*=this.itemSize,this.normalized&&(t=r2(t,this.array),l=r2(l,this.array),n=r2(n,this.array)),this.array[e+0]=t,this.array[e+1]=l,this.array[e+2]=n,this}setXYZW(e,t,l,n,q){return e*=this.itemSize,this.normalized&&(t=r2(t,this.array),l=r2(l,this.array),n=r2(n,this.array),q=r2(q,this.array)),this.array[e+0]=t,this.array[e+1]=l,this.array[e+2]=n,this.array[e+3]=q,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==d8&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class D7 extends L2{constructor(e,t,l){super(new Uint16Array(e),t,l)}}class B7 extends L2{constructor(e,t,l){super(new Uint32Array(e),t,l)}}class t2 extends L2{constructor(e,t,l){super(new Float32Array(e),t,l)}}let B0=0;const g2=new G1,X6=new J1,G3=new S,f2=new F4,c4=new F4,K1=new S;class D2 extends y3{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:B0++}),this.uuid=M3(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(g7(e)?B7:D7)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,l=0){this.groups.push({start:e,count:t,materialIndex:l})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const l=this.attributes.normal;if(l!==void 0){const q=new E2().getNormalMatrix(e);l.applyNormalMatrix(q),l.needsUpdate=!0}const n=this.attributes.tangent;return n!==void 0&&(n.transformDirection(e),n.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return g2.makeRotationFromQuaternion(e),this.applyMatrix4(g2),this}rotateX(e){return g2.makeRotationX(e),this.applyMatrix4(g2),this}rotateY(e){return g2.makeRotationY(e),this.applyMatrix4(g2),this}rotateZ(e){return g2.makeRotationZ(e),this.applyMatrix4(g2),this}translate(e,t,l){return g2.makeTranslation(e,t,l),this.applyMatrix4(g2),this}scale(e,t,l){return g2.makeScale(e,t,l),this.applyMatrix4(g2),this}lookAt(e){return X6.lookAt(e),X6.updateMatrix(),this.applyMatrix4(X6.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(G3).negate(),this.translate(G3.x,G3.y,G3.z),this}setFromPoints(e){const t=[];for(let l=0,n=e.length;l<n;l++){const q=e[l];t.push(q.x,q.y,q.z||0)}return this.setAttribute("position",new t2(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new F4);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new S(-1/0,-1/0,-1/0),new S(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let l=0,n=t.length;l<n;l++){const q=t[l];f2.setFromBufferAttribute(q),this.morphTargetsRelative?(K1.addVectors(this.boundingBox.min,f2.min),this.boundingBox.expandByPoint(K1),K1.addVectors(this.boundingBox.max,f2.max),this.boundingBox.expandByPoint(K1)):(this.boundingBox.expandByPoint(f2.min),this.boundingBox.expandByPoint(f2.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new x6);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new S,1/0);return}if(e){const l=this.boundingSphere.center;if(f2.setFromBufferAttribute(e),t)for(let q=0,s=t.length;q<s;q++){const a=t[q];c4.setFromBufferAttribute(a),this.morphTargetsRelative?(K1.addVectors(f2.min,c4.min),f2.expandByPoint(K1),K1.addVectors(f2.max,c4.max),f2.expandByPoint(K1)):(f2.expandByPoint(c4.min),f2.expandByPoint(c4.max))}f2.getCenter(l);let n=0;for(let q=0,s=e.count;q<s;q++)K1.fromBufferAttribute(e,q),n=Math.max(n,l.distanceToSquared(K1));if(t)for(let q=0,s=t.length;q<s;q++){const a=t[q],r=this.morphTargetsRelative;for(let o=0,m=a.count;o<m;o++)K1.fromBufferAttribute(a,o),r&&(G3.fromBufferAttribute(e,o),K1.add(G3)),n=Math.max(n,l.distanceToSquared(K1))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const l=e.array,n=t.position.array,q=t.normal.array,s=t.uv.array,a=n.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new L2(new Float32Array(4*a),4));const r=this.getAttribute("tangent").array,o=[],m=[];for(let T=0;T<a;T++)o[T]=new S,m[T]=new S;const h=new S,c=new S,f=new S,x=new r1,d=new r1,u=new r1,p=new S,A=new S;function B(T,X,q1){h.fromArray(n,T*3),c.fromArray(n,X*3),f.fromArray(n,q1*3),x.fromArray(s,T*2),d.fromArray(s,X*2),u.fromArray(s,q1*2),c.sub(h),f.sub(h),d.sub(x),u.sub(x);const N=1/(d.x*u.y-u.x*d.y);!isFinite(N)||(p.copy(c).multiplyScalar(u.y).addScaledVector(f,-d.y).multiplyScalar(N),A.copy(f).multiplyScalar(d.x).addScaledVector(c,-u.x).multiplyScalar(N),o[T].add(p),o[X].add(p),o[q1].add(p),m[T].add(A),m[X].add(A),m[q1].add(A))}let v=this.groups;v.length===0&&(v=[{start:0,count:l.length}]);for(let T=0,X=v.length;T<X;++T){const q1=v[T],N=q1.start,w=q1.count;for(let W=N,j=N+w;W<j;W+=3)B(l[W+0],l[W+1],l[W+2])}const g=new S,F=new S,z=new S,_=new S;function M(T){z.fromArray(q,T*3),_.copy(z);const X=o[T];g.copy(X),g.sub(z.multiplyScalar(z.dot(X))).normalize(),F.crossVectors(_,X);const N=F.dot(m[T])<0?-1:1;r[T*4]=g.x,r[T*4+1]=g.y,r[T*4+2]=g.z,r[T*4+3]=N}for(let T=0,X=v.length;T<X;++T){const q1=v[T],N=q1.start,w=q1.count;for(let W=N,j=N+w;W<j;W+=3)M(l[W+0]),M(l[W+1]),M(l[W+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let l=this.getAttribute("normal");if(l===void 0)l=new L2(new Float32Array(t.count*3),3),this.setAttribute("normal",l);else for(let c=0,f=l.count;c<f;c++)l.setXYZ(c,0,0,0);const n=new S,q=new S,s=new S,a=new S,r=new S,o=new S,m=new S,h=new S;if(e)for(let c=0,f=e.count;c<f;c+=3){const x=e.getX(c+0),d=e.getX(c+1),u=e.getX(c+2);n.fromBufferAttribute(t,x),q.fromBufferAttribute(t,d),s.fromBufferAttribute(t,u),m.subVectors(s,q),h.subVectors(n,q),m.cross(h),a.fromBufferAttribute(l,x),r.fromBufferAttribute(l,d),o.fromBufferAttribute(l,u),a.add(m),r.add(m),o.add(m),l.setXYZ(x,a.x,a.y,a.z),l.setXYZ(d,r.x,r.y,r.z),l.setXYZ(u,o.x,o.y,o.z)}else for(let c=0,f=t.count;c<f;c+=3)n.fromBufferAttribute(t,c+0),q.fromBufferAttribute(t,c+1),s.fromBufferAttribute(t,c+2),m.subVectors(s,q),h.subVectors(n,q),m.cross(h),l.setXYZ(c+0,m.x,m.y,m.z),l.setXYZ(c+1,m.x,m.y,m.z),l.setXYZ(c+2,m.x,m.y,m.z);this.normalizeNormals(),l.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,l=e.count;t<l;t++)K1.fromBufferAttribute(e,t),K1.normalize(),e.setXYZ(t,K1.x,K1.y,K1.z)}toNonIndexed(){function e(a,r){const o=a.array,m=a.itemSize,h=a.normalized,c=new o.constructor(r.length*m);let f=0,x=0;for(let d=0,u=r.length;d<u;d++){a.isInterleavedBufferAttribute?f=r[d]*a.data.stride+a.offset:f=r[d]*m;for(let p=0;p<m;p++)c[x++]=o[f++]}return new L2(c,m,h)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new D2,l=this.index.array,n=this.attributes;for(const a in n){const r=n[a],o=e(r,l);t.setAttribute(a,o)}const q=this.morphAttributes;for(const a in q){const r=[],o=q[a];for(let m=0,h=o.length;m<h;m++){const c=o[m],f=e(c,l);r.push(f)}t.morphAttributes[a]=r}t.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let a=0,r=s.length;a<r;a++){const o=s[a];t.addGroup(o.start,o.count,o.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const r=this.parameters;for(const o in r)r[o]!==void 0&&(e[o]=r[o]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const l=this.attributes;for(const r in l){const o=l[r];e.data.attributes[r]=o.toJSON(e.data)}const n={};let q=!1;for(const r in this.morphAttributes){const o=this.morphAttributes[r],m=[];for(let h=0,c=o.length;h<c;h++){const f=o[h];m.push(f.toJSON(e.data))}m.length>0&&(n[r]=m,q=!0)}q&&(e.data.morphAttributes=n,e.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const l=e.index;l!==null&&this.setIndex(l.clone(t));const n=e.attributes;for(const o in n){const m=n[o];this.setAttribute(o,m.clone(t))}const q=e.morphAttributes;for(const o in q){const m=[],h=q[o];for(let c=0,f=h.length;c<f;c++)m.push(h[c].clone(t));this.morphAttributes[o]=m}this.morphTargetsRelative=e.morphTargetsRelative;const s=e.groups;for(let o=0,m=s.length;o<m;o++){const h=s[o];this.addGroup(h.start,h.count,h.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const r=e.boundingSphere;return r!==null&&(this.boundingSphere=r.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,e.parameters!==void 0&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const S8=new G1,V3=new y5,Y6=new x6,t3=new S,l3=new S,n3=new S,j6=new S,Z6=new S,J6=new S,V4=new S,H4=new S,W4=new S,X4=new r1,Y4=new r1,j4=new r1,$6=new S,Z4=new S;class i2 extends J1{constructor(e=new D2,t=new q4){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,l=Object.keys(t);if(l.length>0){const n=t[l[0]];if(n!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let q=0,s=n.length;q<s;q++){const a=n[q].name||String(q);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=q}}}}raycast(e,t){const l=this.geometry,n=this.material,q=this.matrixWorld;if(n===void 0||(l.boundingSphere===null&&l.computeBoundingSphere(),Y6.copy(l.boundingSphere),Y6.applyMatrix4(q),e.ray.intersectsSphere(Y6)===!1)||(S8.copy(q).invert(),V3.copy(e.ray).applyMatrix4(S8),l.boundingBox!==null&&V3.intersectsBox(l.boundingBox)===!1))return;let s;const a=l.index,r=l.attributes.position,o=l.morphAttributes.position,m=l.morphTargetsRelative,h=l.attributes.uv,c=l.attributes.uv2,f=l.groups,x=l.drawRange;if(a!==null)if(Array.isArray(n))for(let d=0,u=f.length;d<u;d++){const p=f[d],A=n[p.materialIndex],B=Math.max(p.start,x.start),v=Math.min(a.count,Math.min(p.start+p.count,x.start+x.count));for(let g=B,F=v;g<F;g+=3){const z=a.getX(g),_=a.getX(g+1),M=a.getX(g+2);s=J4(this,A,e,V3,r,o,m,h,c,z,_,M),s&&(s.faceIndex=Math.floor(g/3),s.face.materialIndex=p.materialIndex,t.push(s))}}else{const d=Math.max(0,x.start),u=Math.min(a.count,x.start+x.count);for(let p=d,A=u;p<A;p+=3){const B=a.getX(p),v=a.getX(p+1),g=a.getX(p+2);s=J4(this,n,e,V3,r,o,m,h,c,B,v,g),s&&(s.faceIndex=Math.floor(p/3),t.push(s))}}else if(r!==void 0)if(Array.isArray(n))for(let d=0,u=f.length;d<u;d++){const p=f[d],A=n[p.materialIndex],B=Math.max(p.start,x.start),v=Math.min(r.count,Math.min(p.start+p.count,x.start+x.count));for(let g=B,F=v;g<F;g+=3){const z=g,_=g+1,M=g+2;s=J4(this,A,e,V3,r,o,m,h,c,z,_,M),s&&(s.faceIndex=Math.floor(g/3),s.face.materialIndex=p.materialIndex,t.push(s))}}else{const d=Math.max(0,x.start),u=Math.min(r.count,x.start+x.count);for(let p=d,A=u;p<A;p+=3){const B=p,v=p+1,g=p+2;s=J4(this,n,e,V3,r,o,m,h,c,B,v,g),s&&(s.faceIndex=Math.floor(p/3),t.push(s))}}}}function y0(i,e,t,l,n,q,s,a){let r;if(e.side===v2?r=l.intersectTriangle(s,q,n,!0,a):r=l.intersectTriangle(n,q,s,e.side!==w2,a),r===null)return null;Z4.copy(a),Z4.applyMatrix4(i.matrixWorld);const o=t.ray.origin.distanceTo(Z4);return o<t.near||o>t.far?null:{distance:o,point:Z4.clone(),object:i}}function J4(i,e,t,l,n,q,s,a,r,o,m,h){t3.fromBufferAttribute(n,o),l3.fromBufferAttribute(n,m),n3.fromBufferAttribute(n,h);const c=i.morphTargetInfluences;if(q&&c){V4.set(0,0,0),H4.set(0,0,0),W4.set(0,0,0);for(let x=0,d=q.length;x<d;x++){const u=c[x],p=q[x];u!==0&&(j6.fromBufferAttribute(p,o),Z6.fromBufferAttribute(p,m),J6.fromBufferAttribute(p,h),s?(V4.addScaledVector(j6,u),H4.addScaledVector(Z6,u),W4.addScaledVector(J6,u)):(V4.addScaledVector(j6.sub(t3),u),H4.addScaledVector(Z6.sub(l3),u),W4.addScaledVector(J6.sub(n3),u)))}t3.add(V4),l3.add(H4),n3.add(W4)}i.isSkinnedMesh&&(i.boneTransform(o,t3),i.boneTransform(m,l3),i.boneTransform(h,n3));const f=y0(i,e,t,l,t3,l3,n3,$6);if(f){a&&(X4.fromBufferAttribute(a,o),Y4.fromBufferAttribute(a,m),j4.fromBufferAttribute(a,h),f.uv=X2.getUV($6,t3,l3,n3,X4,Y4,j4,new r1)),r&&(X4.fromBufferAttribute(r,o),Y4.fromBufferAttribute(r,m),j4.fromBufferAttribute(r,h),f.uv2=X2.getUV($6,t3,l3,n3,X4,Y4,j4,new r1));const x={a:o,b:m,c:h,normal:new S,materialIndex:0};X2.getNormal(t3,l3,n3,x.normal),f.face=x}return f}class b4 extends D2{constructor(e=1,t=1,l=1,n=1,q=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:l,widthSegments:n,heightSegments:q,depthSegments:s};const a=this;n=Math.floor(n),q=Math.floor(q),s=Math.floor(s);const r=[],o=[],m=[],h=[];let c=0,f=0;x("z","y","x",-1,-1,l,t,e,s,q,0),x("z","y","x",1,-1,l,t,-e,s,q,1),x("x","z","y",1,1,e,l,t,n,s,2),x("x","z","y",1,-1,e,l,-t,n,s,3),x("x","y","z",1,-1,e,t,l,n,q,4),x("x","y","z",-1,-1,e,t,-l,n,q,5),this.setIndex(r),this.setAttribute("position",new t2(o,3)),this.setAttribute("normal",new t2(m,3)),this.setAttribute("uv",new t2(h,2));function x(d,u,p,A,B,v,g,F,z,_,M){const T=v/z,X=g/_,q1=v/2,N=g/2,w=F/2,W=z+1,j=_+1;let Z=0,G=0;const P=new S;for(let I=0;I<j;I++){const $=I*X-N;for(let J=0;J<W;J++){const K=J*T-q1;P[d]=K*A,P[u]=$*B,P[p]=w,o.push(P.x,P.y,P.z),P[d]=0,P[u]=0,P[p]=F>0?1:-1,m.push(P.x,P.y,P.z),h.push(J/z),h.push(1-I/_),Z+=1}}for(let I=0;I<_;I++)for(let $=0;$<z;$++){const J=c+$+W*I,K=c+$+W*(I+1),c1=c+($+1)+W*(I+1),_1=c+($+1)+W*I;r.push(J,K,_1),r.push(K,c1,_1),G+=6}a.addGroup(f,G,M),f+=G,c+=Z}}static fromJSON(e){return new b4(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function i4(i){const e={};for(const t in i){e[t]={};for(const l in i[t]){const n=i[t][l];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture||n.isQuaternion)?e[t][l]=n.clone():Array.isArray(n)?e[t][l]=n.slice():e[t][l]=n}}return e}function n2(i){const e={};for(let t=0;t<i.length;t++){const l=i4(i[t]);for(const n in l)e[n]=l[n]}return e}function M0(i){const e=[];for(let t=0;t<i.length;t++)e.push(i[t].clone());return e}const F0={clone:i4,merge:n2};var S0=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,b0=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class B3 extends F3{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=S0,this.fragmentShader=b0,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=i4(e.uniforms),this.uniformsGroups=M0(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const n in this.uniforms){const s=this.uniforms[n].value;s&&s.isTexture?t.uniforms[n]={type:"t",value:s.toJSON(e).uuid}:s&&s.isColor?t.uniforms[n]={type:"c",value:s.getHex()}:s&&s.isVector2?t.uniforms[n]={type:"v2",value:s.toArray()}:s&&s.isVector3?t.uniforms[n]={type:"v3",value:s.toArray()}:s&&s.isVector4?t.uniforms[n]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?t.uniforms[n]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?t.uniforms[n]={type:"m4",value:s.toArray()}:t.uniforms[n]={value:s}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const l={};for(const n in this.extensions)this.extensions[n]===!0&&(l[n]=!0);return Object.keys(l).length>0&&(t.extensions=l),t}}class y7 extends J1{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new G1,this.projectionMatrix=new G1,this.projectionMatrixInverse=new G1}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class d2 extends y7{constructor(e=50,t=1,l=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=l,this.far=n,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=m6*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(p4*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return m6*2*Math.atan(Math.tan(p4*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,l,n,q,s){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=l,this.view.offsetY=n,this.view.width=q,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(p4*.5*this.fov)/this.zoom,l=2*t,n=this.aspect*l,q=-.5*n;const s=this.view;if(this.view!==null&&this.view.enabled){const r=s.fullWidth,o=s.fullHeight;q+=s.offsetX*n/r,t-=s.offsetY*l/o,n*=s.width/r,l*=s.height/o}const a=this.filmOffset;a!==0&&(q+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(q,q+n,t,t-l,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const H3=90,W3=1;class z0 extends J1{constructor(e,t,l){super(),this.type="CubeCamera",this.renderTarget=l;const n=new d2(H3,W3,e,t);n.layers=this.layers,n.up.set(0,-1,0),n.lookAt(new S(1,0,0)),this.add(n);const q=new d2(H3,W3,e,t);q.layers=this.layers,q.up.set(0,-1,0),q.lookAt(new S(-1,0,0)),this.add(q);const s=new d2(H3,W3,e,t);s.layers=this.layers,s.up.set(0,0,1),s.lookAt(new S(0,1,0)),this.add(s);const a=new d2(H3,W3,e,t);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new S(0,-1,0)),this.add(a);const r=new d2(H3,W3,e,t);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new S(0,0,1)),this.add(r);const o=new d2(H3,W3,e,t);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new S(0,0,-1)),this.add(o)}update(e,t){this.parent===null&&this.updateMatrixWorld();const l=this.renderTarget,[n,q,s,a,r,o]=this.children,m=e.getRenderTarget(),h=e.toneMapping,c=e.xr.enabled;e.toneMapping=Y2,e.xr.enabled=!1;const f=l.texture.generateMipmaps;l.texture.generateMipmaps=!1,e.setRenderTarget(l,0),e.render(t,n),e.setRenderTarget(l,1),e.render(t,q),e.setRenderTarget(l,2),e.render(t,s),e.setRenderTarget(l,3),e.render(t,a),e.setRenderTarget(l,4),e.render(t,r),l.texture.generateMipmaps=f,e.setRenderTarget(l,5),e.render(t,o),e.setRenderTarget(m),e.toneMapping=h,e.xr.enabled=c,l.texture.needsPMREMUpdate=!0}}class M7 extends C2{constructor(e,t,l,n,q,s,a,r,o,m){e=e!==void 0?e:[],t=t!==void 0?t:t4,super(e,t,l,n,q,s,a,r,o,m),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class w0 extends C3{constructor(e,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const l={width:e,height:e,depth:1},n=[l,l,l,l,l,l];this.texture=new M7(n,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:A2}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const l={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},n=new b4(5,5,5),q=new B3({name:"CubemapFromEquirect",uniforms:i4(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,side:v2,blending:q3});q.uniforms.tEquirect.value=t;const s=new i2(n,q),a=t.minFilter;return t.minFilter===d6&&(t.minFilter=A2),new z0(1,10,this).update(e,s),t.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(e,t,l,n){const q=e.getRenderTarget();for(let s=0;s<6;s++)e.setRenderTarget(this,s),e.clear(t,l,n);e.setRenderTarget(q)}}const K6=new S,T0=new S,L0=new E2;class u3{constructor(e=new S(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,l,n){return this.normal.set(e,t,l),this.constant=n,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,l){const n=K6.subVectors(l,t).cross(T0.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(n,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const l=e.delta(K6),n=this.normal.dot(l);if(n===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const q=-(e.start.dot(this.normal)+this.constant)/n;return q<0||q>1?null:t.copy(l).multiplyScalar(q).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),l=this.distanceToPoint(e.end);return t<0&&l>0||l<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const l=t||L0.getNormalMatrix(e),n=this.coplanarPoint(K6).applyMatrix4(e),q=this.normal.applyMatrix3(l).normalize();return this.constant=-n.dot(q),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const X3=new x6,$4=new S;class F5{constructor(e=new u3,t=new u3,l=new u3,n=new u3,q=new u3,s=new u3){this.planes=[e,t,l,n,q,s]}set(e,t,l,n,q,s){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(l),a[3].copy(n),a[4].copy(q),a[5].copy(s),this}copy(e){const t=this.planes;for(let l=0;l<6;l++)t[l].copy(e.planes[l]);return this}setFromProjectionMatrix(e){const t=this.planes,l=e.elements,n=l[0],q=l[1],s=l[2],a=l[3],r=l[4],o=l[5],m=l[6],h=l[7],c=l[8],f=l[9],x=l[10],d=l[11],u=l[12],p=l[13],A=l[14],B=l[15];return t[0].setComponents(a-n,h-r,d-c,B-u).normalize(),t[1].setComponents(a+n,h+r,d+c,B+u).normalize(),t[2].setComponents(a+q,h+o,d+f,B+p).normalize(),t[3].setComponents(a-q,h-o,d-f,B-p).normalize(),t[4].setComponents(a-s,h-m,d-x,B-A).normalize(),t[5].setComponents(a+s,h+m,d+x,B+A).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),X3.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(X3)}intersectsSprite(e){return X3.center.set(0,0,0),X3.radius=.7071067811865476,X3.applyMatrix4(e.matrixWorld),this.intersectsSphere(X3)}intersectsSphere(e){const t=this.planes,l=e.center,n=-e.radius;for(let q=0;q<6;q++)if(t[q].distanceToPoint(l)<n)return!1;return!0}intersectsBox(e){const t=this.planes;for(let l=0;l<6;l++){const n=t[l];if($4.x=n.normal.x>0?e.max.x:e.min.x,$4.y=n.normal.y>0?e.max.y:e.min.y,$4.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint($4)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let l=0;l<6;l++)if(t[l].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function F7(){let i=null,e=!1,t=null,l=null;function n(q,s){t(q,s),l=i.requestAnimationFrame(n)}return{start:function(){e!==!0&&t!==null&&(l=i.requestAnimationFrame(n),e=!0)},stop:function(){i.cancelAnimationFrame(l),e=!1},setAnimationLoop:function(q){t=q},setContext:function(q){i=q}}}function P0(i,e){const t=e.isWebGL2,l=new WeakMap;function n(o,m){const h=o.array,c=o.usage,f=i.createBuffer();i.bindBuffer(m,f),i.bufferData(m,h,c),o.onUploadCallback();let x;if(h instanceof Float32Array)x=5126;else if(h instanceof Uint16Array)if(o.isFloat16BufferAttribute)if(t)x=5131;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else x=5123;else if(h instanceof Int16Array)x=5122;else if(h instanceof Uint32Array)x=5125;else if(h instanceof Int32Array)x=5124;else if(h instanceof Int8Array)x=5120;else if(h instanceof Uint8Array)x=5121;else if(h instanceof Uint8ClampedArray)x=5121;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+h);return{buffer:f,type:x,bytesPerElement:h.BYTES_PER_ELEMENT,version:o.version}}function q(o,m,h){const c=m.array,f=m.updateRange;i.bindBuffer(h,o),f.count===-1?i.bufferSubData(h,0,c):(t?i.bufferSubData(h,f.offset*c.BYTES_PER_ELEMENT,c,f.offset,f.count):i.bufferSubData(h,f.offset*c.BYTES_PER_ELEMENT,c.subarray(f.offset,f.offset+f.count)),f.count=-1)}function s(o){return o.isInterleavedBufferAttribute&&(o=o.data),l.get(o)}function a(o){o.isInterleavedBufferAttribute&&(o=o.data);const m=l.get(o);m&&(i.deleteBuffer(m.buffer),l.delete(o))}function r(o,m){if(o.isGLBufferAttribute){const c=l.get(o);(!c||c.version<o.version)&&l.set(o,{buffer:o.buffer,type:o.type,bytesPerElement:o.elementSize,version:o.version});return}o.isInterleavedBufferAttribute&&(o=o.data);const h=l.get(o);h===void 0?l.set(o,n(o,m)):h.version<o.version&&(q(h.buffer,o,m),h.version=o.version)}return{get:s,remove:a,update:r}}class S5 extends D2{constructor(e=1,t=1,l=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:l,heightSegments:n};const q=e/2,s=t/2,a=Math.floor(l),r=Math.floor(n),o=a+1,m=r+1,h=e/a,c=t/r,f=[],x=[],d=[],u=[];for(let p=0;p<m;p++){const A=p*c-s;for(let B=0;B<o;B++){const v=B*h-q;x.push(v,-A,0),d.push(0,0,1),u.push(B/a),u.push(1-p/r)}}for(let p=0;p<r;p++)for(let A=0;A<a;A++){const B=A+o*p,v=A+o*(p+1),g=A+1+o*(p+1),F=A+1+o*p;f.push(B,v,F),f.push(v,g,F)}this.setIndex(f),this.setAttribute("position",new t2(x,3)),this.setAttribute("normal",new t2(d,3)),this.setAttribute("uv",new t2(u,2))}static fromJSON(e){return new S5(e.width,e.height,e.widthSegments,e.heightSegments)}}var R0=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,I0=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,N0=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,O0=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,U0=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,k0=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,G0="vec3 transformed = vec3( position );",V0=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,H0=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
#ifdef USE_IRIDESCENCE
	vec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,W0=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,X0=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Y0=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,j0=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Z0=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,J0=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,$0=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,K0=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Q0=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,ee=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,te=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,le=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,ne=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,qe=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,ie=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,ae=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,se=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,re="gl_FragColor = linearToOutputTexel( gl_FragColor );",oe=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,me=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,he=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,ce=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,ue=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,fe=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,de=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,xe=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,pe=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,_e=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,ge=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Ae=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,Ee=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,ve=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Ce=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert
#define Material_LightProbeLOD( material )	(0)`,De=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Be=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,ye=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Me=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,Fe=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Se=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,be=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,ze=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	#ifdef USE_IRIDESCENCE
		reflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,we=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Te=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Le=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,Pe=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Re=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Ie=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,Ne=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Oe=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Ue=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,ke=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Ge=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Ve=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,He=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,We=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,Xe=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,Ye=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,je=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,Ze=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,Je=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,$e=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Ke=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Qe=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,et=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,tt=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,lt=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,nt=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,qt=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,it=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,at=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,st=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,rt=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,ot=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,mt=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,ht=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,ct=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,ut=`#if NUM_SPOT_LIGHT_COORDS > 0
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,ft=`#if NUM_SPOT_LIGHT_COORDS > 0
  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,dt=`#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,xt=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,pt=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,_t=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,gt=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,At=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Et=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,vt=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Ct=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Dt=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Bt=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,yt=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,Mt=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,Ft=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,St=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,bt=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,zt=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,wt=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,Tt=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Lt=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Pt=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	gl_FragColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		gl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );
	#endif
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Rt=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,It=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Nt=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Ot=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,Ut=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,kt=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Gt=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Vt=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Ht=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Wt=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Xt=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,Yt=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,jt=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Zt=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Jt=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,$t=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Kt=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Qt=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,el=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,tl=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ll=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,nl=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ql=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,il=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,al=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,sl=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,rl=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,ol=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,ml=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,hl=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,D1={alphamap_fragment:R0,alphamap_pars_fragment:I0,alphatest_fragment:N0,alphatest_pars_fragment:O0,aomap_fragment:U0,aomap_pars_fragment:k0,begin_vertex:G0,beginnormal_vertex:V0,bsdfs:H0,iridescence_fragment:W0,bumpmap_pars_fragment:X0,clipping_planes_fragment:Y0,clipping_planes_pars_fragment:j0,clipping_planes_pars_vertex:Z0,clipping_planes_vertex:J0,color_fragment:$0,color_pars_fragment:K0,color_pars_vertex:Q0,color_vertex:ee,common:te,cube_uv_reflection_fragment:le,defaultnormal_vertex:ne,displacementmap_pars_vertex:qe,displacementmap_vertex:ie,emissivemap_fragment:ae,emissivemap_pars_fragment:se,encodings_fragment:re,encodings_pars_fragment:oe,envmap_fragment:me,envmap_common_pars_fragment:he,envmap_pars_fragment:ce,envmap_pars_vertex:ue,envmap_physical_pars_fragment:Be,envmap_vertex:fe,fog_vertex:de,fog_pars_vertex:xe,fog_fragment:pe,fog_pars_fragment:_e,gradientmap_pars_fragment:ge,lightmap_fragment:Ae,lightmap_pars_fragment:Ee,lights_lambert_fragment:ve,lights_lambert_pars_fragment:Ce,lights_pars_begin:De,lights_toon_fragment:ye,lights_toon_pars_fragment:Me,lights_phong_fragment:Fe,lights_phong_pars_fragment:Se,lights_physical_fragment:be,lights_physical_pars_fragment:ze,lights_fragment_begin:we,lights_fragment_maps:Te,lights_fragment_end:Le,logdepthbuf_fragment:Pe,logdepthbuf_pars_fragment:Re,logdepthbuf_pars_vertex:Ie,logdepthbuf_vertex:Ne,map_fragment:Oe,map_pars_fragment:Ue,map_particle_fragment:ke,map_particle_pars_fragment:Ge,metalnessmap_fragment:Ve,metalnessmap_pars_fragment:He,morphcolor_vertex:We,morphnormal_vertex:Xe,morphtarget_pars_vertex:Ye,morphtarget_vertex:je,normal_fragment_begin:Ze,normal_fragment_maps:Je,normal_pars_fragment:$e,normal_pars_vertex:Ke,normal_vertex:Qe,normalmap_pars_fragment:et,clearcoat_normal_fragment_begin:tt,clearcoat_normal_fragment_maps:lt,clearcoat_pars_fragment:nt,iridescence_pars_fragment:qt,output_fragment:it,packing:at,premultiplied_alpha_fragment:st,project_vertex:rt,dithering_fragment:ot,dithering_pars_fragment:mt,roughnessmap_fragment:ht,roughnessmap_pars_fragment:ct,shadowmap_pars_fragment:ut,shadowmap_pars_vertex:ft,shadowmap_vertex:dt,shadowmask_pars_fragment:xt,skinbase_vertex:pt,skinning_pars_vertex:_t,skinning_vertex:gt,skinnormal_vertex:At,specularmap_fragment:Et,specularmap_pars_fragment:vt,tonemapping_fragment:Ct,tonemapping_pars_fragment:Dt,transmission_fragment:Bt,transmission_pars_fragment:yt,uv_pars_fragment:Mt,uv_pars_vertex:Ft,uv_vertex:St,uv2_pars_fragment:bt,uv2_pars_vertex:zt,uv2_vertex:wt,worldpos_vertex:Tt,background_vert:Lt,background_frag:Pt,cube_vert:Rt,cube_frag:It,depth_vert:Nt,depth_frag:Ot,distanceRGBA_vert:Ut,distanceRGBA_frag:kt,equirect_vert:Gt,equirect_frag:Vt,linedashed_vert:Ht,linedashed_frag:Wt,meshbasic_vert:Xt,meshbasic_frag:Yt,meshlambert_vert:jt,meshlambert_frag:Zt,meshmatcap_vert:Jt,meshmatcap_frag:$t,meshnormal_vert:Kt,meshnormal_frag:Qt,meshphong_vert:el,meshphong_frag:tl,meshphysical_vert:ll,meshphysical_frag:nl,meshtoon_vert:ql,meshtoon_frag:il,points_vert:al,points_frag:sl,shadow_vert:rl,shadow_frag:ol,sprite_vert:ml,sprite_frag:hl},l1={common:{diffuse:{value:new z1(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new E2},uv2Transform:{value:new E2},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new r1(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new z1(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new z1(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new E2}},sprite:{diffuse:{value:new z1(16777215)},opacity:{value:1},center:{value:new r1(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new E2}}},z2={basic:{uniforms:n2([l1.common,l1.specularmap,l1.envmap,l1.aomap,l1.lightmap,l1.fog]),vertexShader:D1.meshbasic_vert,fragmentShader:D1.meshbasic_frag},lambert:{uniforms:n2([l1.common,l1.specularmap,l1.envmap,l1.aomap,l1.lightmap,l1.emissivemap,l1.bumpmap,l1.normalmap,l1.displacementmap,l1.fog,l1.lights,{emissive:{value:new z1(0)}}]),vertexShader:D1.meshlambert_vert,fragmentShader:D1.meshlambert_frag},phong:{uniforms:n2([l1.common,l1.specularmap,l1.envmap,l1.aomap,l1.lightmap,l1.emissivemap,l1.bumpmap,l1.normalmap,l1.displacementmap,l1.fog,l1.lights,{emissive:{value:new z1(0)},specular:{value:new z1(1118481)},shininess:{value:30}}]),vertexShader:D1.meshphong_vert,fragmentShader:D1.meshphong_frag},standard:{uniforms:n2([l1.common,l1.envmap,l1.aomap,l1.lightmap,l1.emissivemap,l1.bumpmap,l1.normalmap,l1.displacementmap,l1.roughnessmap,l1.metalnessmap,l1.fog,l1.lights,{emissive:{value:new z1(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:D1.meshphysical_vert,fragmentShader:D1.meshphysical_frag},toon:{uniforms:n2([l1.common,l1.aomap,l1.lightmap,l1.emissivemap,l1.bumpmap,l1.normalmap,l1.displacementmap,l1.gradientmap,l1.fog,l1.lights,{emissive:{value:new z1(0)}}]),vertexShader:D1.meshtoon_vert,fragmentShader:D1.meshtoon_frag},matcap:{uniforms:n2([l1.common,l1.bumpmap,l1.normalmap,l1.displacementmap,l1.fog,{matcap:{value:null}}]),vertexShader:D1.meshmatcap_vert,fragmentShader:D1.meshmatcap_frag},points:{uniforms:n2([l1.points,l1.fog]),vertexShader:D1.points_vert,fragmentShader:D1.points_frag},dashed:{uniforms:n2([l1.common,l1.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:D1.linedashed_vert,fragmentShader:D1.linedashed_frag},depth:{uniforms:n2([l1.common,l1.displacementmap]),vertexShader:D1.depth_vert,fragmentShader:D1.depth_frag},normal:{uniforms:n2([l1.common,l1.bumpmap,l1.normalmap,l1.displacementmap,{opacity:{value:1}}]),vertexShader:D1.meshnormal_vert,fragmentShader:D1.meshnormal_frag},sprite:{uniforms:n2([l1.sprite,l1.fog]),vertexShader:D1.sprite_vert,fragmentShader:D1.sprite_frag},background:{uniforms:{uvTransform:{value:new E2},t2D:{value:null}},vertexShader:D1.background_vert,fragmentShader:D1.background_frag},cube:{uniforms:n2([l1.envmap,{opacity:{value:1}}]),vertexShader:D1.cube_vert,fragmentShader:D1.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:D1.equirect_vert,fragmentShader:D1.equirect_frag},distanceRGBA:{uniforms:n2([l1.common,l1.displacementmap,{referencePosition:{value:new S},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:D1.distanceRGBA_vert,fragmentShader:D1.distanceRGBA_frag},shadow:{uniforms:n2([l1.lights,l1.fog,{color:{value:new z1(0)},opacity:{value:1}}]),vertexShader:D1.shadow_vert,fragmentShader:D1.shadow_frag}};z2.physical={uniforms:n2([z2.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new r1(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new z1(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new r1},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new z1(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new z1(1,1,1)},specularColorMap:{value:null}}]),vertexShader:D1.meshphysical_vert,fragmentShader:D1.meshphysical_frag};function cl(i,e,t,l,n,q){const s=new z1(0);let a=n===!0?0:1,r,o,m=null,h=0,c=null;function f(d,u){let p=!1,A=u.isScene===!0?u.background:null;A&&A.isTexture&&(A=e.get(A));const B=i.xr,v=B.getSession&&B.getSession();v&&v.environmentBlendMode==="additive"&&(A=null),A===null?x(s,a):A&&A.isColor&&(x(A,1),p=!0),(i.autoClear||p)&&i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil),A&&(A.isCubeTexture||A.mapping===f6)?(o===void 0&&(o=new i2(new b4(1,1,1),new B3({name:"BackgroundCubeMaterial",uniforms:i4(z2.cube.uniforms),vertexShader:z2.cube.vertexShader,fragmentShader:z2.cube.fragmentShader,side:v2,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),o.geometry.deleteAttribute("uv"),o.onBeforeRender=function(g,F,z){this.matrixWorld.copyPosition(z.matrixWorld)},Object.defineProperty(o.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),l.update(o)),o.material.uniforms.envMap.value=A,o.material.uniforms.flipEnvMap.value=A.isCubeTexture&&A.isRenderTargetTexture===!1?-1:1,(m!==A||h!==A.version||c!==i.toneMapping)&&(o.material.needsUpdate=!0,m=A,h=A.version,c=i.toneMapping),o.layers.enableAll(),d.unshift(o,o.geometry,o.material,0,0,null)):A&&A.isTexture&&(r===void 0&&(r=new i2(new S5(2,2),new B3({name:"BackgroundMaterial",uniforms:i4(z2.background.uniforms),vertexShader:z2.background.vertexShader,fragmentShader:z2.background.fragmentShader,side:i3,depthTest:!1,depthWrite:!1,fog:!1})),r.geometry.deleteAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),l.update(r)),r.material.uniforms.t2D.value=A,A.matrixAutoUpdate===!0&&A.updateMatrix(),r.material.uniforms.uvTransform.value.copy(A.matrix),(m!==A||h!==A.version||c!==i.toneMapping)&&(r.material.needsUpdate=!0,m=A,h=A.version,c=i.toneMapping),r.layers.enableAll(),d.unshift(r,r.geometry,r.material,0,0,null))}function x(d,u){t.buffers.color.setClear(d.r,d.g,d.b,u,q)}return{getClearColor:function(){return s},setClearColor:function(d,u=1){s.set(d),a=u,x(s,a)},getClearAlpha:function(){return a},setClearAlpha:function(d){a=d,x(s,a)},render:f}}function ul(i,e,t,l){const n=i.getParameter(34921),q=l.isWebGL2?null:e.get("OES_vertex_array_object"),s=l.isWebGL2||q!==null,a={},r=u(null);let o=r,m=!1;function h(w,W,j,Z,G){let P=!1;if(s){const I=d(Z,j,W);o!==I&&(o=I,f(o.object)),P=p(w,Z,j,G),P&&A(w,Z,j,G)}else{const I=W.wireframe===!0;(o.geometry!==Z.id||o.program!==j.id||o.wireframe!==I)&&(o.geometry=Z.id,o.program=j.id,o.wireframe=I,P=!0)}G!==null&&t.update(G,34963),(P||m)&&(m=!1,_(w,W,j,Z),G!==null&&i.bindBuffer(34963,t.get(G).buffer))}function c(){return l.isWebGL2?i.createVertexArray():q.createVertexArrayOES()}function f(w){return l.isWebGL2?i.bindVertexArray(w):q.bindVertexArrayOES(w)}function x(w){return l.isWebGL2?i.deleteVertexArray(w):q.deleteVertexArrayOES(w)}function d(w,W,j){const Z=j.wireframe===!0;let G=a[w.id];G===void 0&&(G={},a[w.id]=G);let P=G[W.id];P===void 0&&(P={},G[W.id]=P);let I=P[Z];return I===void 0&&(I=u(c()),P[Z]=I),I}function u(w){const W=[],j=[],Z=[];for(let G=0;G<n;G++)W[G]=0,j[G]=0,Z[G]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:W,enabledAttributes:j,attributeDivisors:Z,object:w,attributes:{},index:null}}function p(w,W,j,Z){const G=o.attributes,P=W.attributes;let I=0;const $=j.getAttributes();for(const J in $)if($[J].location>=0){const c1=G[J];let _1=P[J];if(_1===void 0&&(J==="instanceMatrix"&&w.instanceMatrix&&(_1=w.instanceMatrix),J==="instanceColor"&&w.instanceColor&&(_1=w.instanceColor)),c1===void 0||c1.attribute!==_1||_1&&c1.data!==_1.data)return!0;I++}return o.attributesNum!==I||o.index!==Z}function A(w,W,j,Z){const G={},P=W.attributes;let I=0;const $=j.getAttributes();for(const J in $)if($[J].location>=0){let c1=P[J];c1===void 0&&(J==="instanceMatrix"&&w.instanceMatrix&&(c1=w.instanceMatrix),J==="instanceColor"&&w.instanceColor&&(c1=w.instanceColor));const _1={};_1.attribute=c1,c1&&c1.data&&(_1.data=c1.data),G[J]=_1,I++}o.attributes=G,o.attributesNum=I,o.index=Z}function B(){const w=o.newAttributes;for(let W=0,j=w.length;W<j;W++)w[W]=0}function v(w){g(w,0)}function g(w,W){const j=o.newAttributes,Z=o.enabledAttributes,G=o.attributeDivisors;j[w]=1,Z[w]===0&&(i.enableVertexAttribArray(w),Z[w]=1),G[w]!==W&&((l.isWebGL2?i:e.get("ANGLE_instanced_arrays"))[l.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](w,W),G[w]=W)}function F(){const w=o.newAttributes,W=o.enabledAttributes;for(let j=0,Z=W.length;j<Z;j++)W[j]!==w[j]&&(i.disableVertexAttribArray(j),W[j]=0)}function z(w,W,j,Z,G,P){l.isWebGL2===!0&&(j===5124||j===5125)?i.vertexAttribIPointer(w,W,j,G,P):i.vertexAttribPointer(w,W,j,Z,G,P)}function _(w,W,j,Z){if(l.isWebGL2===!1&&(w.isInstancedMesh||Z.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;B();const G=Z.attributes,P=j.getAttributes(),I=W.defaultAttributeValues;for(const $ in P){const J=P[$];if(J.location>=0){let K=G[$];if(K===void 0&&($==="instanceMatrix"&&w.instanceMatrix&&(K=w.instanceMatrix),$==="instanceColor"&&w.instanceColor&&(K=w.instanceColor)),K!==void 0){const c1=K.normalized,_1=K.itemSize,H=t.get(K);if(H===void 0)continue;const S1=H.buffer,d1=H.type,g1=H.bytesPerElement;if(K.isInterleavedBufferAttribute){const h1=K.data,w1=h1.stride,v1=K.offset;if(h1.isInstancedInterleavedBuffer){for(let f1=0;f1<J.locationSize;f1++)g(J.location+f1,h1.meshPerAttribute);w.isInstancedMesh!==!0&&Z._maxInstanceCount===void 0&&(Z._maxInstanceCount=h1.meshPerAttribute*h1.count)}else for(let f1=0;f1<J.locationSize;f1++)v(J.location+f1);i.bindBuffer(34962,S1);for(let f1=0;f1<J.locationSize;f1++)z(J.location+f1,_1/J.locationSize,d1,c1,w1*g1,(v1+_1/J.locationSize*f1)*g1)}else{if(K.isInstancedBufferAttribute){for(let h1=0;h1<J.locationSize;h1++)g(J.location+h1,K.meshPerAttribute);w.isInstancedMesh!==!0&&Z._maxInstanceCount===void 0&&(Z._maxInstanceCount=K.meshPerAttribute*K.count)}else for(let h1=0;h1<J.locationSize;h1++)v(J.location+h1);i.bindBuffer(34962,S1);for(let h1=0;h1<J.locationSize;h1++)z(J.location+h1,_1/J.locationSize,d1,c1,_1*g1,_1/J.locationSize*h1*g1)}}else if(I!==void 0){const c1=I[$];if(c1!==void 0)switch(c1.length){case 2:i.vertexAttrib2fv(J.location,c1);break;case 3:i.vertexAttrib3fv(J.location,c1);break;case 4:i.vertexAttrib4fv(J.location,c1);break;default:i.vertexAttrib1fv(J.location,c1)}}}}F()}function M(){q1();for(const w in a){const W=a[w];for(const j in W){const Z=W[j];for(const G in Z)x(Z[G].object),delete Z[G];delete W[j]}delete a[w]}}function T(w){if(a[w.id]===void 0)return;const W=a[w.id];for(const j in W){const Z=W[j];for(const G in Z)x(Z[G].object),delete Z[G];delete W[j]}delete a[w.id]}function X(w){for(const W in a){const j=a[W];if(j[w.id]===void 0)continue;const Z=j[w.id];for(const G in Z)x(Z[G].object),delete Z[G];delete j[w.id]}}function q1(){N(),m=!0,o!==r&&(o=r,f(o.object))}function N(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:h,reset:q1,resetDefaultState:N,dispose:M,releaseStatesOfGeometry:T,releaseStatesOfProgram:X,initAttributes:B,enableAttribute:v,disableUnusedAttributes:F}}function fl(i,e,t,l){const n=l.isWebGL2;let q;function s(o){q=o}function a(o,m){i.drawArrays(q,o,m),t.update(m,q,1)}function r(o,m,h){if(h===0)return;let c,f;if(n)c=i,f="drawArraysInstanced";else if(c=e.get("ANGLE_instanced_arrays"),f="drawArraysInstancedANGLE",c===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}c[f](q,o,m,h),t.update(m,q,h)}this.setMode=s,this.render=a,this.renderInstances=r}function dl(i,e,t){let l;function n(){if(l!==void 0)return l;if(e.has("EXT_texture_filter_anisotropic")===!0){const z=e.get("EXT_texture_filter_anisotropic");l=i.getParameter(z.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else l=0;return l}function q(z){if(z==="highp"){if(i.getShaderPrecisionFormat(35633,36338).precision>0&&i.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";z="mediump"}return z==="mediump"&&i.getShaderPrecisionFormat(35633,36337).precision>0&&i.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s=typeof WebGL2RenderingContext<"u"&&i instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext<"u"&&i instanceof WebGL2ComputeRenderingContext;let a=t.precision!==void 0?t.precision:"highp";const r=q(a);r!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",r,"instead."),a=r);const o=s||e.has("WEBGL_draw_buffers"),m=t.logarithmicDepthBuffer===!0,h=i.getParameter(34930),c=i.getParameter(35660),f=i.getParameter(3379),x=i.getParameter(34076),d=i.getParameter(34921),u=i.getParameter(36347),p=i.getParameter(36348),A=i.getParameter(36349),B=c>0,v=s||e.has("OES_texture_float"),g=B&&v,F=s?i.getParameter(36183):0;return{isWebGL2:s,drawBuffers:o,getMaxAnisotropy:n,getMaxPrecision:q,precision:a,logarithmicDepthBuffer:m,maxTextures:h,maxVertexTextures:c,maxTextureSize:f,maxCubemapSize:x,maxAttributes:d,maxVertexUniforms:u,maxVaryings:p,maxFragmentUniforms:A,vertexTextures:B,floatFragmentTextures:v,floatVertexTextures:g,maxSamples:F}}function xl(i){const e=this;let t=null,l=0,n=!1,q=!1;const s=new u3,a=new E2,r={value:null,needsUpdate:!1};this.uniform=r,this.numPlanes=0,this.numIntersection=0,this.init=function(h,c,f){const x=h.length!==0||c||l!==0||n;return n=c,t=m(h,f,0),l=h.length,x},this.beginShadows=function(){q=!0,m(null)},this.endShadows=function(){q=!1,o()},this.setState=function(h,c,f){const x=h.clippingPlanes,d=h.clipIntersection,u=h.clipShadows,p=i.get(h);if(!n||x===null||x.length===0||q&&!u)q?m(null):o();else{const A=q?0:l,B=A*4;let v=p.clippingState||null;r.value=v,v=m(x,c,B,f);for(let g=0;g!==B;++g)v[g]=t[g];p.clippingState=v,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=A}};function o(){r.value!==t&&(r.value=t,r.needsUpdate=l>0),e.numPlanes=l,e.numIntersection=0}function m(h,c,f,x){const d=h!==null?h.length:0;let u=null;if(d!==0){if(u=r.value,x!==!0||u===null){const p=f+d*4,A=c.matrixWorldInverse;a.getNormalMatrix(A),(u===null||u.length<p)&&(u=new Float32Array(p));for(let B=0,v=f;B!==d;++B,v+=4)s.copy(h[B]).applyMatrix4(A,a),s.normal.toArray(u,v),u[v+3]=s.constant}r.value=u,r.needsUpdate=!0}return e.numPlanes=d,e.numIntersection=0,u}}function pl(i){let e=new WeakMap;function t(s,a){return a===m5?s.mapping=t4:a===h5&&(s.mapping=l4),s}function l(s){if(s&&s.isTexture&&s.isRenderTargetTexture===!1){const a=s.mapping;if(a===m5||a===h5)if(e.has(s)){const r=e.get(s).texture;return t(r,s.mapping)}else{const r=s.image;if(r&&r.height>0){const o=new w0(r.height/2);return o.fromEquirectangularTexture(i,s),e.set(s,o),s.addEventListener("dispose",n),t(o.texture,s.mapping)}else return null}}return s}function n(s){const a=s.target;a.removeEventListener("dispose",n);const r=e.get(a);r!==void 0&&(e.delete(a),r.dispose())}function q(){e=new WeakMap}return{get:l,dispose:q}}class _l extends y7{constructor(e=-1,t=1,l=1,n=-1,q=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=l,this.bottom=n,this.near=q,this.far=s,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,l,n,q,s){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=l,this.view.offsetY=n,this.view.width=q,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),l=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let q=l-e,s=l+e,a=n+t,r=n-t;if(this.view!==null&&this.view.enabled){const o=(this.right-this.left)/this.view.fullWidth/this.zoom,m=(this.top-this.bottom)/this.view.fullHeight/this.zoom;q+=o*this.view.offsetX,s=q+o*this.view.width,a-=m*this.view.offsetY,r=a-m*this.view.height}this.projectionMatrix.makeOrthographic(q,s,a,r,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}const J3=4,b8=[.125,.215,.35,.446,.526,.582],d3=20,Q6=new _l,z8=new z1;let e5=null;const f3=(1+Math.sqrt(5))/2,Y3=1/f3,w8=[new S(1,1,1),new S(-1,1,1),new S(1,1,-1),new S(-1,1,-1),new S(0,f3,Y3),new S(0,f3,-Y3),new S(Y3,0,f3),new S(-Y3,0,f3),new S(f3,Y3,0),new S(-f3,Y3,0)];class T8{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,l=.1,n=100){e5=this._renderer.getRenderTarget(),this._setSize(256);const q=this._allocateTargets();return q.depthBuffer=!0,this._sceneToCubeUV(e,l,n,q),t>0&&this._blur(q,0,0,t),this._applyPMREM(q),this._cleanup(q),q}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=R8(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=P8(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(e5),e.scissorTest=!1,K4(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===t4||e.mapping===l4?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),e5=this._renderer.getRenderTarget();const l=t||this._allocateTargets();return this._textureToCubeUV(e,l),this._applyPMREM(l),this._cleanup(l),l}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,l={magFilter:A2,minFilter:A2,generateMipmaps:!1,type:v4,format:T2,encoding:v3,depthBuffer:!1},n=L8(e,t,l);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=L8(e,t,l);const{_lodMax:q}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=gl(q)),this._blurMaterial=Al(q,e,t)}return n}_compileMaterial(e){const t=new i2(this._lodPlanes[0],e);this._renderer.compile(t,Q6)}_sceneToCubeUV(e,t,l,n){const a=new d2(90,1,t,l),r=[1,-1,1,1,1,1],o=[1,1,1,-1,-1,-1],m=this._renderer,h=m.autoClear,c=m.toneMapping;m.getClearColor(z8),m.toneMapping=Y2,m.autoClear=!1;const f=new q4({name:"PMREM.Background",side:v2,depthWrite:!1,depthTest:!1}),x=new i2(new b4,f);let d=!1;const u=e.background;u?u.isColor&&(f.color.copy(u),e.background=null,d=!0):(f.color.copy(z8),d=!0);for(let p=0;p<6;p++){const A=p%3;A===0?(a.up.set(0,r[p],0),a.lookAt(o[p],0,0)):A===1?(a.up.set(0,0,r[p]),a.lookAt(0,o[p],0)):(a.up.set(0,r[p],0),a.lookAt(0,0,o[p]));const B=this._cubeSize;K4(n,A*B,p>2?B:0,B,B),m.setRenderTarget(n),d&&m.render(x,a),m.render(e,a)}x.geometry.dispose(),x.material.dispose(),m.toneMapping=c,m.autoClear=h,e.background=u}_textureToCubeUV(e,t){const l=this._renderer,n=e.mapping===t4||e.mapping===l4;n?(this._cubemapMaterial===null&&(this._cubemapMaterial=R8()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=P8());const q=n?this._cubemapMaterial:this._equirectMaterial,s=new i2(this._lodPlanes[0],q),a=q.uniforms;a.envMap.value=e;const r=this._cubeSize;K4(t,0,0,3*r,2*r),l.setRenderTarget(t),l.render(s,Q6)}_applyPMREM(e){const t=this._renderer,l=t.autoClear;t.autoClear=!1;for(let n=1;n<this._lodPlanes.length;n++){const q=Math.sqrt(this._sigmas[n]*this._sigmas[n]-this._sigmas[n-1]*this._sigmas[n-1]),s=w8[(n-1)%w8.length];this._blur(e,n-1,n,q,s)}t.autoClear=l}_blur(e,t,l,n,q){const s=this._pingPongRenderTarget;this._halfBlur(e,s,t,l,n,"latitudinal",q),this._halfBlur(s,e,l,l,n,"longitudinal",q)}_halfBlur(e,t,l,n,q,s,a){const r=this._renderer,o=this._blurMaterial;s!=="latitudinal"&&s!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const m=3,h=new i2(this._lodPlanes[n],o),c=o.uniforms,f=this._sizeLods[l]-1,x=isFinite(q)?Math.PI/(2*f):2*Math.PI/(2*d3-1),d=q/x,u=isFinite(q)?1+Math.floor(m*d):d3;u>d3&&console.warn(`sigmaRadians, ${q}, is too large and will clip, as it requested ${u} samples when the maximum is set to ${d3}`);const p=[];let A=0;for(let z=0;z<d3;++z){const _=z/d,M=Math.exp(-_*_/2);p.push(M),z===0?A+=M:z<u&&(A+=2*M)}for(let z=0;z<p.length;z++)p[z]=p[z]/A;c.envMap.value=e.texture,c.samples.value=u,c.weights.value=p,c.latitudinal.value=s==="latitudinal",a&&(c.poleAxis.value=a);const{_lodMax:B}=this;c.dTheta.value=x,c.mipInt.value=B-l;const v=this._sizeLods[n],g=3*v*(n>B-J3?n-B+J3:0),F=4*(this._cubeSize-v);K4(t,g,F,3*v,2*v),r.setRenderTarget(t),r.render(h,Q6)}}function gl(i){const e=[],t=[],l=[];let n=i;const q=i-J3+1+b8.length;for(let s=0;s<q;s++){const a=Math.pow(2,n);t.push(a);let r=1/a;s>i-J3?r=b8[s-i+J3-1]:s===0&&(r=0),l.push(r);const o=1/(a-2),m=-o,h=1+o,c=[m,m,h,m,h,h,m,m,h,h,m,h],f=6,x=6,d=3,u=2,p=1,A=new Float32Array(d*x*f),B=new Float32Array(u*x*f),v=new Float32Array(p*x*f);for(let F=0;F<f;F++){const z=F%3*2/3-1,_=F>2?0:-1,M=[z,_,0,z+2/3,_,0,z+2/3,_+1,0,z,_,0,z+2/3,_+1,0,z,_+1,0];A.set(M,d*x*F),B.set(c,u*x*F);const T=[F,F,F,F,F,F];v.set(T,p*x*F)}const g=new D2;g.setAttribute("position",new L2(A,d)),g.setAttribute("uv",new L2(B,u)),g.setAttribute("faceIndex",new L2(v,p)),e.push(g),n>J3&&n--}return{lodPlanes:e,sizeLods:t,sigmas:l}}function L8(i,e,t){const l=new C3(i,e,t);return l.texture.mapping=f6,l.texture.name="PMREM.cubeUv",l.scissorTest=!0,l}function K4(i,e,t,l,n){i.viewport.set(e,t,l,n),i.scissor.set(e,t,l,n)}function Al(i,e,t){const l=new Float32Array(d3),n=new S(0,1,0);return new B3({name:"SphericalGaussianBlur",defines:{n:d3,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${i}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:l},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n}},vertexShader:b5(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:q3,depthTest:!1,depthWrite:!1})}function P8(){return new B3({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:b5(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:q3,depthTest:!1,depthWrite:!1})}function R8(){return new B3({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:b5(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:q3,depthTest:!1,depthWrite:!1})}function b5(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function El(i){let e=new WeakMap,t=null;function l(a){if(a&&a.isTexture){const r=a.mapping,o=r===m5||r===h5,m=r===t4||r===l4;if(o||m)if(a.isRenderTargetTexture&&a.needsPMREMUpdate===!0){a.needsPMREMUpdate=!1;let h=e.get(a);return t===null&&(t=new T8(i)),h=o?t.fromEquirectangular(a,h):t.fromCubemap(a,h),e.set(a,h),h.texture}else{if(e.has(a))return e.get(a).texture;{const h=a.image;if(o&&h&&h.height>0||m&&h&&n(h)){t===null&&(t=new T8(i));const c=o?t.fromEquirectangular(a):t.fromCubemap(a);return e.set(a,c),a.addEventListener("dispose",q),c.texture}else return null}}}return a}function n(a){let r=0;const o=6;for(let m=0;m<o;m++)a[m]!==void 0&&r++;return r===o}function q(a){const r=a.target;r.removeEventListener("dispose",q);const o=e.get(r);o!==void 0&&(e.delete(r),o.dispose())}function s(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:l,dispose:s}}function vl(i){const e={};function t(l){if(e[l]!==void 0)return e[l];let n;switch(l){case"WEBGL_depth_texture":n=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=i.getExtension(l)}return e[l]=n,n}return{has:function(l){return t(l)!==null},init:function(l){l.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(l){const n=t(l);return n===null&&console.warn("THREE.WebGLRenderer: "+l+" extension not supported."),n}}}function Cl(i,e,t,l){const n={},q=new WeakMap;function s(h){const c=h.target;c.index!==null&&e.remove(c.index);for(const x in c.attributes)e.remove(c.attributes[x]);c.removeEventListener("dispose",s),delete n[c.id];const f=q.get(c);f&&(e.remove(f),q.delete(c)),l.releaseStatesOfGeometry(c),c.isInstancedBufferGeometry===!0&&delete c._maxInstanceCount,t.memory.geometries--}function a(h,c){return n[c.id]===!0||(c.addEventListener("dispose",s),n[c.id]=!0,t.memory.geometries++),c}function r(h){const c=h.attributes;for(const x in c)e.update(c[x],34962);const f=h.morphAttributes;for(const x in f){const d=f[x];for(let u=0,p=d.length;u<p;u++)e.update(d[u],34962)}}function o(h){const c=[],f=h.index,x=h.attributes.position;let d=0;if(f!==null){const A=f.array;d=f.version;for(let B=0,v=A.length;B<v;B+=3){const g=A[B+0],F=A[B+1],z=A[B+2];c.push(g,F,F,z,z,g)}}else{const A=x.array;d=x.version;for(let B=0,v=A.length/3-1;B<v;B+=3){const g=B+0,F=B+1,z=B+2;c.push(g,F,F,z,z,g)}}const u=new(g7(c)?B7:D7)(c,1);u.version=d;const p=q.get(h);p&&e.remove(p),q.set(h,u)}function m(h){const c=q.get(h);if(c){const f=h.index;f!==null&&c.version<f.version&&o(h)}else o(h);return q.get(h)}return{get:a,update:r,getWireframeAttribute:m}}function Dl(i,e,t,l){const n=l.isWebGL2;let q;function s(c){q=c}let a,r;function o(c){a=c.type,r=c.bytesPerElement}function m(c,f){i.drawElements(q,f,a,c*r),t.update(f,q,1)}function h(c,f,x){if(x===0)return;let d,u;if(n)d=i,u="drawElementsInstanced";else if(d=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",d===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[u](q,f,a,c*r,x),t.update(f,q,x)}this.setMode=s,this.setIndex=o,this.render=m,this.renderInstances=h}function Bl(i){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function l(q,s,a){switch(t.calls++,s){case 4:t.triangles+=a*(q/3);break;case 1:t.lines+=a*(q/2);break;case 3:t.lines+=a*(q-1);break;case 2:t.lines+=a*q;break;case 0:t.points+=a*q;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function n(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:n,update:l}}function yl(i,e){return i[0]-e[0]}function Ml(i,e){return Math.abs(e[1])-Math.abs(i[1])}function Fl(i,e,t){const l={},n=new Float32Array(8),q=new WeakMap,s=new R1,a=[];for(let o=0;o<8;o++)a[o]=[o,0];function r(o,m,h,c){const f=o.morphTargetInfluences;if(e.isWebGL2===!0){const d=m.morphAttributes.position||m.morphAttributes.normal||m.morphAttributes.color,u=d!==void 0?d.length:0;let p=q.get(m);if(p===void 0||p.count!==u){let j=function(){w.dispose(),q.delete(m),m.removeEventListener("dispose",j)};var x=j;p!==void 0&&p.texture.dispose();const v=m.morphAttributes.position!==void 0,g=m.morphAttributes.normal!==void 0,F=m.morphAttributes.color!==void 0,z=m.morphAttributes.position||[],_=m.morphAttributes.normal||[],M=m.morphAttributes.color||[];let T=0;v===!0&&(T=1),g===!0&&(T=2),F===!0&&(T=3);let X=m.attributes.position.count*T,q1=1;X>e.maxTextureSize&&(q1=Math.ceil(X/e.maxTextureSize),X=e.maxTextureSize);const N=new Float32Array(X*q1*4*u),w=new C7(N,X,q1,u);w.type=p3,w.needsUpdate=!0;const W=T*4;for(let Z=0;Z<u;Z++){const G=z[Z],P=_[Z],I=M[Z],$=X*q1*4*Z;for(let J=0;J<G.count;J++){const K=J*W;v===!0&&(s.fromBufferAttribute(G,J),N[$+K+0]=s.x,N[$+K+1]=s.y,N[$+K+2]=s.z,N[$+K+3]=0),g===!0&&(s.fromBufferAttribute(P,J),N[$+K+4]=s.x,N[$+K+5]=s.y,N[$+K+6]=s.z,N[$+K+7]=0),F===!0&&(s.fromBufferAttribute(I,J),N[$+K+8]=s.x,N[$+K+9]=s.y,N[$+K+10]=s.z,N[$+K+11]=I.itemSize===4?s.w:1)}}p={count:u,texture:w,size:new r1(X,q1)},q.set(m,p),m.addEventListener("dispose",j)}let A=0;for(let v=0;v<f.length;v++)A+=f[v];const B=m.morphTargetsRelative?1:1-A;c.getUniforms().setValue(i,"morphTargetBaseInfluence",B),c.getUniforms().setValue(i,"morphTargetInfluences",f),c.getUniforms().setValue(i,"morphTargetsTexture",p.texture,t),c.getUniforms().setValue(i,"morphTargetsTextureSize",p.size)}else{const d=f===void 0?0:f.length;let u=l[m.id];if(u===void 0||u.length!==d){u=[];for(let g=0;g<d;g++)u[g]=[g,0];l[m.id]=u}for(let g=0;g<d;g++){const F=u[g];F[0]=g,F[1]=f[g]}u.sort(Ml);for(let g=0;g<8;g++)g<d&&u[g][1]?(a[g][0]=u[g][0],a[g][1]=u[g][1]):(a[g][0]=Number.MAX_SAFE_INTEGER,a[g][1]=0);a.sort(yl);const p=m.morphAttributes.position,A=m.morphAttributes.normal;let B=0;for(let g=0;g<8;g++){const F=a[g],z=F[0],_=F[1];z!==Number.MAX_SAFE_INTEGER&&_?(p&&m.getAttribute("morphTarget"+g)!==p[z]&&m.setAttribute("morphTarget"+g,p[z]),A&&m.getAttribute("morphNormal"+g)!==A[z]&&m.setAttribute("morphNormal"+g,A[z]),n[g]=_,B+=_):(p&&m.hasAttribute("morphTarget"+g)===!0&&m.deleteAttribute("morphTarget"+g),A&&m.hasAttribute("morphNormal"+g)===!0&&m.deleteAttribute("morphNormal"+g),n[g]=0)}const v=m.morphTargetsRelative?1:1-B;c.getUniforms().setValue(i,"morphTargetBaseInfluence",v),c.getUniforms().setValue(i,"morphTargetInfluences",n)}}return{update:r}}function Sl(i,e,t,l){let n=new WeakMap;function q(r){const o=l.render.frame,m=r.geometry,h=e.get(r,m);return n.get(h)!==o&&(e.update(h),n.set(h,o)),r.isInstancedMesh&&(r.hasEventListener("dispose",a)===!1&&r.addEventListener("dispose",a),t.update(r.instanceMatrix,34962),r.instanceColor!==null&&t.update(r.instanceColor,34962)),h}function s(){n=new WeakMap}function a(r){const o=r.target;o.removeEventListener("dispose",a),t.remove(o.instanceMatrix),o.instanceColor!==null&&t.remove(o.instanceColor)}return{update:q,dispose:s}}const S7=new C2,b7=new C7,z7=new x0,w7=new M7,I8=[],N8=[],O8=new Float32Array(16),U8=new Float32Array(9),k8=new Float32Array(4);function s4(i,e,t){const l=i[0];if(l<=0||l>0)return i;const n=e*t;let q=I8[n];if(q===void 0&&(q=new Float32Array(n),I8[n]=q),e!==0){l.toArray(q,0);for(let s=1,a=0;s!==e;++s)a+=t,i[s].toArray(q,a)}return q}function a2(i,e){if(i.length!==e.length)return!1;for(let t=0,l=i.length;t<l;t++)if(i[t]!==e[t])return!1;return!0}function s2(i,e){for(let t=0,l=e.length;t<l;t++)i[t]=e[t]}function p6(i,e){let t=N8[e];t===void 0&&(t=new Int32Array(e),N8[e]=t);for(let l=0;l!==e;++l)t[l]=i.allocateTextureUnit();return t}function bl(i,e){const t=this.cache;t[0]!==e&&(i.uniform1f(this.addr,e),t[0]=e)}function zl(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(a2(t,e))return;i.uniform2fv(this.addr,e),s2(t,e)}}function wl(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(i.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(a2(t,e))return;i.uniform3fv(this.addr,e),s2(t,e)}}function Tl(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(a2(t,e))return;i.uniform4fv(this.addr,e),s2(t,e)}}function Ll(i,e){const t=this.cache,l=e.elements;if(l===void 0){if(a2(t,e))return;i.uniformMatrix2fv(this.addr,!1,e),s2(t,e)}else{if(a2(t,l))return;k8.set(l),i.uniformMatrix2fv(this.addr,!1,k8),s2(t,l)}}function Pl(i,e){const t=this.cache,l=e.elements;if(l===void 0){if(a2(t,e))return;i.uniformMatrix3fv(this.addr,!1,e),s2(t,e)}else{if(a2(t,l))return;U8.set(l),i.uniformMatrix3fv(this.addr,!1,U8),s2(t,l)}}function Rl(i,e){const t=this.cache,l=e.elements;if(l===void 0){if(a2(t,e))return;i.uniformMatrix4fv(this.addr,!1,e),s2(t,e)}else{if(a2(t,l))return;O8.set(l),i.uniformMatrix4fv(this.addr,!1,O8),s2(t,l)}}function Il(i,e){const t=this.cache;t[0]!==e&&(i.uniform1i(this.addr,e),t[0]=e)}function Nl(i,e){const t=this.cache;a2(t,e)||(i.uniform2iv(this.addr,e),s2(t,e))}function Ol(i,e){const t=this.cache;a2(t,e)||(i.uniform3iv(this.addr,e),s2(t,e))}function Ul(i,e){const t=this.cache;a2(t,e)||(i.uniform4iv(this.addr,e),s2(t,e))}function kl(i,e){const t=this.cache;t[0]!==e&&(i.uniform1ui(this.addr,e),t[0]=e)}function Gl(i,e){const t=this.cache;a2(t,e)||(i.uniform2uiv(this.addr,e),s2(t,e))}function Vl(i,e){const t=this.cache;a2(t,e)||(i.uniform3uiv(this.addr,e),s2(t,e))}function Hl(i,e){const t=this.cache;a2(t,e)||(i.uniform4uiv(this.addr,e),s2(t,e))}function Wl(i,e,t){const l=this.cache,n=t.allocateTextureUnit();l[0]!==n&&(i.uniform1i(this.addr,n),l[0]=n),t.setTexture2D(e||S7,n)}function Xl(i,e,t){const l=this.cache,n=t.allocateTextureUnit();l[0]!==n&&(i.uniform1i(this.addr,n),l[0]=n),t.setTexture3D(e||z7,n)}function Yl(i,e,t){const l=this.cache,n=t.allocateTextureUnit();l[0]!==n&&(i.uniform1i(this.addr,n),l[0]=n),t.setTextureCube(e||w7,n)}function jl(i,e,t){const l=this.cache,n=t.allocateTextureUnit();l[0]!==n&&(i.uniform1i(this.addr,n),l[0]=n),t.setTexture2DArray(e||b7,n)}function Zl(i){switch(i){case 5126:return bl;case 35664:return zl;case 35665:return wl;case 35666:return Tl;case 35674:return Ll;case 35675:return Pl;case 35676:return Rl;case 5124:case 35670:return Il;case 35667:case 35671:return Nl;case 35668:case 35672:return Ol;case 35669:case 35673:return Ul;case 5125:return kl;case 36294:return Gl;case 36295:return Vl;case 36296:return Hl;case 35678:case 36198:case 36298:case 36306:case 35682:return Wl;case 35679:case 36299:case 36307:return Xl;case 35680:case 36300:case 36308:case 36293:return Yl;case 36289:case 36303:case 36311:case 36292:return jl}}function Jl(i,e){i.uniform1fv(this.addr,e)}function $l(i,e){const t=s4(e,this.size,2);i.uniform2fv(this.addr,t)}function Kl(i,e){const t=s4(e,this.size,3);i.uniform3fv(this.addr,t)}function Ql(i,e){const t=s4(e,this.size,4);i.uniform4fv(this.addr,t)}function en(i,e){const t=s4(e,this.size,4);i.uniformMatrix2fv(this.addr,!1,t)}function tn(i,e){const t=s4(e,this.size,9);i.uniformMatrix3fv(this.addr,!1,t)}function ln(i,e){const t=s4(e,this.size,16);i.uniformMatrix4fv(this.addr,!1,t)}function nn(i,e){i.uniform1iv(this.addr,e)}function qn(i,e){i.uniform2iv(this.addr,e)}function an(i,e){i.uniform3iv(this.addr,e)}function sn(i,e){i.uniform4iv(this.addr,e)}function rn(i,e){i.uniform1uiv(this.addr,e)}function on(i,e){i.uniform2uiv(this.addr,e)}function mn(i,e){i.uniform3uiv(this.addr,e)}function hn(i,e){i.uniform4uiv(this.addr,e)}function cn(i,e,t){const l=e.length,n=p6(t,l);i.uniform1iv(this.addr,n);for(let q=0;q!==l;++q)t.setTexture2D(e[q]||S7,n[q])}function un(i,e,t){const l=e.length,n=p6(t,l);i.uniform1iv(this.addr,n);for(let q=0;q!==l;++q)t.setTexture3D(e[q]||z7,n[q])}function fn(i,e,t){const l=e.length,n=p6(t,l);i.uniform1iv(this.addr,n);for(let q=0;q!==l;++q)t.setTextureCube(e[q]||w7,n[q])}function dn(i,e,t){const l=e.length,n=p6(t,l);i.uniform1iv(this.addr,n);for(let q=0;q!==l;++q)t.setTexture2DArray(e[q]||b7,n[q])}function xn(i){switch(i){case 5126:return Jl;case 35664:return $l;case 35665:return Kl;case 35666:return Ql;case 35674:return en;case 35675:return tn;case 35676:return ln;case 5124:case 35670:return nn;case 35667:case 35671:return qn;case 35668:case 35672:return an;case 35669:case 35673:return sn;case 5125:return rn;case 36294:return on;case 36295:return mn;case 36296:return hn;case 35678:case 36198:case 36298:case 36306:case 35682:return cn;case 35679:case 36299:case 36307:return un;case 35680:case 36300:case 36308:case 36293:return fn;case 36289:case 36303:case 36311:case 36292:return dn}}class pn{constructor(e,t,l){this.id=e,this.addr=l,this.cache=[],this.setValue=Zl(t.type)}}class _n{constructor(e,t,l){this.id=e,this.addr=l,this.cache=[],this.size=t.size,this.setValue=xn(t.type)}}class gn{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,l){const n=this.seq;for(let q=0,s=n.length;q!==s;++q){const a=n[q];a.setValue(e,t[a.id],l)}}}const t5=/(\w+)(\])?(\[|\.)?/g;function G8(i,e){i.seq.push(e),i.map[e.id]=e}function An(i,e,t){const l=i.name,n=l.length;for(t5.lastIndex=0;;){const q=t5.exec(l),s=t5.lastIndex;let a=q[1];const r=q[2]==="]",o=q[3];if(r&&(a=a|0),o===void 0||o==="["&&s+2===n){G8(t,o===void 0?new pn(a,i,e):new _n(a,i,e));break}else{let h=t.map[a];h===void 0&&(h=new gn(a),G8(t,h)),t=h}}}class s6{constructor(e,t){this.seq=[],this.map={};const l=e.getProgramParameter(t,35718);for(let n=0;n<l;++n){const q=e.getActiveUniform(t,n),s=e.getUniformLocation(t,q.name);An(q,s,this)}}setValue(e,t,l,n){const q=this.map[t];q!==void 0&&q.setValue(e,l,n)}setOptional(e,t,l){const n=t[l];n!==void 0&&this.setValue(e,l,n)}static upload(e,t,l,n){for(let q=0,s=t.length;q!==s;++q){const a=t[q],r=l[a.id];r.needsUpdate!==!1&&a.setValue(e,r.value,n)}}static seqWithValue(e,t){const l=[];for(let n=0,q=e.length;n!==q;++n){const s=e[n];s.id in t&&l.push(s)}return l}}function V8(i,e,t){const l=i.createShader(e);return i.shaderSource(l,t),i.compileShader(l),l}let En=0;function vn(i,e){const t=i.split(`
`),l=[],n=Math.max(e-6,0),q=Math.min(e+6,t.length);for(let s=n;s<q;s++){const a=s+1;l.push(`${a===e?">":" "} ${a}: ${t[s]}`)}return l.join(`
`)}function Cn(i){switch(i){case v3:return["Linear","( value )"];case U1:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",i),["Linear","( value )"]}}function H8(i,e,t){const l=i.getShaderParameter(e,35713),n=i.getShaderInfoLog(e).trim();if(l&&n==="")return"";const q=/ERROR: 0:(\d+)/.exec(n);if(q){const s=parseInt(q[1]);return t.toUpperCase()+`

`+n+`

`+vn(i.getShaderSource(e),s)}else return n}function Dn(i,e){const t=Cn(e);return"vec4 "+i+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function Bn(i,e){let t;switch(e){case b9:t="Linear";break;case z9:t="Reinhard";break;case w9:t="OptimizedCineon";break;case T9:t="ACESFilmic";break;case L9:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function yn(i){return[i.extensionDerivatives||!!i.envMapCubeUVHeight||i.bumpMap||i.tangentSpaceNormalMap||i.clearcoatNormalMap||i.flatShading||i.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(i.extensionFragDepth||i.logarithmicDepthBuffer)&&i.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",i.extensionDrawBuffers&&i.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(i.extensionShaderTextureLOD||i.envMap||i.transmission)&&i.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(x4).join(`
`)}function Mn(i){const e=[];for(const t in i){const l=i[t];l!==!1&&e.push("#define "+t+" "+l)}return e.join(`
`)}function Fn(i,e){const t={},l=i.getProgramParameter(e,35721);for(let n=0;n<l;n++){const q=i.getActiveAttrib(e,n),s=q.name;let a=1;q.type===35674&&(a=2),q.type===35675&&(a=3),q.type===35676&&(a=4),t[s]={type:q.type,location:i.getAttribLocation(e,s),locationSize:a}}return t}function x4(i){return i!==""}function W8(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function X8(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Sn=/^[ \t]*#include +<([\w\d./]+)>/gm;function x5(i){return i.replace(Sn,bn)}function bn(i,e){const t=D1[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return x5(t)}const zn=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Y8(i){return i.replace(zn,wn)}function wn(i,e,t,l){let n="";for(let q=parseInt(e);q<parseInt(t);q++)n+=l.replace(/\[\s*i\s*\]/g,"[ "+q+" ]").replace(/UNROLLED_LOOP_INDEX/g,q);return n}function j8(i){let e="precision "+i.precision+` float;
precision `+i.precision+" int;";return i.precision==="highp"?e+=`
#define HIGH_PRECISION`:i.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:i.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function Tn(i){let e="SHADOWMAP_TYPE_BASIC";return i.shadowMapType===f7?e="SHADOWMAP_TYPE_PCF":i.shadowMapType===r9?e="SHADOWMAP_TYPE_PCF_SOFT":i.shadowMapType===f4&&(e="SHADOWMAP_TYPE_VSM"),e}function Ln(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap)switch(i.envMapMode){case t4:case l4:e="ENVMAP_TYPE_CUBE";break;case f6:e="ENVMAP_TYPE_CUBE_UV";break}return e}function Pn(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap)switch(i.envMapMode){case l4:e="ENVMAP_MODE_REFRACTION";break}return e}function Rn(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap)switch(i.combine){case C5:e="ENVMAP_BLENDING_MULTIPLY";break;case F9:e="ENVMAP_BLENDING_MIX";break;case S9:e="ENVMAP_BLENDING_ADD";break}return e}function In(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,l=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:l,maxMip:t}}function Nn(i,e,t,l){const n=i.getContext(),q=t.defines;let s=t.vertexShader,a=t.fragmentShader;const r=Tn(t),o=Ln(t),m=Pn(t),h=Rn(t),c=In(t),f=t.isWebGL2?"":yn(t),x=Mn(q),d=n.createProgram();let u,p,A=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(u=[x].filter(x4).join(`
`),u.length>0&&(u+=`
`),p=[f,x].filter(x4).join(`
`),p.length>0&&(p+=`
`)):(u=[j8(t),"#define SHADER_NAME "+t.shaderName,x,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.supportsVertexTextures?"#define VERTEX_TEXTURES":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+m:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.displacementMap&&t.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+r:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(x4).join(`
`),p=[f,j8(t),"#define SHADER_NAME "+t.shaderName,x,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+o:"",t.envMap?"#define "+m:"",t.envMap?"#define "+h:"",c?"#define CUBEUV_TEXEL_WIDTH "+c.texelWidth:"",c?"#define CUBEUV_TEXEL_HEIGHT "+c.texelHeight:"",c?"#define CUBEUV_MAX_MIP "+c.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+r:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Y2?"#define TONE_MAPPING":"",t.toneMapping!==Y2?D1.tonemapping_pars_fragment:"",t.toneMapping!==Y2?Bn("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",D1.encodings_pars_fragment,Dn("linearToOutputTexel",t.outputEncoding),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(x4).join(`
`)),s=x5(s),s=W8(s,t),s=X8(s,t),a=x5(a),a=W8(a,t),a=X8(a,t),s=Y8(s),a=Y8(a),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(A=`#version 300 es
`,u=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+u,p=["#define varying in",t.glslVersion===x8?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===x8?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+p);const B=A+u+s,v=A+p+a,g=V8(n,35633,B),F=V8(n,35632,v);if(n.attachShader(d,g),n.attachShader(d,F),t.index0AttributeName!==void 0?n.bindAttribLocation(d,0,t.index0AttributeName):t.morphTargets===!0&&n.bindAttribLocation(d,0,"position"),n.linkProgram(d),i.debug.checkShaderErrors){const M=n.getProgramInfoLog(d).trim(),T=n.getShaderInfoLog(g).trim(),X=n.getShaderInfoLog(F).trim();let q1=!0,N=!0;if(n.getProgramParameter(d,35714)===!1){q1=!1;const w=H8(n,g,"vertex"),W=H8(n,F,"fragment");console.error("THREE.WebGLProgram: Shader Error "+n.getError()+" - VALIDATE_STATUS "+n.getProgramParameter(d,35715)+`

Program Info Log: `+M+`
`+w+`
`+W)}else M!==""?console.warn("THREE.WebGLProgram: Program Info Log:",M):(T===""||X==="")&&(N=!1);N&&(this.diagnostics={runnable:q1,programLog:M,vertexShader:{log:T,prefix:u},fragmentShader:{log:X,prefix:p}})}n.deleteShader(g),n.deleteShader(F);let z;this.getUniforms=function(){return z===void 0&&(z=new s6(n,d)),z};let _;return this.getAttributes=function(){return _===void 0&&(_=Fn(n,d)),_},this.destroy=function(){l.releaseStatesOfProgram(this),n.deleteProgram(d),this.program=void 0},this.name=t.shaderName,this.id=En++,this.cacheKey=e,this.usedTimes=1,this.program=d,this.vertexShader=g,this.fragmentShader=F,this}let On=0;class Un{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,l=e.fragmentShader,n=this._getShaderStage(t),q=this._getShaderStage(l),s=this._getShaderCacheForMaterial(e);return s.has(n)===!1&&(s.add(n),n.usedTimes++),s.has(q)===!1&&(s.add(q),q.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const l of t)l.usedTimes--,l.usedTimes===0&&this.shaderCache.delete(l.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let l=t.get(e);return l===void 0&&(l=new Set,t.set(e,l)),l}_getShaderStage(e){const t=this.shaderCache;let l=t.get(e);return l===void 0&&(l=new kn(e),t.set(e,l)),l}}class kn{constructor(e){this.id=On++,this.code=e,this.usedTimes=0}}function Gn(i,e,t,l,n,q,s){const a=new M5,r=new Un,o=[],m=n.isWebGL2,h=n.logarithmicDepthBuffer,c=n.vertexTextures;let f=n.precision;const x={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function d(_,M,T,X,q1){const N=X.fog,w=q1.geometry,W=_.isMeshStandardMaterial?X.environment:null,j=(_.isMeshStandardMaterial?t:e).get(_.envMap||W),Z=!!j&&j.mapping===f6?j.image.height:null,G=x[_.type];_.precision!==null&&(f=n.getMaxPrecision(_.precision),f!==_.precision&&console.warn("THREE.WebGLProgram.getParameters:",_.precision,"not supported, using",f,"instead."));const P=w.morphAttributes.position||w.morphAttributes.normal||w.morphAttributes.color,I=P!==void 0?P.length:0;let $=0;w.morphAttributes.position!==void 0&&($=1),w.morphAttributes.normal!==void 0&&($=2),w.morphAttributes.color!==void 0&&($=3);let J,K,c1,_1;if(G){const w1=z2[G];J=w1.vertexShader,K=w1.fragmentShader}else J=_.vertexShader,K=_.fragmentShader,r.update(_),c1=r.getVertexShaderID(_),_1=r.getFragmentShaderID(_);const H=i.getRenderTarget(),S1=_.alphaTest>0,d1=_.clearcoat>0,g1=_.iridescence>0;return{isWebGL2:m,shaderID:G,shaderName:_.type,vertexShader:J,fragmentShader:K,defines:_.defines,customVertexShaderID:c1,customFragmentShaderID:_1,isRawShaderMaterial:_.isRawShaderMaterial===!0,glslVersion:_.glslVersion,precision:f,instancing:q1.isInstancedMesh===!0,instancingColor:q1.isInstancedMesh===!0&&q1.instanceColor!==null,supportsVertexTextures:c,outputEncoding:H===null?i.outputEncoding:H.isXRRenderTarget===!0?H.texture.encoding:v3,map:!!_.map,matcap:!!_.matcap,envMap:!!j,envMapMode:j&&j.mapping,envMapCubeUVHeight:Z,lightMap:!!_.lightMap,aoMap:!!_.aoMap,emissiveMap:!!_.emissiveMap,bumpMap:!!_.bumpMap,normalMap:!!_.normalMap,objectSpaceNormalMap:_.normalMapType===Q9,tangentSpaceNormalMap:_.normalMapType===D5,decodeVideoTexture:!!_.map&&_.map.isVideoTexture===!0&&_.map.encoding===U1,clearcoat:d1,clearcoatMap:d1&&!!_.clearcoatMap,clearcoatRoughnessMap:d1&&!!_.clearcoatRoughnessMap,clearcoatNormalMap:d1&&!!_.clearcoatNormalMap,iridescence:g1,iridescenceMap:g1&&!!_.iridescenceMap,iridescenceThicknessMap:g1&&!!_.iridescenceThicknessMap,displacementMap:!!_.displacementMap,roughnessMap:!!_.roughnessMap,metalnessMap:!!_.metalnessMap,specularMap:!!_.specularMap,specularIntensityMap:!!_.specularIntensityMap,specularColorMap:!!_.specularColorMap,opaque:_.transparent===!1&&_.blending===K3,alphaMap:!!_.alphaMap,alphaTest:S1,gradientMap:!!_.gradientMap,sheen:_.sheen>0,sheenColorMap:!!_.sheenColorMap,sheenRoughnessMap:!!_.sheenRoughnessMap,transmission:_.transmission>0,transmissionMap:!!_.transmissionMap,thicknessMap:!!_.thicknessMap,combine:_.combine,vertexTangents:!!_.normalMap&&!!w.attributes.tangent,vertexColors:_.vertexColors,vertexAlphas:_.vertexColors===!0&&!!w.attributes.color&&w.attributes.color.itemSize===4,vertexUvs:!!_.map||!!_.bumpMap||!!_.normalMap||!!_.specularMap||!!_.alphaMap||!!_.emissiveMap||!!_.roughnessMap||!!_.metalnessMap||!!_.clearcoatMap||!!_.clearcoatRoughnessMap||!!_.clearcoatNormalMap||!!_.iridescenceMap||!!_.iridescenceThicknessMap||!!_.displacementMap||!!_.transmissionMap||!!_.thicknessMap||!!_.specularIntensityMap||!!_.specularColorMap||!!_.sheenColorMap||!!_.sheenRoughnessMap,uvsVertexOnly:!(!!_.map||!!_.bumpMap||!!_.normalMap||!!_.specularMap||!!_.alphaMap||!!_.emissiveMap||!!_.roughnessMap||!!_.metalnessMap||!!_.clearcoatNormalMap||!!_.iridescenceMap||!!_.iridescenceThicknessMap||_.transmission>0||!!_.transmissionMap||!!_.thicknessMap||!!_.specularIntensityMap||!!_.specularColorMap||_.sheen>0||!!_.sheenColorMap||!!_.sheenRoughnessMap)&&!!_.displacementMap,fog:!!N,useFog:_.fog===!0,fogExp2:N&&N.isFogExp2,flatShading:!!_.flatShading,sizeAttenuation:_.sizeAttenuation,logarithmicDepthBuffer:h,skinning:q1.isSkinnedMesh===!0,morphTargets:w.morphAttributes.position!==void 0,morphNormals:w.morphAttributes.normal!==void 0,morphColors:w.morphAttributes.color!==void 0,morphTargetsCount:I,morphTextureStride:$,numDirLights:M.directional.length,numPointLights:M.point.length,numSpotLights:M.spot.length,numSpotLightMaps:M.spotLightMap.length,numRectAreaLights:M.rectArea.length,numHemiLights:M.hemi.length,numDirLightShadows:M.directionalShadowMap.length,numPointLightShadows:M.pointShadowMap.length,numSpotLightShadows:M.spotShadowMap.length,numSpotLightShadowsWithMaps:M.numSpotLightShadowsWithMaps,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:_.dithering,shadowMapEnabled:i.shadowMap.enabled&&T.length>0,shadowMapType:i.shadowMap.type,toneMapping:_.toneMapped?i.toneMapping:Y2,physicallyCorrectLights:i.physicallyCorrectLights,premultipliedAlpha:_.premultipliedAlpha,doubleSided:_.side===w2,flipSided:_.side===v2,useDepthPacking:!!_.depthPacking,depthPacking:_.depthPacking||0,index0AttributeName:_.index0AttributeName,extensionDerivatives:_.extensions&&_.extensions.derivatives,extensionFragDepth:_.extensions&&_.extensions.fragDepth,extensionDrawBuffers:_.extensions&&_.extensions.drawBuffers,extensionShaderTextureLOD:_.extensions&&_.extensions.shaderTextureLOD,rendererExtensionFragDepth:m||l.has("EXT_frag_depth"),rendererExtensionDrawBuffers:m||l.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:m||l.has("EXT_shader_texture_lod"),customProgramCacheKey:_.customProgramCacheKey()}}function u(_){const M=[];if(_.shaderID?M.push(_.shaderID):(M.push(_.customVertexShaderID),M.push(_.customFragmentShaderID)),_.defines!==void 0)for(const T in _.defines)M.push(T),M.push(_.defines[T]);return _.isRawShaderMaterial===!1&&(p(M,_),A(M,_),M.push(i.outputEncoding)),M.push(_.customProgramCacheKey),M.join()}function p(_,M){_.push(M.precision),_.push(M.outputEncoding),_.push(M.envMapMode),_.push(M.envMapCubeUVHeight),_.push(M.combine),_.push(M.vertexUvs),_.push(M.fogExp2),_.push(M.sizeAttenuation),_.push(M.morphTargetsCount),_.push(M.morphAttributeCount),_.push(M.numDirLights),_.push(M.numPointLights),_.push(M.numSpotLights),_.push(M.numSpotLightMaps),_.push(M.numHemiLights),_.push(M.numRectAreaLights),_.push(M.numDirLightShadows),_.push(M.numPointLightShadows),_.push(M.numSpotLightShadows),_.push(M.numSpotLightShadowsWithMaps),_.push(M.shadowMapType),_.push(M.toneMapping),_.push(M.numClippingPlanes),_.push(M.numClipIntersection),_.push(M.depthPacking)}function A(_,M){a.disableAll(),M.isWebGL2&&a.enable(0),M.supportsVertexTextures&&a.enable(1),M.instancing&&a.enable(2),M.instancingColor&&a.enable(3),M.map&&a.enable(4),M.matcap&&a.enable(5),M.envMap&&a.enable(6),M.lightMap&&a.enable(7),M.aoMap&&a.enable(8),M.emissiveMap&&a.enable(9),M.bumpMap&&a.enable(10),M.normalMap&&a.enable(11),M.objectSpaceNormalMap&&a.enable(12),M.tangentSpaceNormalMap&&a.enable(13),M.clearcoat&&a.enable(14),M.clearcoatMap&&a.enable(15),M.clearcoatRoughnessMap&&a.enable(16),M.clearcoatNormalMap&&a.enable(17),M.iridescence&&a.enable(18),M.iridescenceMap&&a.enable(19),M.iridescenceThicknessMap&&a.enable(20),M.displacementMap&&a.enable(21),M.specularMap&&a.enable(22),M.roughnessMap&&a.enable(23),M.metalnessMap&&a.enable(24),M.gradientMap&&a.enable(25),M.alphaMap&&a.enable(26),M.alphaTest&&a.enable(27),M.vertexColors&&a.enable(28),M.vertexAlphas&&a.enable(29),M.vertexUvs&&a.enable(30),M.vertexTangents&&a.enable(31),M.uvsVertexOnly&&a.enable(32),_.push(a.mask),a.disableAll(),M.fog&&a.enable(0),M.useFog&&a.enable(1),M.flatShading&&a.enable(2),M.logarithmicDepthBuffer&&a.enable(3),M.skinning&&a.enable(4),M.morphTargets&&a.enable(5),M.morphNormals&&a.enable(6),M.morphColors&&a.enable(7),M.premultipliedAlpha&&a.enable(8),M.shadowMapEnabled&&a.enable(9),M.physicallyCorrectLights&&a.enable(10),M.doubleSided&&a.enable(11),M.flipSided&&a.enable(12),M.useDepthPacking&&a.enable(13),M.dithering&&a.enable(14),M.specularIntensityMap&&a.enable(15),M.specularColorMap&&a.enable(16),M.transmission&&a.enable(17),M.transmissionMap&&a.enable(18),M.thicknessMap&&a.enable(19),M.sheen&&a.enable(20),M.sheenColorMap&&a.enable(21),M.sheenRoughnessMap&&a.enable(22),M.decodeVideoTexture&&a.enable(23),M.opaque&&a.enable(24),_.push(a.mask)}function B(_){const M=x[_.type];let T;if(M){const X=z2[M];T=F0.clone(X.uniforms)}else T=_.uniforms;return T}function v(_,M){let T;for(let X=0,q1=o.length;X<q1;X++){const N=o[X];if(N.cacheKey===M){T=N,++T.usedTimes;break}}return T===void 0&&(T=new Nn(i,M,_,q),o.push(T)),T}function g(_){if(--_.usedTimes===0){const M=o.indexOf(_);o[M]=o[o.length-1],o.pop(),_.destroy()}}function F(_){r.remove(_)}function z(){r.dispose()}return{getParameters:d,getProgramCacheKey:u,getUniforms:B,acquireProgram:v,releaseProgram:g,releaseShaderCache:F,programs:o,dispose:z}}function Vn(){let i=new WeakMap;function e(q){let s=i.get(q);return s===void 0&&(s={},i.set(q,s)),s}function t(q){i.delete(q)}function l(q,s,a){i.get(q)[s]=a}function n(){i=new WeakMap}return{get:e,remove:t,update:l,dispose:n}}function Hn(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.material.id!==e.material.id?i.material.id-e.material.id:i.z!==e.z?i.z-e.z:i.id-e.id}function Z8(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.z!==e.z?e.z-i.z:i.id-e.id}function J8(){const i=[];let e=0;const t=[],l=[],n=[];function q(){e=0,t.length=0,l.length=0,n.length=0}function s(h,c,f,x,d,u){let p=i[e];return p===void 0?(p={id:h.id,object:h,geometry:c,material:f,groupOrder:x,renderOrder:h.renderOrder,z:d,group:u},i[e]=p):(p.id=h.id,p.object=h,p.geometry=c,p.material=f,p.groupOrder=x,p.renderOrder=h.renderOrder,p.z=d,p.group=u),e++,p}function a(h,c,f,x,d,u){const p=s(h,c,f,x,d,u);f.transmission>0?l.push(p):f.transparent===!0?n.push(p):t.push(p)}function r(h,c,f,x,d,u){const p=s(h,c,f,x,d,u);f.transmission>0?l.unshift(p):f.transparent===!0?n.unshift(p):t.unshift(p)}function o(h,c){t.length>1&&t.sort(h||Hn),l.length>1&&l.sort(c||Z8),n.length>1&&n.sort(c||Z8)}function m(){for(let h=e,c=i.length;h<c;h++){const f=i[h];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:t,transmissive:l,transparent:n,init:q,push:a,unshift:r,finish:m,sort:o}}function Wn(){let i=new WeakMap;function e(l,n){const q=i.get(l);let s;return q===void 0?(s=new J8,i.set(l,[s])):n>=q.length?(s=new J8,q.push(s)):s=q[n],s}function t(){i=new WeakMap}return{get:e,dispose:t}}function Xn(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new S,color:new z1};break;case"SpotLight":t={position:new S,direction:new S,color:new z1,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new S,color:new z1,distance:0,decay:0};break;case"HemisphereLight":t={direction:new S,skyColor:new z1,groundColor:new z1};break;case"RectAreaLight":t={color:new z1,position:new S,halfWidth:new S,halfHeight:new S};break}return i[e.id]=t,t}}}function Yn(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new r1};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new r1};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new r1,shadowCameraNear:1,shadowCameraFar:1e3};break}return i[e.id]=t,t}}}let jn=0;function Zn(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function Jn(i,e){const t=new Xn,l=Yn(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let m=0;m<9;m++)n.probe.push(new S);const q=new S,s=new G1,a=new G1;function r(m,h){let c=0,f=0,x=0;for(let X=0;X<9;X++)n.probe[X].set(0,0,0);let d=0,u=0,p=0,A=0,B=0,v=0,g=0,F=0,z=0,_=0;m.sort(Zn);const M=h!==!0?Math.PI:1;for(let X=0,q1=m.length;X<q1;X++){const N=m[X],w=N.color,W=N.intensity,j=N.distance,Z=N.shadow&&N.shadow.map?N.shadow.map.texture:null;if(N.isAmbientLight)c+=w.r*W*M,f+=w.g*W*M,x+=w.b*W*M;else if(N.isLightProbe)for(let G=0;G<9;G++)n.probe[G].addScaledVector(N.sh.coefficients[G],W);else if(N.isDirectionalLight){const G=t.get(N);if(G.color.copy(N.color).multiplyScalar(N.intensity*M),N.castShadow){const P=N.shadow,I=l.get(N);I.shadowBias=P.bias,I.shadowNormalBias=P.normalBias,I.shadowRadius=P.radius,I.shadowMapSize=P.mapSize,n.directionalShadow[d]=I,n.directionalShadowMap[d]=Z,n.directionalShadowMatrix[d]=N.shadow.matrix,v++}n.directional[d]=G,d++}else if(N.isSpotLight){const G=t.get(N);G.position.setFromMatrixPosition(N.matrixWorld),G.color.copy(w).multiplyScalar(W*M),G.distance=j,G.coneCos=Math.cos(N.angle),G.penumbraCos=Math.cos(N.angle*(1-N.penumbra)),G.decay=N.decay,n.spot[p]=G;const P=N.shadow;if(N.map&&(n.spotLightMap[z]=N.map,z++,P.updateMatrices(N),N.castShadow&&_++),n.spotLightMatrix[p]=P.matrix,N.castShadow){const I=l.get(N);I.shadowBias=P.bias,I.shadowNormalBias=P.normalBias,I.shadowRadius=P.radius,I.shadowMapSize=P.mapSize,n.spotShadow[p]=I,n.spotShadowMap[p]=Z,F++}p++}else if(N.isRectAreaLight){const G=t.get(N);G.color.copy(w).multiplyScalar(W),G.halfWidth.set(N.width*.5,0,0),G.halfHeight.set(0,N.height*.5,0),n.rectArea[A]=G,A++}else if(N.isPointLight){const G=t.get(N);if(G.color.copy(N.color).multiplyScalar(N.intensity*M),G.distance=N.distance,G.decay=N.decay,N.castShadow){const P=N.shadow,I=l.get(N);I.shadowBias=P.bias,I.shadowNormalBias=P.normalBias,I.shadowRadius=P.radius,I.shadowMapSize=P.mapSize,I.shadowCameraNear=P.camera.near,I.shadowCameraFar=P.camera.far,n.pointShadow[u]=I,n.pointShadowMap[u]=Z,n.pointShadowMatrix[u]=N.shadow.matrix,g++}n.point[u]=G,u++}else if(N.isHemisphereLight){const G=t.get(N);G.skyColor.copy(N.color).multiplyScalar(W*M),G.groundColor.copy(N.groundColor).multiplyScalar(W*M),n.hemi[B]=G,B++}}A>0&&(e.isWebGL2||i.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=l1.LTC_FLOAT_1,n.rectAreaLTC2=l1.LTC_FLOAT_2):i.has("OES_texture_half_float_linear")===!0?(n.rectAreaLTC1=l1.LTC_HALF_1,n.rectAreaLTC2=l1.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),n.ambient[0]=c,n.ambient[1]=f,n.ambient[2]=x;const T=n.hash;(T.directionalLength!==d||T.pointLength!==u||T.spotLength!==p||T.rectAreaLength!==A||T.hemiLength!==B||T.numDirectionalShadows!==v||T.numPointShadows!==g||T.numSpotShadows!==F||T.numSpotMaps!==z)&&(n.directional.length=d,n.spot.length=p,n.rectArea.length=A,n.point.length=u,n.hemi.length=B,n.directionalShadow.length=v,n.directionalShadowMap.length=v,n.pointShadow.length=g,n.pointShadowMap.length=g,n.spotShadow.length=F,n.spotShadowMap.length=F,n.directionalShadowMatrix.length=v,n.pointShadowMatrix.length=g,n.spotLightMatrix.length=F+z-_,n.spotLightMap.length=z,n.numSpotLightShadowsWithMaps=_,T.directionalLength=d,T.pointLength=u,T.spotLength=p,T.rectAreaLength=A,T.hemiLength=B,T.numDirectionalShadows=v,T.numPointShadows=g,T.numSpotShadows=F,T.numSpotMaps=z,n.version=jn++)}function o(m,h){let c=0,f=0,x=0,d=0,u=0;const p=h.matrixWorldInverse;for(let A=0,B=m.length;A<B;A++){const v=m[A];if(v.isDirectionalLight){const g=n.directional[c];g.direction.setFromMatrixPosition(v.matrixWorld),q.setFromMatrixPosition(v.target.matrixWorld),g.direction.sub(q),g.direction.transformDirection(p),c++}else if(v.isSpotLight){const g=n.spot[x];g.position.setFromMatrixPosition(v.matrixWorld),g.position.applyMatrix4(p),g.direction.setFromMatrixPosition(v.matrixWorld),q.setFromMatrixPosition(v.target.matrixWorld),g.direction.sub(q),g.direction.transformDirection(p),x++}else if(v.isRectAreaLight){const g=n.rectArea[d];g.position.setFromMatrixPosition(v.matrixWorld),g.position.applyMatrix4(p),a.identity(),s.copy(v.matrixWorld),s.premultiply(p),a.extractRotation(s),g.halfWidth.set(v.width*.5,0,0),g.halfHeight.set(0,v.height*.5,0),g.halfWidth.applyMatrix4(a),g.halfHeight.applyMatrix4(a),d++}else if(v.isPointLight){const g=n.point[f];g.position.setFromMatrixPosition(v.matrixWorld),g.position.applyMatrix4(p),f++}else if(v.isHemisphereLight){const g=n.hemi[u];g.direction.setFromMatrixPosition(v.matrixWorld),g.direction.transformDirection(p),u++}}}return{setup:r,setupView:o,state:n}}function $8(i,e){const t=new Jn(i,e),l=[],n=[];function q(){l.length=0,n.length=0}function s(h){l.push(h)}function a(h){n.push(h)}function r(h){t.setup(l,h)}function o(h){t.setupView(l,h)}return{init:q,state:{lightsArray:l,shadowsArray:n,lights:t},setupLights:r,setupLightsView:o,pushLight:s,pushShadow:a}}function $n(i,e){let t=new WeakMap;function l(q,s=0){const a=t.get(q);let r;return a===void 0?(r=new $8(i,e),t.set(q,[r])):s>=a.length?(r=new $8(i,e),a.push(r)):r=a[s],r}function n(){t=new WeakMap}return{get:l,dispose:n}}class Kn extends F3{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=$9,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class Qn extends F3{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new S,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const eq=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,tq=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function lq(i,e,t){let l=new F5;const n=new r1,q=new r1,s=new R1,a=new Kn({depthPacking:K9}),r=new Qn,o={},m=t.maxTextureSize,h={0:v2,1:i3,2:w2},c=new B3({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new r1},radius:{value:4}},vertexShader:eq,fragmentShader:tq}),f=c.clone();f.defines.HORIZONTAL_PASS=1;const x=new D2;x.setAttribute("position",new L2(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const d=new i2(x,c),u=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=f7,this.render=function(v,g,F){if(u.enabled===!1||u.autoUpdate===!1&&u.needsUpdate===!1||v.length===0)return;const z=i.getRenderTarget(),_=i.getActiveCubeFace(),M=i.getActiveMipmapLevel(),T=i.state;T.setBlending(q3),T.buffers.color.setClear(1,1,1,1),T.buffers.depth.setTest(!0),T.setScissorTest(!1);for(let X=0,q1=v.length;X<q1;X++){const N=v[X],w=N.shadow;if(w===void 0){console.warn("THREE.WebGLShadowMap:",N,"has no shadow.");continue}if(w.autoUpdate===!1&&w.needsUpdate===!1)continue;n.copy(w.mapSize);const W=w.getFrameExtents();if(n.multiply(W),q.copy(w.mapSize),(n.x>m||n.y>m)&&(n.x>m&&(q.x=Math.floor(m/W.x),n.x=q.x*W.x,w.mapSize.x=q.x),n.y>m&&(q.y=Math.floor(m/W.y),n.y=q.y*W.y,w.mapSize.y=q.y)),w.map===null){const Z=this.type!==f4?{minFilter:o2,magFilter:o2}:{};w.map=new C3(n.x,n.y,Z),w.map.texture.name=N.name+".shadowMap",w.camera.updateProjectionMatrix()}i.setRenderTarget(w.map),i.clear();const j=w.getViewportCount();for(let Z=0;Z<j;Z++){const G=w.getViewport(Z);s.set(q.x*G.x,q.y*G.y,q.x*G.z,q.y*G.w),T.viewport(s),w.updateMatrices(N,Z),l=w.getFrustum(),B(g,F,w.camera,N,this.type)}w.isPointLightShadow!==!0&&this.type===f4&&p(w,F),w.needsUpdate=!1}u.needsUpdate=!1,i.setRenderTarget(z,_,M)};function p(v,g){const F=e.update(d);c.defines.VSM_SAMPLES!==v.blurSamples&&(c.defines.VSM_SAMPLES=v.blurSamples,f.defines.VSM_SAMPLES=v.blurSamples,c.needsUpdate=!0,f.needsUpdate=!0),v.mapPass===null&&(v.mapPass=new C3(n.x,n.y)),c.uniforms.shadow_pass.value=v.map.texture,c.uniforms.resolution.value=v.mapSize,c.uniforms.radius.value=v.radius,i.setRenderTarget(v.mapPass),i.clear(),i.renderBufferDirect(g,null,F,c,d,null),f.uniforms.shadow_pass.value=v.mapPass.texture,f.uniforms.resolution.value=v.mapSize,f.uniforms.radius.value=v.radius,i.setRenderTarget(v.map),i.clear(),i.renderBufferDirect(g,null,F,f,d,null)}function A(v,g,F,z,_,M){let T=null;const X=F.isPointLight===!0?v.customDistanceMaterial:v.customDepthMaterial;if(X!==void 0?T=X:T=F.isPointLight===!0?r:a,i.localClippingEnabled&&g.clipShadows===!0&&Array.isArray(g.clippingPlanes)&&g.clippingPlanes.length!==0||g.displacementMap&&g.displacementScale!==0||g.alphaMap&&g.alphaTest>0){const q1=T.uuid,N=g.uuid;let w=o[q1];w===void 0&&(w={},o[q1]=w);let W=w[N];W===void 0&&(W=T.clone(),w[N]=W),T=W}return T.visible=g.visible,T.wireframe=g.wireframe,M===f4?T.side=g.shadowSide!==null?g.shadowSide:g.side:T.side=g.shadowSide!==null?g.shadowSide:h[g.side],T.alphaMap=g.alphaMap,T.alphaTest=g.alphaTest,T.clipShadows=g.clipShadows,T.clippingPlanes=g.clippingPlanes,T.clipIntersection=g.clipIntersection,T.displacementMap=g.displacementMap,T.displacementScale=g.displacementScale,T.displacementBias=g.displacementBias,T.wireframeLinewidth=g.wireframeLinewidth,T.linewidth=g.linewidth,F.isPointLight===!0&&T.isMeshDistanceMaterial===!0&&(T.referencePosition.setFromMatrixPosition(F.matrixWorld),T.nearDistance=z,T.farDistance=_),T}function B(v,g,F,z,_){if(v.visible===!1)return;if(v.layers.test(g.layers)&&(v.isMesh||v.isLine||v.isPoints)&&(v.castShadow||v.receiveShadow&&_===f4)&&(!v.frustumCulled||l.intersectsObject(v))){v.modelViewMatrix.multiplyMatrices(F.matrixWorldInverse,v.matrixWorld);const X=e.update(v),q1=v.material;if(Array.isArray(q1)){const N=X.groups;for(let w=0,W=N.length;w<W;w++){const j=N[w],Z=q1[j.materialIndex];if(Z&&Z.visible){const G=A(v,Z,z,F.near,F.far,_);i.renderBufferDirect(F,null,X,G,v,j)}}}else if(q1.visible){const N=A(v,q1,z,F.near,F.far,_);i.renderBufferDirect(F,null,X,N,v,null)}}const T=v.children;for(let X=0,q1=T.length;X<q1;X++)B(T[X],g,F,z,_)}}function nq(i,e,t){const l=t.isWebGL2;function n(){let b=!1;const n1=new R1;let O=null;const m1=new R1(0,0,0,0);return{setMask:function(o1){O!==o1&&!b&&(i.colorMask(o1,o1,o1,o1),O=o1)},setLocked:function(o1){b=o1},setClear:function(o1,F1,$1,V1,Z2){Z2===!0&&(o1*=V1,F1*=V1,$1*=V1),n1.set(o1,F1,$1,V1),m1.equals(n1)===!1&&(i.clearColor(o1,F1,$1,V1),m1.copy(n1))},reset:function(){b=!1,O=null,m1.set(-1,0,0,0)}}}function q(){let b=!1,n1=null,O=null,m1=null;return{setTest:function(o1){o1?S1(2929):d1(2929)},setMask:function(o1){n1!==o1&&!b&&(i.depthMask(o1),n1=o1)},setFunc:function(o1){if(O!==o1){if(o1)switch(o1){case E9:i.depthFunc(512);break;case v9:i.depthFunc(519);break;case C9:i.depthFunc(513);break;case o5:i.depthFunc(515);break;case D9:i.depthFunc(514);break;case B9:i.depthFunc(518);break;case y9:i.depthFunc(516);break;case M9:i.depthFunc(517);break;default:i.depthFunc(515)}else i.depthFunc(515);O=o1}},setLocked:function(o1){b=o1},setClear:function(o1){m1!==o1&&(i.clearDepth(o1),m1=o1)},reset:function(){b=!1,n1=null,O=null,m1=null}}}function s(){let b=!1,n1=null,O=null,m1=null,o1=null,F1=null,$1=null,V1=null,Z2=null;return{setTest:function(N1){b||(N1?S1(2960):d1(2960))},setMask:function(N1){n1!==N1&&!b&&(i.stencilMask(N1),n1=N1)},setFunc:function(N1,I2,p2){(O!==N1||m1!==I2||o1!==p2)&&(i.stencilFunc(N1,I2,p2),O=N1,m1=I2,o1=p2)},setOp:function(N1,I2,p2){(F1!==N1||$1!==I2||V1!==p2)&&(i.stencilOp(N1,I2,p2),F1=N1,$1=I2,V1=p2)},setLocked:function(N1){b=N1},setClear:function(N1){Z2!==N1&&(i.clearStencil(N1),Z2=N1)},reset:function(){b=!1,n1=null,O=null,m1=null,o1=null,F1=null,$1=null,V1=null,Z2=null}}}const a=new n,r=new q,o=new s,m=new WeakMap,h=new WeakMap;let c={},f={},x=new WeakMap,d=[],u=null,p=!1,A=null,B=null,v=null,g=null,F=null,z=null,_=null,M=!1,T=null,X=null,q1=null,N=null,w=null;const W=i.getParameter(35661);let j=!1,Z=0;const G=i.getParameter(7938);G.indexOf("WebGL")!==-1?(Z=parseFloat(/^WebGL (\d)/.exec(G)[1]),j=Z>=1):G.indexOf("OpenGL ES")!==-1&&(Z=parseFloat(/^OpenGL ES (\d)/.exec(G)[1]),j=Z>=2);let P=null,I={};const $=i.getParameter(3088),J=i.getParameter(2978),K=new R1().fromArray($),c1=new R1().fromArray(J);function _1(b,n1,O){const m1=new Uint8Array(4),o1=i.createTexture();i.bindTexture(b,o1),i.texParameteri(b,10241,9728),i.texParameteri(b,10240,9728);for(let F1=0;F1<O;F1++)i.texImage2D(n1+F1,0,6408,1,1,0,6408,5121,m1);return o1}const H={};H[3553]=_1(3553,3553,1),H[34067]=_1(34067,34069,6),a.setClear(0,0,0,1),r.setClear(1),o.setClear(0),S1(2929),r.setFunc(o5),Y1(!1),m2(U5),S1(2884),H1(q3);function S1(b){c[b]!==!0&&(i.enable(b),c[b]=!0)}function d1(b){c[b]!==!1&&(i.disable(b),c[b]=!1)}function g1(b,n1){return f[b]!==n1?(i.bindFramebuffer(b,n1),f[b]=n1,l&&(b===36009&&(f[36160]=n1),b===36160&&(f[36009]=n1)),!0):!1}function h1(b,n1){let O=d,m1=!1;if(b)if(O=x.get(n1),O===void 0&&(O=[],x.set(n1,O)),b.isWebGLMultipleRenderTargets){const o1=b.texture;if(O.length!==o1.length||O[0]!==36064){for(let F1=0,$1=o1.length;F1<$1;F1++)O[F1]=36064+F1;O.length=o1.length,m1=!0}}else O[0]!==36064&&(O[0]=36064,m1=!0);else O[0]!==1029&&(O[0]=1029,m1=!0);m1&&(t.isWebGL2?i.drawBuffers(O):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(O))}function w1(b){return u!==b?(i.useProgram(b),u=b,!0):!1}const v1={[j3]:32774,[m9]:32778,[h9]:32779};if(l)v1[H5]=32775,v1[W5]=32776;else{const b=e.get("EXT_blend_minmax");b!==null&&(v1[H5]=b.MIN_EXT,v1[W5]=b.MAX_EXT)}const f1={[c9]:0,[u9]:1,[f9]:768,[d7]:770,[A9]:776,[_9]:774,[x9]:772,[d9]:769,[x7]:771,[g9]:775,[p9]:773};function H1(b,n1,O,m1,o1,F1,$1,V1){if(b===q3){p===!0&&(d1(3042),p=!1);return}if(p===!1&&(S1(3042),p=!0),b!==o9){if(b!==A||V1!==M){if((B!==j3||F!==j3)&&(i.blendEquation(32774),B=j3,F=j3),V1)switch(b){case K3:i.blendFuncSeparate(1,771,1,771);break;case k5:i.blendFunc(1,1);break;case G5:i.blendFuncSeparate(0,769,0,1);break;case V5:i.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}else switch(b){case K3:i.blendFuncSeparate(770,771,1,771);break;case k5:i.blendFunc(770,1);break;case G5:i.blendFuncSeparate(0,769,0,1);break;case V5:i.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}v=null,g=null,z=null,_=null,A=b,M=V1}return}o1=o1||n1,F1=F1||O,$1=$1||m1,(n1!==B||o1!==F)&&(i.blendEquationSeparate(v1[n1],v1[o1]),B=n1,F=o1),(O!==v||m1!==g||F1!==z||$1!==_)&&(i.blendFuncSeparate(f1[O],f1[m1],f1[F1],f1[$1]),v=O,g=m1,z=F1,_=$1),A=b,M=null}function Q1(b,n1){b.side===w2?d1(2884):S1(2884);let O=b.side===v2;n1&&(O=!O),Y1(O),b.blending===K3&&b.transparent===!1?H1(q3):H1(b.blending,b.blendEquation,b.blendSrc,b.blendDst,b.blendEquationAlpha,b.blendSrcAlpha,b.blendDstAlpha,b.premultipliedAlpha),r.setFunc(b.depthFunc),r.setTest(b.depthTest),r.setMask(b.depthWrite),a.setMask(b.colorWrite);const m1=b.stencilWrite;o.setTest(m1),m1&&(o.setMask(b.stencilWriteMask),o.setFunc(b.stencilFunc,b.stencilRef,b.stencilFuncMask),o.setOp(b.stencilFail,b.stencilZFail,b.stencilZPass)),T1(b.polygonOffset,b.polygonOffsetFactor,b.polygonOffsetUnits),b.alphaToCoverage===!0?S1(32926):d1(32926)}function Y1(b){T!==b&&(b?i.frontFace(2304):i.frontFace(2305),T=b)}function m2(b){b!==a9?(S1(2884),b!==X&&(b===U5?i.cullFace(1029):b===s9?i.cullFace(1028):i.cullFace(1032))):d1(2884),X=b}function j1(b){b!==q1&&(j&&i.lineWidth(b),q1=b)}function T1(b,n1,O){b?(S1(32823),(N!==n1||w!==O)&&(i.polygonOffset(n1,O),N=n1,w=O)):d1(32823)}function x2(b){b?S1(3089):d1(3089)}function h2(b){b===void 0&&(b=33984+W-1),P!==b&&(i.activeTexture(b),P=b)}function y(b,n1){P===null&&h2();let O=I[P];O===void 0&&(O={type:void 0,texture:void 0},I[P]=O),(O.type!==b||O.texture!==n1)&&(i.bindTexture(b,n1||H[b]),O.type=b,O.texture=n1)}function E(){const b=I[P];b!==void 0&&b.type!==void 0&&(i.bindTexture(b.type,null),b.type=void 0,b.texture=void 0)}function U(){try{i.compressedTexImage2D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function Q(){try{i.texSubImage2D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function e1(){try{i.texSubImage3D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function a1(){try{i.compressedTexSubImage2D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function x1(){try{i.texStorage2D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function C(){try{i.texStorage3D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function Y(){try{i.texImage2D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function t1(){try{i.texImage3D.apply(i,arguments)}catch(b){console.error("THREE.WebGLState:",b)}}function s1(b){K.equals(b)===!1&&(i.scissor(b.x,b.y,b.z,b.w),K.copy(b))}function i1(b){c1.equals(b)===!1&&(i.viewport(b.x,b.y,b.z,b.w),c1.copy(b))}function p1(b,n1){let O=h.get(n1);O===void 0&&(O=new WeakMap,h.set(n1,O));let m1=O.get(b);m1===void 0&&(m1=i.getUniformBlockIndex(n1,b.name),O.set(b,m1))}function B1(b,n1){const m1=h.get(n1).get(b);m.get(b)!==m1&&(i.uniformBlockBinding(n1,m1,b.__bindingPointIndex),m.set(b,m1))}function P1(){i.disable(3042),i.disable(2884),i.disable(2929),i.disable(32823),i.disable(3089),i.disable(2960),i.disable(32926),i.blendEquation(32774),i.blendFunc(1,0),i.blendFuncSeparate(1,0,1,0),i.colorMask(!0,!0,!0,!0),i.clearColor(0,0,0,0),i.depthMask(!0),i.depthFunc(513),i.clearDepth(1),i.stencilMask(4294967295),i.stencilFunc(519,0,4294967295),i.stencilOp(7680,7680,7680),i.clearStencil(0),i.cullFace(1029),i.frontFace(2305),i.polygonOffset(0,0),i.activeTexture(33984),i.bindFramebuffer(36160,null),l===!0&&(i.bindFramebuffer(36009,null),i.bindFramebuffer(36008,null)),i.useProgram(null),i.lineWidth(1),i.scissor(0,0,i.canvas.width,i.canvas.height),i.viewport(0,0,i.canvas.width,i.canvas.height),c={},P=null,I={},f={},x=new WeakMap,d=[],u=null,p=!1,A=null,B=null,v=null,g=null,F=null,z=null,_=null,M=!1,T=null,X=null,q1=null,N=null,w=null,K.set(0,0,i.canvas.width,i.canvas.height),c1.set(0,0,i.canvas.width,i.canvas.height),a.reset(),r.reset(),o.reset()}return{buffers:{color:a,depth:r,stencil:o},enable:S1,disable:d1,bindFramebuffer:g1,drawBuffers:h1,useProgram:w1,setBlending:H1,setMaterial:Q1,setFlipSided:Y1,setCullFace:m2,setLineWidth:j1,setPolygonOffset:T1,setScissorTest:x2,activeTexture:h2,bindTexture:y,unbindTexture:E,compressedTexImage2D:U,texImage2D:Y,texImage3D:t1,updateUBOMapping:p1,uniformBlockBinding:B1,texStorage2D:x1,texStorage3D:C,texSubImage2D:Q,texSubImage3D:e1,compressedTexSubImage2D:a1,scissor:s1,viewport:i1,reset:P1}}function qq(i,e,t,l,n,q,s){const a=n.isWebGL2,r=n.maxTextures,o=n.maxCubemapSize,m=n.maxTextureSize,h=n.maxSamples,c=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,f=/OculusBrowser/g.test(navigator.userAgent),x=new WeakMap;let d;const u=new WeakMap;let p=!1;try{p=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function A(y,E){return p?new OffscreenCanvas(y,E):C4("canvas")}function B(y,E,U,Q){let e1=1;if((y.width>Q||y.height>Q)&&(e1=Q/Math.max(y.width,y.height)),e1<1||E===!0)if(typeof HTMLImageElement<"u"&&y instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&y instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&y instanceof ImageBitmap){const a1=E?h6:Math.floor,x1=a1(e1*y.width),C=a1(e1*y.height);d===void 0&&(d=A(x1,C));const Y=U?A(x1,C):d;return Y.width=x1,Y.height=C,Y.getContext("2d").drawImage(y,0,0,x1,C),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+y.width+"x"+y.height+") to ("+x1+"x"+C+")."),Y}else return"data"in y&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+y.width+"x"+y.height+")."),y;return y}function v(y){return d5(y.width)&&d5(y.height)}function g(y){return a?!1:y.wrapS!==S2||y.wrapT!==S2||y.minFilter!==o2&&y.minFilter!==A2}function F(y,E){return y.generateMipmaps&&E&&y.minFilter!==o2&&y.minFilter!==A2}function z(y){i.generateMipmap(y)}function _(y,E,U,Q,e1=!1){if(a===!1)return E;if(y!==null){if(i[y]!==void 0)return i[y];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+y+"'")}let a1=E;return E===6403&&(U===5126&&(a1=33326),U===5131&&(a1=33325),U===5121&&(a1=33321)),E===33319&&(U===5126&&(a1=33328),U===5131&&(a1=33327),U===5121&&(a1=33323)),E===6408&&(U===5126&&(a1=34836),U===5131&&(a1=34842),U===5121&&(a1=Q===U1&&e1===!1?35907:32856),U===32819&&(a1=32854),U===32820&&(a1=32855)),(a1===33325||a1===33326||a1===33327||a1===33328||a1===34842||a1===34836)&&e.get("EXT_color_buffer_float"),a1}function M(y,E,U){return F(y,U)===!0||y.isFramebufferTexture&&y.minFilter!==o2&&y.minFilter!==A2?Math.log2(Math.max(E.width,E.height))+1:y.mipmaps!==void 0&&y.mipmaps.length>0?y.mipmaps.length:y.isCompressedTexture&&Array.isArray(y.image)?E.mipmaps.length:1}function T(y){return y===o2||y===X5||y===Y5?9728:9729}function X(y){const E=y.target;E.removeEventListener("dispose",X),N(E),E.isVideoTexture&&x.delete(E)}function q1(y){const E=y.target;E.removeEventListener("dispose",q1),W(E)}function N(y){const E=l.get(y);if(E.__webglInit===void 0)return;const U=y.source,Q=u.get(U);if(Q){const e1=Q[E.__cacheKey];e1.usedTimes--,e1.usedTimes===0&&w(y),Object.keys(Q).length===0&&u.delete(U)}l.remove(y)}function w(y){const E=l.get(y);i.deleteTexture(E.__webglTexture);const U=y.source,Q=u.get(U);delete Q[E.__cacheKey],s.memory.textures--}function W(y){const E=y.texture,U=l.get(y),Q=l.get(E);if(Q.__webglTexture!==void 0&&(i.deleteTexture(Q.__webglTexture),s.memory.textures--),y.depthTexture&&y.depthTexture.dispose(),y.isWebGLCubeRenderTarget)for(let e1=0;e1<6;e1++)i.deleteFramebuffer(U.__webglFramebuffer[e1]),U.__webglDepthbuffer&&i.deleteRenderbuffer(U.__webglDepthbuffer[e1]);else{if(i.deleteFramebuffer(U.__webglFramebuffer),U.__webglDepthbuffer&&i.deleteRenderbuffer(U.__webglDepthbuffer),U.__webglMultisampledFramebuffer&&i.deleteFramebuffer(U.__webglMultisampledFramebuffer),U.__webglColorRenderbuffer)for(let e1=0;e1<U.__webglColorRenderbuffer.length;e1++)U.__webglColorRenderbuffer[e1]&&i.deleteRenderbuffer(U.__webglColorRenderbuffer[e1]);U.__webglDepthRenderbuffer&&i.deleteRenderbuffer(U.__webglDepthRenderbuffer)}if(y.isWebGLMultipleRenderTargets)for(let e1=0,a1=E.length;e1<a1;e1++){const x1=l.get(E[e1]);x1.__webglTexture&&(i.deleteTexture(x1.__webglTexture),s.memory.textures--),l.remove(E[e1])}l.remove(E),l.remove(y)}let j=0;function Z(){j=0}function G(){const y=j;return y>=r&&console.warn("THREE.WebGLTextures: Trying to use "+y+" texture units while this GPU supports only "+r),j+=1,y}function P(y){const E=[];return E.push(y.wrapS),E.push(y.wrapT),E.push(y.magFilter),E.push(y.minFilter),E.push(y.anisotropy),E.push(y.internalFormat),E.push(y.format),E.push(y.type),E.push(y.generateMipmaps),E.push(y.premultiplyAlpha),E.push(y.flipY),E.push(y.unpackAlignment),E.push(y.encoding),E.join()}function I(y,E){const U=l.get(y);if(y.isVideoTexture&&x2(y),y.isRenderTargetTexture===!1&&y.version>0&&U.__version!==y.version){const Q=y.image;if(Q===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(Q.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{d1(U,y,E);return}}t.activeTexture(33984+E),t.bindTexture(3553,U.__webglTexture)}function $(y,E){const U=l.get(y);if(y.version>0&&U.__version!==y.version){d1(U,y,E);return}t.activeTexture(33984+E),t.bindTexture(35866,U.__webglTexture)}function J(y,E){const U=l.get(y);if(y.version>0&&U.__version!==y.version){d1(U,y,E);return}t.activeTexture(33984+E),t.bindTexture(32879,U.__webglTexture)}function K(y,E){const U=l.get(y);if(y.version>0&&U.__version!==y.version){g1(U,y,E);return}t.activeTexture(33984+E),t.bindTexture(34067,U.__webglTexture)}const c1={[c5]:10497,[S2]:33071,[u5]:33648},_1={[o2]:9728,[X5]:9984,[Y5]:9986,[A2]:9729,[P9]:9985,[d6]:9987};function H(y,E,U){if(U?(i.texParameteri(y,10242,c1[E.wrapS]),i.texParameteri(y,10243,c1[E.wrapT]),(y===32879||y===35866)&&i.texParameteri(y,32882,c1[E.wrapR]),i.texParameteri(y,10240,_1[E.magFilter]),i.texParameteri(y,10241,_1[E.minFilter])):(i.texParameteri(y,10242,33071),i.texParameteri(y,10243,33071),(y===32879||y===35866)&&i.texParameteri(y,32882,33071),(E.wrapS!==S2||E.wrapT!==S2)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),i.texParameteri(y,10240,T(E.magFilter)),i.texParameteri(y,10241,T(E.minFilter)),E.minFilter!==o2&&E.minFilter!==A2&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const Q=e.get("EXT_texture_filter_anisotropic");if(E.type===p3&&e.has("OES_texture_float_linear")===!1||a===!1&&E.type===v4&&e.has("OES_texture_half_float_linear")===!1)return;(E.anisotropy>1||l.get(E).__currentAnisotropy)&&(i.texParameterf(y,Q.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(E.anisotropy,n.getMaxAnisotropy())),l.get(E).__currentAnisotropy=E.anisotropy)}}function S1(y,E){let U=!1;y.__webglInit===void 0&&(y.__webglInit=!0,E.addEventListener("dispose",X));const Q=E.source;let e1=u.get(Q);e1===void 0&&(e1={},u.set(Q,e1));const a1=P(E);if(a1!==y.__cacheKey){e1[a1]===void 0&&(e1[a1]={texture:i.createTexture(),usedTimes:0},s.memory.textures++,U=!0),e1[a1].usedTimes++;const x1=e1[y.__cacheKey];x1!==void 0&&(e1[y.__cacheKey].usedTimes--,x1.usedTimes===0&&w(E)),y.__cacheKey=a1,y.__webglTexture=e1[a1].texture}return U}function d1(y,E,U){let Q=3553;E.isDataArrayTexture&&(Q=35866),E.isData3DTexture&&(Q=32879);const e1=S1(y,E),a1=E.source;if(t.activeTexture(33984+U),t.bindTexture(Q,y.__webglTexture),a1.version!==a1.__currentVersion||e1===!0){i.pixelStorei(37440,E.flipY),i.pixelStorei(37441,E.premultiplyAlpha),i.pixelStorei(3317,E.unpackAlignment),i.pixelStorei(37443,0);const x1=g(E)&&v(E.image)===!1;let C=B(E.image,x1,!1,m);C=h2(E,C);const Y=v(C)||a,t1=q.convert(E.format,E.encoding);let s1=q.convert(E.type),i1=_(E.internalFormat,t1,s1,E.encoding,E.isVideoTexture);H(Q,E,Y);let p1;const B1=E.mipmaps,P1=a&&E.isVideoTexture!==!0,b=a1.__currentVersion===void 0||e1===!0,n1=M(E,C,Y);if(E.isDepthTexture)i1=6402,a?E.type===p3?i1=36012:E.type===x3?i1=33190:E.type===Q3?i1=35056:i1=33189:E.type===p3&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),E.format===g3&&i1===6402&&E.type!==_7&&E.type!==x3&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),E.type=x3,s1=q.convert(E.type)),E.format===n4&&i1===6402&&(i1=34041,E.type!==Q3&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),E.type=Q3,s1=q.convert(E.type))),b&&(P1?t.texStorage2D(3553,1,i1,C.width,C.height):t.texImage2D(3553,0,i1,C.width,C.height,0,t1,s1,null));else if(E.isDataTexture)if(B1.length>0&&Y){P1&&b&&t.texStorage2D(3553,n1,i1,B1[0].width,B1[0].height);for(let O=0,m1=B1.length;O<m1;O++)p1=B1[O],P1?t.texSubImage2D(3553,O,0,0,p1.width,p1.height,t1,s1,p1.data):t.texImage2D(3553,O,i1,p1.width,p1.height,0,t1,s1,p1.data);E.generateMipmaps=!1}else P1?(b&&t.texStorage2D(3553,n1,i1,C.width,C.height),t.texSubImage2D(3553,0,0,0,C.width,C.height,t1,s1,C.data)):t.texImage2D(3553,0,i1,C.width,C.height,0,t1,s1,C.data);else if(E.isCompressedTexture){P1&&b&&t.texStorage2D(3553,n1,i1,B1[0].width,B1[0].height);for(let O=0,m1=B1.length;O<m1;O++)p1=B1[O],E.format!==T2?t1!==null?P1?t.compressedTexSubImage2D(3553,O,0,0,p1.width,p1.height,t1,p1.data):t.compressedTexImage2D(3553,O,i1,p1.width,p1.height,0,p1.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):P1?t.texSubImage2D(3553,O,0,0,p1.width,p1.height,t1,s1,p1.data):t.texImage2D(3553,O,i1,p1.width,p1.height,0,t1,s1,p1.data)}else if(E.isDataArrayTexture)P1?(b&&t.texStorage3D(35866,n1,i1,C.width,C.height,C.depth),t.texSubImage3D(35866,0,0,0,0,C.width,C.height,C.depth,t1,s1,C.data)):t.texImage3D(35866,0,i1,C.width,C.height,C.depth,0,t1,s1,C.data);else if(E.isData3DTexture)P1?(b&&t.texStorage3D(32879,n1,i1,C.width,C.height,C.depth),t.texSubImage3D(32879,0,0,0,0,C.width,C.height,C.depth,t1,s1,C.data)):t.texImage3D(32879,0,i1,C.width,C.height,C.depth,0,t1,s1,C.data);else if(E.isFramebufferTexture){if(b)if(P1)t.texStorage2D(3553,n1,i1,C.width,C.height);else{let O=C.width,m1=C.height;for(let o1=0;o1<n1;o1++)t.texImage2D(3553,o1,i1,O,m1,0,t1,s1,null),O>>=1,m1>>=1}}else if(B1.length>0&&Y){P1&&b&&t.texStorage2D(3553,n1,i1,B1[0].width,B1[0].height);for(let O=0,m1=B1.length;O<m1;O++)p1=B1[O],P1?t.texSubImage2D(3553,O,0,0,t1,s1,p1):t.texImage2D(3553,O,i1,t1,s1,p1);E.generateMipmaps=!1}else P1?(b&&t.texStorage2D(3553,n1,i1,C.width,C.height),t.texSubImage2D(3553,0,0,0,t1,s1,C)):t.texImage2D(3553,0,i1,t1,s1,C);F(E,Y)&&z(Q),a1.__currentVersion=a1.version,E.onUpdate&&E.onUpdate(E)}y.__version=E.version}function g1(y,E,U){if(E.image.length!==6)return;const Q=S1(y,E),e1=E.source;if(t.activeTexture(33984+U),t.bindTexture(34067,y.__webglTexture),e1.version!==e1.__currentVersion||Q===!0){i.pixelStorei(37440,E.flipY),i.pixelStorei(37441,E.premultiplyAlpha),i.pixelStorei(3317,E.unpackAlignment),i.pixelStorei(37443,0);const a1=E.isCompressedTexture||E.image[0].isCompressedTexture,x1=E.image[0]&&E.image[0].isDataTexture,C=[];for(let O=0;O<6;O++)!a1&&!x1?C[O]=B(E.image[O],!1,!0,o):C[O]=x1?E.image[O].image:E.image[O],C[O]=h2(E,C[O]);const Y=C[0],t1=v(Y)||a,s1=q.convert(E.format,E.encoding),i1=q.convert(E.type),p1=_(E.internalFormat,s1,i1,E.encoding),B1=a&&E.isVideoTexture!==!0,P1=e1.__currentVersion===void 0||Q===!0;let b=M(E,Y,t1);H(34067,E,t1);let n1;if(a1){B1&&P1&&t.texStorage2D(34067,b,p1,Y.width,Y.height);for(let O=0;O<6;O++){n1=C[O].mipmaps;for(let m1=0;m1<n1.length;m1++){const o1=n1[m1];E.format!==T2?s1!==null?B1?t.compressedTexSubImage2D(34069+O,m1,0,0,o1.width,o1.height,s1,o1.data):t.compressedTexImage2D(34069+O,m1,p1,o1.width,o1.height,0,o1.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):B1?t.texSubImage2D(34069+O,m1,0,0,o1.width,o1.height,s1,i1,o1.data):t.texImage2D(34069+O,m1,p1,o1.width,o1.height,0,s1,i1,o1.data)}}}else{n1=E.mipmaps,B1&&P1&&(n1.length>0&&b++,t.texStorage2D(34067,b,p1,C[0].width,C[0].height));for(let O=0;O<6;O++)if(x1){B1?t.texSubImage2D(34069+O,0,0,0,C[O].width,C[O].height,s1,i1,C[O].data):t.texImage2D(34069+O,0,p1,C[O].width,C[O].height,0,s1,i1,C[O].data);for(let m1=0;m1<n1.length;m1++){const F1=n1[m1].image[O].image;B1?t.texSubImage2D(34069+O,m1+1,0,0,F1.width,F1.height,s1,i1,F1.data):t.texImage2D(34069+O,m1+1,p1,F1.width,F1.height,0,s1,i1,F1.data)}}else{B1?t.texSubImage2D(34069+O,0,0,0,s1,i1,C[O]):t.texImage2D(34069+O,0,p1,s1,i1,C[O]);for(let m1=0;m1<n1.length;m1++){const o1=n1[m1];B1?t.texSubImage2D(34069+O,m1+1,0,0,s1,i1,o1.image[O]):t.texImage2D(34069+O,m1+1,p1,s1,i1,o1.image[O])}}}F(E,t1)&&z(34067),e1.__currentVersion=e1.version,E.onUpdate&&E.onUpdate(E)}y.__version=E.version}function h1(y,E,U,Q,e1){const a1=q.convert(U.format,U.encoding),x1=q.convert(U.type),C=_(U.internalFormat,a1,x1,U.encoding);l.get(E).__hasExternalTextures||(e1===32879||e1===35866?t.texImage3D(e1,0,C,E.width,E.height,E.depth,0,a1,x1,null):t.texImage2D(e1,0,C,E.width,E.height,0,a1,x1,null)),t.bindFramebuffer(36160,y),T1(E)?c.framebufferTexture2DMultisampleEXT(36160,Q,e1,l.get(U).__webglTexture,0,j1(E)):i.framebufferTexture2D(36160,Q,e1,l.get(U).__webglTexture,0),t.bindFramebuffer(36160,null)}function w1(y,E,U){if(i.bindRenderbuffer(36161,y),E.depthBuffer&&!E.stencilBuffer){let Q=33189;if(U||T1(E)){const e1=E.depthTexture;e1&&e1.isDepthTexture&&(e1.type===p3?Q=36012:e1.type===x3&&(Q=33190));const a1=j1(E);T1(E)?c.renderbufferStorageMultisampleEXT(36161,a1,Q,E.width,E.height):i.renderbufferStorageMultisample(36161,a1,Q,E.width,E.height)}else i.renderbufferStorage(36161,Q,E.width,E.height);i.framebufferRenderbuffer(36160,36096,36161,y)}else if(E.depthBuffer&&E.stencilBuffer){const Q=j1(E);U&&T1(E)===!1?i.renderbufferStorageMultisample(36161,Q,35056,E.width,E.height):T1(E)?c.renderbufferStorageMultisampleEXT(36161,Q,35056,E.width,E.height):i.renderbufferStorage(36161,34041,E.width,E.height),i.framebufferRenderbuffer(36160,33306,36161,y)}else{const Q=E.isWebGLMultipleRenderTargets===!0?E.texture:[E.texture];for(let e1=0;e1<Q.length;e1++){const a1=Q[e1],x1=q.convert(a1.format,a1.encoding),C=q.convert(a1.type),Y=_(a1.internalFormat,x1,C,a1.encoding),t1=j1(E);U&&T1(E)===!1?i.renderbufferStorageMultisample(36161,t1,Y,E.width,E.height):T1(E)?c.renderbufferStorageMultisampleEXT(36161,t1,Y,E.width,E.height):i.renderbufferStorage(36161,Y,E.width,E.height)}}i.bindRenderbuffer(36161,null)}function v1(y,E){if(E&&E.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,y),!(E.depthTexture&&E.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!l.get(E.depthTexture).__webglTexture||E.depthTexture.image.width!==E.width||E.depthTexture.image.height!==E.height)&&(E.depthTexture.image.width=E.width,E.depthTexture.image.height=E.height,E.depthTexture.needsUpdate=!0),I(E.depthTexture,0);const Q=l.get(E.depthTexture).__webglTexture,e1=j1(E);if(E.depthTexture.format===g3)T1(E)?c.framebufferTexture2DMultisampleEXT(36160,36096,3553,Q,0,e1):i.framebufferTexture2D(36160,36096,3553,Q,0);else if(E.depthTexture.format===n4)T1(E)?c.framebufferTexture2DMultisampleEXT(36160,33306,3553,Q,0,e1):i.framebufferTexture2D(36160,33306,3553,Q,0);else throw new Error("Unknown depthTexture format")}function f1(y){const E=l.get(y),U=y.isWebGLCubeRenderTarget===!0;if(y.depthTexture&&!E.__autoAllocateDepthBuffer){if(U)throw new Error("target.depthTexture not supported in Cube render targets");v1(E.__webglFramebuffer,y)}else if(U){E.__webglDepthbuffer=[];for(let Q=0;Q<6;Q++)t.bindFramebuffer(36160,E.__webglFramebuffer[Q]),E.__webglDepthbuffer[Q]=i.createRenderbuffer(),w1(E.__webglDepthbuffer[Q],y,!1)}else t.bindFramebuffer(36160,E.__webglFramebuffer),E.__webglDepthbuffer=i.createRenderbuffer(),w1(E.__webglDepthbuffer,y,!1);t.bindFramebuffer(36160,null)}function H1(y,E,U){const Q=l.get(y);E!==void 0&&h1(Q.__webglFramebuffer,y,y.texture,36064,3553),U!==void 0&&f1(y)}function Q1(y){const E=y.texture,U=l.get(y),Q=l.get(E);y.addEventListener("dispose",q1),y.isWebGLMultipleRenderTargets!==!0&&(Q.__webglTexture===void 0&&(Q.__webglTexture=i.createTexture()),Q.__version=E.version,s.memory.textures++);const e1=y.isWebGLCubeRenderTarget===!0,a1=y.isWebGLMultipleRenderTargets===!0,x1=v(y)||a;if(e1){U.__webglFramebuffer=[];for(let C=0;C<6;C++)U.__webglFramebuffer[C]=i.createFramebuffer()}else{if(U.__webglFramebuffer=i.createFramebuffer(),a1)if(n.drawBuffers){const C=y.texture;for(let Y=0,t1=C.length;Y<t1;Y++){const s1=l.get(C[Y]);s1.__webglTexture===void 0&&(s1.__webglTexture=i.createTexture(),s.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(a&&y.samples>0&&T1(y)===!1){const C=a1?E:[E];U.__webglMultisampledFramebuffer=i.createFramebuffer(),U.__webglColorRenderbuffer=[],t.bindFramebuffer(36160,U.__webglMultisampledFramebuffer);for(let Y=0;Y<C.length;Y++){const t1=C[Y];U.__webglColorRenderbuffer[Y]=i.createRenderbuffer(),i.bindRenderbuffer(36161,U.__webglColorRenderbuffer[Y]);const s1=q.convert(t1.format,t1.encoding),i1=q.convert(t1.type),p1=_(t1.internalFormat,s1,i1,t1.encoding),B1=j1(y);i.renderbufferStorageMultisample(36161,B1,p1,y.width,y.height),i.framebufferRenderbuffer(36160,36064+Y,36161,U.__webglColorRenderbuffer[Y])}i.bindRenderbuffer(36161,null),y.depthBuffer&&(U.__webglDepthRenderbuffer=i.createRenderbuffer(),w1(U.__webglDepthRenderbuffer,y,!0)),t.bindFramebuffer(36160,null)}}if(e1){t.bindTexture(34067,Q.__webglTexture),H(34067,E,x1);for(let C=0;C<6;C++)h1(U.__webglFramebuffer[C],y,E,36064,34069+C);F(E,x1)&&z(34067),t.unbindTexture()}else if(a1){const C=y.texture;for(let Y=0,t1=C.length;Y<t1;Y++){const s1=C[Y],i1=l.get(s1);t.bindTexture(3553,i1.__webglTexture),H(3553,s1,x1),h1(U.__webglFramebuffer,y,s1,36064+Y,3553),F(s1,x1)&&z(3553)}t.unbindTexture()}else{let C=3553;(y.isWebGL3DRenderTarget||y.isWebGLArrayRenderTarget)&&(a?C=y.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(C,Q.__webglTexture),H(C,E,x1),h1(U.__webglFramebuffer,y,E,36064,C),F(E,x1)&&z(C),t.unbindTexture()}y.depthBuffer&&f1(y)}function Y1(y){const E=v(y)||a,U=y.isWebGLMultipleRenderTargets===!0?y.texture:[y.texture];for(let Q=0,e1=U.length;Q<e1;Q++){const a1=U[Q];if(F(a1,E)){const x1=y.isWebGLCubeRenderTarget?34067:3553,C=l.get(a1).__webglTexture;t.bindTexture(x1,C),z(x1),t.unbindTexture()}}}function m2(y){if(a&&y.samples>0&&T1(y)===!1){const E=y.isWebGLMultipleRenderTargets?y.texture:[y.texture],U=y.width,Q=y.height;let e1=16384;const a1=[],x1=y.stencilBuffer?33306:36096,C=l.get(y),Y=y.isWebGLMultipleRenderTargets===!0;if(Y)for(let t1=0;t1<E.length;t1++)t.bindFramebuffer(36160,C.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(36160,36064+t1,36161,null),t.bindFramebuffer(36160,C.__webglFramebuffer),i.framebufferTexture2D(36009,36064+t1,3553,null,0);t.bindFramebuffer(36008,C.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,C.__webglFramebuffer);for(let t1=0;t1<E.length;t1++){a1.push(36064+t1),y.depthBuffer&&a1.push(x1);const s1=C.__ignoreDepthValues!==void 0?C.__ignoreDepthValues:!1;if(s1===!1&&(y.depthBuffer&&(e1|=256),y.stencilBuffer&&(e1|=1024)),Y&&i.framebufferRenderbuffer(36008,36064,36161,C.__webglColorRenderbuffer[t1]),s1===!0&&(i.invalidateFramebuffer(36008,[x1]),i.invalidateFramebuffer(36009,[x1])),Y){const i1=l.get(E[t1]).__webglTexture;i.framebufferTexture2D(36009,36064,3553,i1,0)}i.blitFramebuffer(0,0,U,Q,0,0,U,Q,e1,9728),f&&i.invalidateFramebuffer(36008,a1)}if(t.bindFramebuffer(36008,null),t.bindFramebuffer(36009,null),Y)for(let t1=0;t1<E.length;t1++){t.bindFramebuffer(36160,C.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(36160,36064+t1,36161,C.__webglColorRenderbuffer[t1]);const s1=l.get(E[t1]).__webglTexture;t.bindFramebuffer(36160,C.__webglFramebuffer),i.framebufferTexture2D(36009,36064+t1,3553,s1,0)}t.bindFramebuffer(36009,C.__webglMultisampledFramebuffer)}}function j1(y){return Math.min(h,y.samples)}function T1(y){const E=l.get(y);return a&&y.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&E.__useRenderToTexture!==!1}function x2(y){const E=s.render.frame;x.get(y)!==E&&(x.set(y,E),y.update())}function h2(y,E){const U=y.encoding,Q=y.format,e1=y.type;return y.isCompressedTexture===!0||y.isVideoTexture===!0||y.format===f5||U!==v3&&(U===U1?a===!1?e.has("EXT_sRGB")===!0&&Q===T2?(y.format=f5,y.minFilter=A2,y.generateMipmaps=!1):E=E7.sRGBToLinear(E):(Q!==T2||e1!==E3)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",U)),E}this.allocateTextureUnit=G,this.resetTextureUnits=Z,this.setTexture2D=I,this.setTexture2DArray=$,this.setTexture3D=J,this.setTextureCube=K,this.rebindTextures=H1,this.setupRenderTarget=Q1,this.updateRenderTargetMipmap=Y1,this.updateMultisampleRenderTarget=m2,this.setupDepthRenderbuffer=f1,this.setupFrameBufferTexture=h1,this.useMultisampledRTT=T1}function iq(i,e,t){const l=t.isWebGL2;function n(q,s=null){let a;if(q===E3)return 5121;if(q===O9)return 32819;if(q===U9)return 32820;if(q===R9)return 5120;if(q===I9)return 5122;if(q===_7)return 5123;if(q===N9)return 5124;if(q===x3)return 5125;if(q===p3)return 5126;if(q===v4)return l?5131:(a=e.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(q===k9)return 6406;if(q===T2)return 6408;if(q===V9)return 6409;if(q===H9)return 6410;if(q===g3)return 6402;if(q===n4)return 34041;if(q===W9)return 6403;if(q===G9)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(q===f5)return a=e.get("EXT_sRGB"),a!==null?a.SRGB_ALPHA_EXT:null;if(q===X9)return 36244;if(q===Y9)return 33319;if(q===j9)return 33320;if(q===Z9)return 36249;if(q===M6||q===F6||q===S6||q===b6)if(s===U1)if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(q===M6)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(q===F6)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(q===S6)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(q===b6)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(q===M6)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(q===F6)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(q===S6)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(q===b6)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(q===j5||q===Z5||q===J5||q===$5)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(q===j5)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(q===Z5)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(q===J5)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(q===$5)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(q===J9)return a=e.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(q===K5||q===Q5)if(a=e.get("WEBGL_compressed_texture_etc"),a!==null){if(q===K5)return s===U1?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(q===Q5)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(q===e8||q===t8||q===l8||q===n8||q===q8||q===i8||q===a8||q===s8||q===r8||q===o8||q===m8||q===h8||q===c8||q===u8)if(a=e.get("WEBGL_compressed_texture_astc"),a!==null){if(q===e8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(q===t8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(q===l8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(q===n8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(q===q8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(q===i8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(q===a8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(q===s8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(q===r8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(q===o8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(q===m8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(q===h8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(q===c8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(q===u8)return s===U1?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(q===f8)if(a=e.get("EXT_texture_compression_bptc"),a!==null){if(q===f8)return s===U1?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;return q===Q3?l?34042:(a=e.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null):i[q]!==void 0?i[q]:null}return{convert:n}}class aq extends d2{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class Q4 extends J1{constructor(){super(),this.isGroup=!0,this.type="Group"}}const sq={type:"move"};class l5{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Q4,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Q4,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new S,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new S),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Q4,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new S,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new S),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,l){let n=null,q=null,s=null;const a=this._targetRay,r=this._grip,o=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(o&&e.hand){s=!0;for(const d of e.hand.values()){const u=t.getJointPose(d,l);if(o.joints[d.jointName]===void 0){const A=new Q4;A.matrixAutoUpdate=!1,A.visible=!1,o.joints[d.jointName]=A,o.add(A)}const p=o.joints[d.jointName];u!==null&&(p.matrix.fromArray(u.transform.matrix),p.matrix.decompose(p.position,p.rotation,p.scale),p.jointRadius=u.radius),p.visible=u!==null}const m=o.joints["index-finger-tip"],h=o.joints["thumb-tip"],c=m.position.distanceTo(h.position),f=.02,x=.005;o.inputState.pinching&&c>f+x?(o.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!o.inputState.pinching&&c<=f-x&&(o.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else r!==null&&e.gripSpace&&(q=t.getPose(e.gripSpace,l),q!==null&&(r.matrix.fromArray(q.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),q.linearVelocity?(r.hasLinearVelocity=!0,r.linearVelocity.copy(q.linearVelocity)):r.hasLinearVelocity=!1,q.angularVelocity?(r.hasAngularVelocity=!0,r.angularVelocity.copy(q.angularVelocity)):r.hasAngularVelocity=!1));a!==null&&(n=t.getPose(e.targetRaySpace,l),n===null&&q!==null&&(n=q),n!==null&&(a.matrix.fromArray(n.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),n.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(n.linearVelocity)):a.hasLinearVelocity=!1,n.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(n.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(sq)))}return a!==null&&(a.visible=n!==null),r!==null&&(r.visible=q!==null),o!==null&&(o.visible=s!==null),this}}class rq extends C2{constructor(e,t,l,n,q,s,a,r,o,m){if(m=m!==void 0?m:g3,m!==g3&&m!==n4)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");l===void 0&&m===g3&&(l=x3),l===void 0&&m===n4&&(l=Q3),super(null,n,q,s,a,r,m,l,o),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=a!==void 0?a:o2,this.minFilter=r!==void 0?r:o2,this.flipY=!1,this.generateMipmaps=!1}}class oq extends y3{constructor(e,t){super();const l=this;let n=null,q=1,s=null,a="local-floor",r=null,o=null,m=null,h=null,c=null,f=null;const x=t.getContextAttributes();let d=null,u=null;const p=[],A=[],B=new d2;B.layers.enable(1),B.viewport=new R1;const v=new d2;v.layers.enable(2),v.viewport=new R1;const g=[B,v],F=new aq;F.layers.enable(1),F.layers.enable(2);let z=null,_=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(P){let I=p[P];return I===void 0&&(I=new l5,p[P]=I),I.getTargetRaySpace()},this.getControllerGrip=function(P){let I=p[P];return I===void 0&&(I=new l5,p[P]=I),I.getGripSpace()},this.getHand=function(P){let I=p[P];return I===void 0&&(I=new l5,p[P]=I),I.getHandSpace()};function M(P){const I=A.indexOf(P.inputSource);if(I===-1)return;const $=p[I];$!==void 0&&$.dispatchEvent({type:P.type,data:P.inputSource})}function T(){n.removeEventListener("select",M),n.removeEventListener("selectstart",M),n.removeEventListener("selectend",M),n.removeEventListener("squeeze",M),n.removeEventListener("squeezestart",M),n.removeEventListener("squeezeend",M),n.removeEventListener("end",T),n.removeEventListener("inputsourceschange",X);for(let P=0;P<p.length;P++){const I=A[P];I!==null&&(A[P]=null,p[P].disconnect(I))}z=null,_=null,e.setRenderTarget(d),c=null,h=null,m=null,n=null,u=null,G.stop(),l.isPresenting=!1,l.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(P){q=P,l.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(P){a=P,l.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return r||s},this.setReferenceSpace=function(P){r=P},this.getBaseLayer=function(){return h!==null?h:c},this.getBinding=function(){return m},this.getFrame=function(){return f},this.getSession=function(){return n},this.setSession=async function(P){if(n=P,n!==null){if(d=e.getRenderTarget(),n.addEventListener("select",M),n.addEventListener("selectstart",M),n.addEventListener("selectend",M),n.addEventListener("squeeze",M),n.addEventListener("squeezestart",M),n.addEventListener("squeezeend",M),n.addEventListener("end",T),n.addEventListener("inputsourceschange",X),x.xrCompatible!==!0&&await t.makeXRCompatible(),n.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const I={antialias:n.renderState.layers===void 0?x.antialias:!0,alpha:x.alpha,depth:x.depth,stencil:x.stencil,framebufferScaleFactor:q};c=new XRWebGLLayer(n,t,I),n.updateRenderState({baseLayer:c}),u=new C3(c.framebufferWidth,c.framebufferHeight,{format:T2,type:E3,encoding:e.outputEncoding,stencilBuffer:x.stencil})}else{let I=null,$=null,J=null;x.depth&&(J=x.stencil?35056:33190,I=x.stencil?n4:g3,$=x.stencil?Q3:x3);const K={colorFormat:32856,depthFormat:J,scaleFactor:q};m=new XRWebGLBinding(n,t),h=m.createProjectionLayer(K),n.updateRenderState({layers:[h]}),u=new C3(h.textureWidth,h.textureHeight,{format:T2,type:E3,depthTexture:new rq(h.textureWidth,h.textureHeight,$,void 0,void 0,void 0,void 0,void 0,void 0,I),stencilBuffer:x.stencil,encoding:e.outputEncoding,samples:x.antialias?4:0});const c1=e.properties.get(u);c1.__ignoreDepthValues=h.ignoreDepthValues}u.isXRRenderTarget=!0,this.setFoveation(1),r=null,s=await n.requestReferenceSpace(a),G.setContext(n),G.start(),l.isPresenting=!0,l.dispatchEvent({type:"sessionstart"})}};function X(P){for(let I=0;I<P.removed.length;I++){const $=P.removed[I],J=A.indexOf($);J>=0&&(A[J]=null,p[J].dispatchEvent({type:"disconnected",data:$}))}for(let I=0;I<P.added.length;I++){const $=P.added[I];let J=A.indexOf($);if(J===-1){for(let c1=0;c1<p.length;c1++)if(c1>=A.length){A.push($),J=c1;break}else if(A[c1]===null){A[c1]=$,J=c1;break}if(J===-1)break}const K=p[J];K&&K.dispatchEvent({type:"connected",data:$})}}const q1=new S,N=new S;function w(P,I,$){q1.setFromMatrixPosition(I.matrixWorld),N.setFromMatrixPosition($.matrixWorld);const J=q1.distanceTo(N),K=I.projectionMatrix.elements,c1=$.projectionMatrix.elements,_1=K[14]/(K[10]-1),H=K[14]/(K[10]+1),S1=(K[9]+1)/K[5],d1=(K[9]-1)/K[5],g1=(K[8]-1)/K[0],h1=(c1[8]+1)/c1[0],w1=_1*g1,v1=_1*h1,f1=J/(-g1+h1),H1=f1*-g1;I.matrixWorld.decompose(P.position,P.quaternion,P.scale),P.translateX(H1),P.translateZ(f1),P.matrixWorld.compose(P.position,P.quaternion,P.scale),P.matrixWorldInverse.copy(P.matrixWorld).invert();const Q1=_1+f1,Y1=H+f1,m2=w1-H1,j1=v1+(J-H1),T1=S1*H/Y1*Q1,x2=d1*H/Y1*Q1;P.projectionMatrix.makePerspective(m2,j1,T1,x2,Q1,Y1)}function W(P,I){I===null?P.matrixWorld.copy(P.matrix):P.matrixWorld.multiplyMatrices(I.matrixWorld,P.matrix),P.matrixWorldInverse.copy(P.matrixWorld).invert()}this.updateCamera=function(P){if(n===null)return;F.near=v.near=B.near=P.near,F.far=v.far=B.far=P.far,(z!==F.near||_!==F.far)&&(n.updateRenderState({depthNear:F.near,depthFar:F.far}),z=F.near,_=F.far);const I=P.parent,$=F.cameras;W(F,I);for(let K=0;K<$.length;K++)W($[K],I);F.matrixWorld.decompose(F.position,F.quaternion,F.scale),P.matrix.copy(F.matrix),P.matrix.decompose(P.position,P.quaternion,P.scale);const J=P.children;for(let K=0,c1=J.length;K<c1;K++)J[K].updateMatrixWorld(!0);$.length===2?w(F,B,v):F.projectionMatrix.copy(B.projectionMatrix)},this.getCamera=function(){return F},this.getFoveation=function(){if(h!==null)return h.fixedFoveation;if(c!==null)return c.fixedFoveation},this.setFoveation=function(P){h!==null&&(h.fixedFoveation=P),c!==null&&c.fixedFoveation!==void 0&&(c.fixedFoveation=P)};let j=null;function Z(P,I){if(o=I.getViewerPose(r||s),f=I,o!==null){const $=o.views;c!==null&&(e.setRenderTargetFramebuffer(u,c.framebuffer),e.setRenderTarget(u));let J=!1;$.length!==F.cameras.length&&(F.cameras.length=0,J=!0);for(let K=0;K<$.length;K++){const c1=$[K];let _1=null;if(c!==null)_1=c.getViewport(c1);else{const S1=m.getViewSubImage(h,c1);_1=S1.viewport,K===0&&(e.setRenderTargetTextures(u,S1.colorTexture,h.ignoreDepthValues?void 0:S1.depthStencilTexture),e.setRenderTarget(u))}let H=g[K];H===void 0&&(H=new d2,H.layers.enable(K),H.viewport=new R1,g[K]=H),H.matrix.fromArray(c1.transform.matrix),H.projectionMatrix.fromArray(c1.projectionMatrix),H.viewport.set(_1.x,_1.y,_1.width,_1.height),K===0&&F.matrix.copy(H.matrix),J===!0&&F.cameras.push(H)}}for(let $=0;$<p.length;$++){const J=A[$],K=p[$];J!==null&&K!==void 0&&K.update(J,I,r||s)}j&&j(P,I),f=null}const G=new F7;G.setAnimationLoop(Z),this.setAnimationLoop=function(P){j=P},this.dispose=function(){}}}function mq(i,e){function t(d,u){d.fogColor.value.copy(u.color),u.isFog?(d.fogNear.value=u.near,d.fogFar.value=u.far):u.isFogExp2&&(d.fogDensity.value=u.density)}function l(d,u,p,A,B){u.isMeshBasicMaterial||u.isMeshLambertMaterial?n(d,u):u.isMeshToonMaterial?(n(d,u),m(d,u)):u.isMeshPhongMaterial?(n(d,u),o(d,u)):u.isMeshStandardMaterial?(n(d,u),h(d,u),u.isMeshPhysicalMaterial&&c(d,u,B)):u.isMeshMatcapMaterial?(n(d,u),f(d,u)):u.isMeshDepthMaterial?n(d,u):u.isMeshDistanceMaterial?(n(d,u),x(d,u)):u.isMeshNormalMaterial?n(d,u):u.isLineBasicMaterial?(q(d,u),u.isLineDashedMaterial&&s(d,u)):u.isPointsMaterial?a(d,u,p,A):u.isSpriteMaterial?r(d,u):u.isShadowMaterial?(d.color.value.copy(u.color),d.opacity.value=u.opacity):u.isShaderMaterial&&(u.uniformsNeedUpdate=!1)}function n(d,u){d.opacity.value=u.opacity,u.color&&d.diffuse.value.copy(u.color),u.emissive&&d.emissive.value.copy(u.emissive).multiplyScalar(u.emissiveIntensity),u.map&&(d.map.value=u.map),u.alphaMap&&(d.alphaMap.value=u.alphaMap),u.bumpMap&&(d.bumpMap.value=u.bumpMap,d.bumpScale.value=u.bumpScale,u.side===v2&&(d.bumpScale.value*=-1)),u.displacementMap&&(d.displacementMap.value=u.displacementMap,d.displacementScale.value=u.displacementScale,d.displacementBias.value=u.displacementBias),u.emissiveMap&&(d.emissiveMap.value=u.emissiveMap),u.normalMap&&(d.normalMap.value=u.normalMap,d.normalScale.value.copy(u.normalScale),u.side===v2&&d.normalScale.value.negate()),u.specularMap&&(d.specularMap.value=u.specularMap),u.alphaTest>0&&(d.alphaTest.value=u.alphaTest);const p=e.get(u).envMap;if(p&&(d.envMap.value=p,d.flipEnvMap.value=p.isCubeTexture&&p.isRenderTargetTexture===!1?-1:1,d.reflectivity.value=u.reflectivity,d.ior.value=u.ior,d.refractionRatio.value=u.refractionRatio),u.lightMap){d.lightMap.value=u.lightMap;const v=i.physicallyCorrectLights!==!0?Math.PI:1;d.lightMapIntensity.value=u.lightMapIntensity*v}u.aoMap&&(d.aoMap.value=u.aoMap,d.aoMapIntensity.value=u.aoMapIntensity);let A;u.map?A=u.map:u.specularMap?A=u.specularMap:u.displacementMap?A=u.displacementMap:u.normalMap?A=u.normalMap:u.bumpMap?A=u.bumpMap:u.roughnessMap?A=u.roughnessMap:u.metalnessMap?A=u.metalnessMap:u.alphaMap?A=u.alphaMap:u.emissiveMap?A=u.emissiveMap:u.clearcoatMap?A=u.clearcoatMap:u.clearcoatNormalMap?A=u.clearcoatNormalMap:u.clearcoatRoughnessMap?A=u.clearcoatRoughnessMap:u.iridescenceMap?A=u.iridescenceMap:u.iridescenceThicknessMap?A=u.iridescenceThicknessMap:u.specularIntensityMap?A=u.specularIntensityMap:u.specularColorMap?A=u.specularColorMap:u.transmissionMap?A=u.transmissionMap:u.thicknessMap?A=u.thicknessMap:u.sheenColorMap?A=u.sheenColorMap:u.sheenRoughnessMap&&(A=u.sheenRoughnessMap),A!==void 0&&(A.isWebGLRenderTarget&&(A=A.texture),A.matrixAutoUpdate===!0&&A.updateMatrix(),d.uvTransform.value.copy(A.matrix));let B;u.aoMap?B=u.aoMap:u.lightMap&&(B=u.lightMap),B!==void 0&&(B.isWebGLRenderTarget&&(B=B.texture),B.matrixAutoUpdate===!0&&B.updateMatrix(),d.uv2Transform.value.copy(B.matrix))}function q(d,u){d.diffuse.value.copy(u.color),d.opacity.value=u.opacity}function s(d,u){d.dashSize.value=u.dashSize,d.totalSize.value=u.dashSize+u.gapSize,d.scale.value=u.scale}function a(d,u,p,A){d.diffuse.value.copy(u.color),d.opacity.value=u.opacity,d.size.value=u.size*p,d.scale.value=A*.5,u.map&&(d.map.value=u.map),u.alphaMap&&(d.alphaMap.value=u.alphaMap),u.alphaTest>0&&(d.alphaTest.value=u.alphaTest);let B;u.map?B=u.map:u.alphaMap&&(B=u.alphaMap),B!==void 0&&(B.matrixAutoUpdate===!0&&B.updateMatrix(),d.uvTransform.value.copy(B.matrix))}function r(d,u){d.diffuse.value.copy(u.color),d.opacity.value=u.opacity,d.rotation.value=u.rotation,u.map&&(d.map.value=u.map),u.alphaMap&&(d.alphaMap.value=u.alphaMap),u.alphaTest>0&&(d.alphaTest.value=u.alphaTest);let p;u.map?p=u.map:u.alphaMap&&(p=u.alphaMap),p!==void 0&&(p.matrixAutoUpdate===!0&&p.updateMatrix(),d.uvTransform.value.copy(p.matrix))}function o(d,u){d.specular.value.copy(u.specular),d.shininess.value=Math.max(u.shininess,1e-4)}function m(d,u){u.gradientMap&&(d.gradientMap.value=u.gradientMap)}function h(d,u){d.roughness.value=u.roughness,d.metalness.value=u.metalness,u.roughnessMap&&(d.roughnessMap.value=u.roughnessMap),u.metalnessMap&&(d.metalnessMap.value=u.metalnessMap),e.get(u).envMap&&(d.envMapIntensity.value=u.envMapIntensity)}function c(d,u,p){d.ior.value=u.ior,u.sheen>0&&(d.sheenColor.value.copy(u.sheenColor).multiplyScalar(u.sheen),d.sheenRoughness.value=u.sheenRoughness,u.sheenColorMap&&(d.sheenColorMap.value=u.sheenColorMap),u.sheenRoughnessMap&&(d.sheenRoughnessMap.value=u.sheenRoughnessMap)),u.clearcoat>0&&(d.clearcoat.value=u.clearcoat,d.clearcoatRoughness.value=u.clearcoatRoughness,u.clearcoatMap&&(d.clearcoatMap.value=u.clearcoatMap),u.clearcoatRoughnessMap&&(d.clearcoatRoughnessMap.value=u.clearcoatRoughnessMap),u.clearcoatNormalMap&&(d.clearcoatNormalScale.value.copy(u.clearcoatNormalScale),d.clearcoatNormalMap.value=u.clearcoatNormalMap,u.side===v2&&d.clearcoatNormalScale.value.negate())),u.iridescence>0&&(d.iridescence.value=u.iridescence,d.iridescenceIOR.value=u.iridescenceIOR,d.iridescenceThicknessMinimum.value=u.iridescenceThicknessRange[0],d.iridescenceThicknessMaximum.value=u.iridescenceThicknessRange[1],u.iridescenceMap&&(d.iridescenceMap.value=u.iridescenceMap),u.iridescenceThicknessMap&&(d.iridescenceThicknessMap.value=u.iridescenceThicknessMap)),u.transmission>0&&(d.transmission.value=u.transmission,d.transmissionSamplerMap.value=p.texture,d.transmissionSamplerSize.value.set(p.width,p.height),u.transmissionMap&&(d.transmissionMap.value=u.transmissionMap),d.thickness.value=u.thickness,u.thicknessMap&&(d.thicknessMap.value=u.thicknessMap),d.attenuationDistance.value=u.attenuationDistance,d.attenuationColor.value.copy(u.attenuationColor)),d.specularIntensity.value=u.specularIntensity,d.specularColor.value.copy(u.specularColor),u.specularIntensityMap&&(d.specularIntensityMap.value=u.specularIntensityMap),u.specularColorMap&&(d.specularColorMap.value=u.specularColorMap)}function f(d,u){u.matcap&&(d.matcap.value=u.matcap)}function x(d,u){d.referencePosition.value.copy(u.referencePosition),d.nearDistance.value=u.nearDistance,d.farDistance.value=u.farDistance}return{refreshFogUniforms:t,refreshMaterialUniforms:l}}function hq(i,e,t,l){let n={},q={},s=[];const a=t.isWebGL2?i.getParameter(35375):0;function r(A,B){const v=B.program;l.uniformBlockBinding(A,v)}function o(A,B){let v=n[A.id];v===void 0&&(x(A),v=m(A),n[A.id]=v,A.addEventListener("dispose",u));const g=B.program;l.updateUBOMapping(A,g);const F=e.render.frame;q[A.id]!==F&&(c(A),q[A.id]=F)}function m(A){const B=h();A.__bindingPointIndex=B;const v=i.createBuffer(),g=A.__size,F=A.usage;return i.bindBuffer(35345,v),i.bufferData(35345,g,F),i.bindBuffer(35345,null),i.bindBufferBase(35345,B,v),v}function h(){for(let A=0;A<a;A++)if(s.indexOf(A)===-1)return s.push(A),A;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function c(A){const B=n[A.id],v=A.uniforms,g=A.__cache;i.bindBuffer(35345,B);for(let F=0,z=v.length;F<z;F++){const _=v[F];if(f(_,F,g)===!0){const M=_.value,T=_.__offset;typeof M=="number"?(_.__data[0]=M,i.bufferSubData(35345,T,_.__data)):(_.value.isMatrix3?(_.__data[0]=_.value.elements[0],_.__data[1]=_.value.elements[1],_.__data[2]=_.value.elements[2],_.__data[3]=_.value.elements[0],_.__data[4]=_.value.elements[3],_.__data[5]=_.value.elements[4],_.__data[6]=_.value.elements[5],_.__data[7]=_.value.elements[0],_.__data[8]=_.value.elements[6],_.__data[9]=_.value.elements[7],_.__data[10]=_.value.elements[8],_.__data[11]=_.value.elements[0]):M.toArray(_.__data),i.bufferSubData(35345,T,_.__data))}}i.bindBuffer(35345,null)}function f(A,B,v){const g=A.value;if(v[B]===void 0)return typeof g=="number"?v[B]=g:v[B]=g.clone(),!0;if(typeof g=="number"){if(v[B]!==g)return v[B]=g,!0}else{const F=v[B];if(F.equals(g)===!1)return F.copy(g),!0}return!1}function x(A){const B=A.uniforms;let v=0;const g=16;let F=0;for(let z=0,_=B.length;z<_;z++){const M=B[z],T=d(M);if(M.__data=new Float32Array(T.storage/Float32Array.BYTES_PER_ELEMENT),M.__offset=v,z>0){F=v%g;const X=g-F;F!==0&&X-T.boundary<0&&(v+=g-F,M.__offset=v)}v+=T.storage}return F=v%g,F>0&&(v+=g-F),A.__size=v,A.__cache={},this}function d(A){const B=A.value,v={boundary:0,storage:0};return typeof B=="number"?(v.boundary=4,v.storage=4):B.isVector2?(v.boundary=8,v.storage=8):B.isVector3||B.isColor?(v.boundary=16,v.storage=12):B.isVector4?(v.boundary=16,v.storage=16):B.isMatrix3?(v.boundary=48,v.storage=48):B.isMatrix4?(v.boundary=64,v.storage=64):B.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",B),v}function u(A){const B=A.target;B.removeEventListener("dispose",u);const v=s.indexOf(B.__bindingPointIndex);s.splice(v,1),i.deleteBuffer(n[B.id]),delete n[B.id],delete q[B.id]}function p(){for(const A in n)i.deleteBuffer(n[A]);s=[],n={},q={}}return{bind:r,update:o,dispose:p}}function cq(){const i=C4("canvas");return i.style.display="block",i}function T7(i={}){this.isWebGLRenderer=!0;const e=i.canvas!==void 0?i.canvas:cq(),t=i.context!==void 0?i.context:null,l=i.depth!==void 0?i.depth:!0,n=i.stencil!==void 0?i.stencil:!0,q=i.antialias!==void 0?i.antialias:!1,s=i.premultipliedAlpha!==void 0?i.premultipliedAlpha:!0,a=i.preserveDrawingBuffer!==void 0?i.preserveDrawingBuffer:!1,r=i.powerPreference!==void 0?i.powerPreference:"default",o=i.failIfMajorPerformanceCaveat!==void 0?i.failIfMajorPerformanceCaveat:!1;let m;t!==null?m=t.getContextAttributes().alpha:m=i.alpha!==void 0?i.alpha:!1;let h=null,c=null;const f=[],x=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=v3,this.physicallyCorrectLights=!1,this.toneMapping=Y2,this.toneMappingExposure=1,Object.defineProperties(this,{gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});const d=this;let u=!1,p=0,A=0,B=null,v=-1,g=null;const F=new R1,z=new R1;let _=null,M=e.width,T=e.height,X=1,q1=null,N=null;const w=new R1(0,0,M,T),W=new R1(0,0,M,T);let j=!1;const Z=new F5;let G=!1,P=!1,I=null;const $=new G1,J=new r1,K=new S,c1={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function _1(){return B===null?X:1}let H=t;function S1(D,R){for(let k=0;k<D.length;k++){const L=D[k],V=e.getContext(L,R);if(V!==null)return V}return null}try{const D={alpha:!0,depth:l,stencil:n,antialias:q,premultipliedAlpha:s,preserveDrawingBuffer:a,powerPreference:r,failIfMajorPerformanceCaveat:o};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${v5}`),e.addEventListener("webglcontextlost",p1,!1),e.addEventListener("webglcontextrestored",B1,!1),e.addEventListener("webglcontextcreationerror",P1,!1),H===null){const R=["webgl2","webgl","experimental-webgl"];if(d.isWebGL1Renderer===!0&&R.shift(),H=S1(R,D),H===null)throw S1(R)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}H.getShaderPrecisionFormat===void 0&&(H.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(D){throw console.error("THREE.WebGLRenderer: "+D.message),D}let d1,g1,h1,w1,v1,f1,H1,Q1,Y1,m2,j1,T1,x2,h2,y,E,U,Q,e1,a1,x1,C,Y,t1;function s1(){d1=new vl(H),g1=new dl(H,d1,i),d1.init(g1),C=new iq(H,d1,g1),h1=new nq(H,d1,g1),w1=new Bl,v1=new Vn,f1=new qq(H,d1,h1,v1,g1,C,w1),H1=new pl(d),Q1=new El(d),Y1=new P0(H,g1),Y=new ul(H,d1,Y1,g1),m2=new Cl(H,Y1,w1,Y),j1=new Sl(H,m2,Y1,w1),e1=new Fl(H,g1,f1),E=new xl(v1),T1=new Gn(d,H1,Q1,d1,g1,Y,E),x2=new mq(d,v1),h2=new Wn,y=new $n(d1,g1),Q=new cl(d,H1,h1,j1,m,s),U=new lq(d,j1,g1),t1=new hq(H,w1,g1,h1),a1=new fl(H,d1,w1,g1),x1=new Dl(H,d1,w1,g1),w1.programs=T1.programs,d.capabilities=g1,d.extensions=d1,d.properties=v1,d.renderLists=h2,d.shadowMap=U,d.state=h1,d.info=w1}s1();const i1=new oq(d,H);this.xr=i1,this.getContext=function(){return H},this.getContextAttributes=function(){return H.getContextAttributes()},this.forceContextLoss=function(){const D=d1.get("WEBGL_lose_context");D&&D.loseContext()},this.forceContextRestore=function(){const D=d1.get("WEBGL_lose_context");D&&D.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(D){D!==void 0&&(X=D,this.setSize(M,T,!1))},this.getSize=function(D){return D.set(M,T)},this.setSize=function(D,R,k){if(i1.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}M=D,T=R,e.width=Math.floor(D*X),e.height=Math.floor(R*X),k!==!1&&(e.style.width=D+"px",e.style.height=R+"px"),this.setViewport(0,0,D,R)},this.getDrawingBufferSize=function(D){return D.set(M*X,T*X).floor()},this.setDrawingBufferSize=function(D,R,k){M=D,T=R,X=k,e.width=Math.floor(D*k),e.height=Math.floor(R*k),this.setViewport(0,0,D,R)},this.getCurrentViewport=function(D){return D.copy(F)},this.getViewport=function(D){return D.copy(w)},this.setViewport=function(D,R,k,L){D.isVector4?w.set(D.x,D.y,D.z,D.w):w.set(D,R,k,L),h1.viewport(F.copy(w).multiplyScalar(X).floor())},this.getScissor=function(D){return D.copy(W)},this.setScissor=function(D,R,k,L){D.isVector4?W.set(D.x,D.y,D.z,D.w):W.set(D,R,k,L),h1.scissor(z.copy(W).multiplyScalar(X).floor())},this.getScissorTest=function(){return j},this.setScissorTest=function(D){h1.setScissorTest(j=D)},this.setOpaqueSort=function(D){q1=D},this.setTransparentSort=function(D){N=D},this.getClearColor=function(D){return D.copy(Q.getClearColor())},this.setClearColor=function(){Q.setClearColor.apply(Q,arguments)},this.getClearAlpha=function(){return Q.getClearAlpha()},this.setClearAlpha=function(){Q.setClearAlpha.apply(Q,arguments)},this.clear=function(D=!0,R=!0,k=!0){let L=0;D&&(L|=16384),R&&(L|=256),k&&(L|=1024),H.clear(L)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",p1,!1),e.removeEventListener("webglcontextrestored",B1,!1),e.removeEventListener("webglcontextcreationerror",P1,!1),h2.dispose(),y.dispose(),v1.dispose(),H1.dispose(),Q1.dispose(),j1.dispose(),Y.dispose(),t1.dispose(),T1.dispose(),i1.dispose(),i1.removeEventListener("sessionstart",F1),i1.removeEventListener("sessionend",$1),I&&(I.dispose(),I=null),V1.stop()};function p1(D){D.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),u=!0}function B1(){console.log("THREE.WebGLRenderer: Context Restored."),u=!1;const D=w1.autoReset,R=U.enabled,k=U.autoUpdate,L=U.needsUpdate,V=U.type;s1(),w1.autoReset=D,U.enabled=R,U.autoUpdate=k,U.needsUpdate=L,U.type=V}function P1(D){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",D.statusMessage)}function b(D){const R=D.target;R.removeEventListener("dispose",b),n1(R)}function n1(D){O(D),v1.remove(D)}function O(D){const R=v1.get(D).programs;R!==void 0&&(R.forEach(function(k){T1.releaseProgram(k)}),D.isShaderMaterial&&T1.releaseShaderCache(D))}this.renderBufferDirect=function(D,R,k,L,V,u1){R===null&&(R=c1);const A1=V.isMesh&&V.matrixWorld.determinant()<0,C1=l9(D,R,k,L,V);h1.setMaterial(L,A1);let E1=k.index;const L1=k.attributes.position;if(E1===null){if(L1===void 0||L1.count===0)return}else if(E1.count===0)return;let y1=1;L.wireframe===!0&&(E1=m2.getWireframeAttribute(k),y1=2),Y.setup(V,L,C1,k,E1);let M1,O1=a1;E1!==null&&(M1=Y1.get(E1),O1=x1,O1.setIndex(M1));const s3=E1!==null?E1.count:L1.count,S3=k.drawRange.start*y1,b3=k.drawRange.count*y1,b2=u1!==null?u1.start*y1:0,b1=u1!==null?u1.count*y1:1/0,z3=Math.max(S3,b2),W1=Math.min(s3,S3+b3,b2+b1)-1,_2=Math.max(0,W1-z3+1);if(_2!==0){if(V.isMesh)L.wireframe===!0?(h1.setLineWidth(L.wireframeLinewidth*_1()),O1.setMode(1)):O1.setMode(4);else if(V.isLine){let J2=L.linewidth;J2===void 0&&(J2=1),h1.setLineWidth(J2*_1()),V.isLineSegments?O1.setMode(1):V.isLineLoop?O1.setMode(2):O1.setMode(3)}else V.isPoints?O1.setMode(0):V.isSprite&&O1.setMode(4);if(V.isInstancedMesh)O1.renderInstances(z3,_2,V.count);else if(k.isInstancedBufferGeometry){const J2=Math.min(k.instanceCount,k._maxInstanceCount);O1.renderInstances(z3,_2,J2)}else O1.render(z3,_2)}},this.compile=function(D,R){function k(L,V,u1){L.transparent===!0&&L.side===w2?(L.side=v2,L.needsUpdate=!0,w4(L,V,u1),L.side=i3,L.needsUpdate=!0,w4(L,V,u1),L.side=w2):w4(L,V,u1)}c=y.get(D),c.init(),x.push(c),D.traverseVisible(function(L){L.isLight&&L.layers.test(R.layers)&&(c.pushLight(L),L.castShadow&&c.pushShadow(L))}),c.setupLights(d.physicallyCorrectLights),D.traverse(function(L){const V=L.material;if(V)if(Array.isArray(V))for(let u1=0;u1<V.length;u1++){const A1=V[u1];k(A1,D,L)}else k(V,D,L)}),x.pop(),c=null};let m1=null;function o1(D){m1&&m1(D)}function F1(){V1.stop()}function $1(){V1.start()}const V1=new F7;V1.setAnimationLoop(o1),typeof self<"u"&&V1.setContext(self),this.setAnimationLoop=function(D){m1=D,i1.setAnimationLoop(D),D===null?V1.stop():V1.start()},i1.addEventListener("sessionstart",F1),i1.addEventListener("sessionend",$1),this.render=function(D,R){if(R!==void 0&&R.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(u===!0)return;D.matrixWorldAutoUpdate===!0&&D.updateMatrixWorld(),R.parent===null&&R.matrixWorldAutoUpdate===!0&&R.updateMatrixWorld(),i1.enabled===!0&&i1.isPresenting===!0&&(i1.cameraAutoUpdate===!0&&i1.updateCamera(R),R=i1.getCamera()),D.isScene===!0&&D.onBeforeRender(d,D,R,B),c=y.get(D,x.length),c.init(),x.push(c),$.multiplyMatrices(R.projectionMatrix,R.matrixWorldInverse),Z.setFromProjectionMatrix($),P=this.localClippingEnabled,G=E.init(this.clippingPlanes,P,R),h=h2.get(D,f.length),h.init(),f.push(h),Z2(D,R,0,d.sortObjects),h.finish(),d.sortObjects===!0&&h.sort(q1,N),G===!0&&E.beginShadows();const k=c.state.shadowsArray;if(U.render(k,D,R),G===!0&&E.endShadows(),this.info.autoReset===!0&&this.info.reset(),Q.render(h,D),c.setupLights(d.physicallyCorrectLights),R.isArrayCamera){const L=R.cameras;for(let V=0,u1=L.length;V<u1;V++){const A1=L[V];N1(h,D,A1,A1.viewport)}}else N1(h,D,R);B!==null&&(f1.updateMultisampleRenderTarget(B),f1.updateRenderTargetMipmap(B)),D.isScene===!0&&D.onAfterRender(d,D,R),Y.resetDefaultState(),v=-1,g=null,x.pop(),x.length>0?c=x[x.length-1]:c=null,f.pop(),f.length>0?h=f[f.length-1]:h=null};function Z2(D,R,k,L){if(D.visible===!1)return;if(D.layers.test(R.layers)){if(D.isGroup)k=D.renderOrder;else if(D.isLOD)D.autoUpdate===!0&&D.update(R);else if(D.isLight)c.pushLight(D),D.castShadow&&c.pushShadow(D);else if(D.isSprite){if(!D.frustumCulled||Z.intersectsSprite(D)){L&&K.setFromMatrixPosition(D.matrixWorld).applyMatrix4($);const A1=j1.update(D),C1=D.material;C1.visible&&h.push(D,A1,C1,k,K.z,null)}}else if((D.isMesh||D.isLine||D.isPoints)&&(D.isSkinnedMesh&&D.skeleton.frame!==w1.render.frame&&(D.skeleton.update(),D.skeleton.frame=w1.render.frame),!D.frustumCulled||Z.intersectsObject(D))){L&&K.setFromMatrixPosition(D.matrixWorld).applyMatrix4($);const A1=j1.update(D),C1=D.material;if(Array.isArray(C1)){const E1=A1.groups;for(let L1=0,y1=E1.length;L1<y1;L1++){const M1=E1[L1],O1=C1[M1.materialIndex];O1&&O1.visible&&h.push(D,A1,O1,k,K.z,M1)}}else C1.visible&&h.push(D,A1,C1,k,K.z,null)}}const u1=D.children;for(let A1=0,C1=u1.length;A1<C1;A1++)Z2(u1[A1],R,k,L)}function N1(D,R,k,L){const V=D.opaque,u1=D.transmissive,A1=D.transparent;c.setupLightsView(k),u1.length>0&&I2(V,R,k),L&&h1.viewport(F.copy(L)),V.length>0&&p2(V,R,k),u1.length>0&&p2(u1,R,k),A1.length>0&&p2(A1,R,k),h1.buffers.depth.setTest(!0),h1.buffers.depth.setMask(!0),h1.buffers.color.setMask(!0),h1.setPolygonOffset(!1)}function I2(D,R,k){const L=g1.isWebGL2;I===null&&(I=new C3(1,1,{generateMipmaps:!0,type:d1.has("EXT_color_buffer_half_float")?v4:E3,minFilter:d6,samples:L&&q===!0?4:0})),d.getDrawingBufferSize(J),L?I.setSize(J.x,J.y):I.setSize(h6(J.x),h6(J.y));const V=d.getRenderTarget();d.setRenderTarget(I),d.clear();const u1=d.toneMapping;d.toneMapping=Y2,p2(D,R,k),d.toneMapping=u1,f1.updateMultisampleRenderTarget(I),f1.updateRenderTargetMipmap(I),d.setRenderTarget(V)}function p2(D,R,k){const L=R.isScene===!0?R.overrideMaterial:null;for(let V=0,u1=D.length;V<u1;V++){const A1=D[V],C1=A1.object,E1=A1.geometry,L1=L===null?A1.material:L,y1=A1.group;C1.layers.test(k.layers)&&t9(C1,R,k,E1,L1,y1)}}function t9(D,R,k,L,V,u1){D.onBeforeRender(d,R,k,L,V,u1),D.modelViewMatrix.multiplyMatrices(k.matrixWorldInverse,D.matrixWorld),D.normalMatrix.getNormalMatrix(D.modelViewMatrix),V.onBeforeRender(d,R,k,L,D,u1),V.transparent===!0&&V.side===w2?(V.side=v2,V.needsUpdate=!0,d.renderBufferDirect(k,R,L,V,D,u1),V.side=i3,V.needsUpdate=!0,d.renderBufferDirect(k,R,L,V,D,u1),V.side=w2):d.renderBufferDirect(k,R,L,V,D,u1),D.onAfterRender(d,R,k,L,V,u1)}function w4(D,R,k){R.isScene!==!0&&(R=c1);const L=v1.get(D),V=c.state.lights,u1=c.state.shadowsArray,A1=V.state.version,C1=T1.getParameters(D,V.state,u1,R,k),E1=T1.getProgramCacheKey(C1);let L1=L.programs;L.environment=D.isMeshStandardMaterial?R.environment:null,L.fog=R.fog,L.envMap=(D.isMeshStandardMaterial?Q1:H1).get(D.envMap||L.environment),L1===void 0&&(D.addEventListener("dispose",b),L1=new Map,L.programs=L1);let y1=L1.get(E1);if(y1!==void 0){if(L.currentProgram===y1&&L.lightsStateVersion===A1)return N5(D,C1),y1}else C1.uniforms=T1.getUniforms(D),D.onBuild(k,C1,d),D.onBeforeCompile(C1,d),y1=T1.acquireProgram(C1,E1),L1.set(E1,y1),L.uniforms=C1.uniforms;const M1=L.uniforms;(!D.isShaderMaterial&&!D.isRawShaderMaterial||D.clipping===!0)&&(M1.clippingPlanes=E.uniform),N5(D,C1),L.needsLights=q9(D),L.lightsStateVersion=A1,L.needsLights&&(M1.ambientLightColor.value=V.state.ambient,M1.lightProbe.value=V.state.probe,M1.directionalLights.value=V.state.directional,M1.directionalLightShadows.value=V.state.directionalShadow,M1.spotLights.value=V.state.spot,M1.spotLightShadows.value=V.state.spotShadow,M1.rectAreaLights.value=V.state.rectArea,M1.ltc_1.value=V.state.rectAreaLTC1,M1.ltc_2.value=V.state.rectAreaLTC2,M1.pointLights.value=V.state.point,M1.pointLightShadows.value=V.state.pointShadow,M1.hemisphereLights.value=V.state.hemi,M1.directionalShadowMap.value=V.state.directionalShadowMap,M1.directionalShadowMatrix.value=V.state.directionalShadowMatrix,M1.spotShadowMap.value=V.state.spotShadowMap,M1.spotLightMatrix.value=V.state.spotLightMatrix,M1.spotLightMap.value=V.state.spotLightMap,M1.pointShadowMap.value=V.state.pointShadowMap,M1.pointShadowMatrix.value=V.state.pointShadowMatrix);const O1=y1.getUniforms(),s3=s6.seqWithValue(O1.seq,M1);return L.currentProgram=y1,L.uniformsList=s3,y1}function N5(D,R){const k=v1.get(D);k.outputEncoding=R.outputEncoding,k.instancing=R.instancing,k.skinning=R.skinning,k.morphTargets=R.morphTargets,k.morphNormals=R.morphNormals,k.morphColors=R.morphColors,k.morphTargetsCount=R.morphTargetsCount,k.numClippingPlanes=R.numClippingPlanes,k.numIntersection=R.numClipIntersection,k.vertexAlphas=R.vertexAlphas,k.vertexTangents=R.vertexTangents,k.toneMapping=R.toneMapping}function l9(D,R,k,L,V){R.isScene!==!0&&(R=c1),f1.resetTextureUnits();const u1=R.fog,A1=L.isMeshStandardMaterial?R.environment:null,C1=B===null?d.outputEncoding:B.isXRRenderTarget===!0?B.texture.encoding:v3,E1=(L.isMeshStandardMaterial?Q1:H1).get(L.envMap||A1),L1=L.vertexColors===!0&&!!k.attributes.color&&k.attributes.color.itemSize===4,y1=!!L.normalMap&&!!k.attributes.tangent,M1=!!k.morphAttributes.position,O1=!!k.morphAttributes.normal,s3=!!k.morphAttributes.color,S3=L.toneMapped?d.toneMapping:Y2,b3=k.morphAttributes.position||k.morphAttributes.normal||k.morphAttributes.color,b2=b3!==void 0?b3.length:0,b1=v1.get(L),z3=c.state.lights;if(G===!0&&(P===!0||D!==g)){const c2=D===g&&L.id===v;E.setState(L,D,c2)}let W1=!1;L.version===b1.__version?(b1.needsLights&&b1.lightsStateVersion!==z3.state.version||b1.outputEncoding!==C1||V.isInstancedMesh&&b1.instancing===!1||!V.isInstancedMesh&&b1.instancing===!0||V.isSkinnedMesh&&b1.skinning===!1||!V.isSkinnedMesh&&b1.skinning===!0||b1.envMap!==E1||L.fog===!0&&b1.fog!==u1||b1.numClippingPlanes!==void 0&&(b1.numClippingPlanes!==E.numPlanes||b1.numIntersection!==E.numIntersection)||b1.vertexAlphas!==L1||b1.vertexTangents!==y1||b1.morphTargets!==M1||b1.morphNormals!==O1||b1.morphColors!==s3||b1.toneMapping!==S3||g1.isWebGL2===!0&&b1.morphTargetsCount!==b2)&&(W1=!0):(W1=!0,b1.__version=L.version);let _2=b1.currentProgram;W1===!0&&(_2=w4(L,R,V));let J2=!1,o4=!1,D6=!1;const q2=_2.getUniforms(),r3=b1.uniforms;if(h1.useProgram(_2.program)&&(J2=!0,o4=!0,D6=!0),L.id!==v&&(v=L.id,o4=!0),J2||g!==D){if(q2.setValue(H,"projectionMatrix",D.projectionMatrix),g1.logarithmicDepthBuffer&&q2.setValue(H,"logDepthBufFC",2/(Math.log(D.far+1)/Math.LN2)),g!==D&&(g=D,o4=!0,D6=!0),L.isShaderMaterial||L.isMeshPhongMaterial||L.isMeshToonMaterial||L.isMeshStandardMaterial||L.envMap){const c2=q2.map.cameraPosition;c2!==void 0&&c2.setValue(H,K.setFromMatrixPosition(D.matrixWorld))}(L.isMeshPhongMaterial||L.isMeshToonMaterial||L.isMeshLambertMaterial||L.isMeshBasicMaterial||L.isMeshStandardMaterial||L.isShaderMaterial)&&q2.setValue(H,"isOrthographic",D.isOrthographicCamera===!0),(L.isMeshPhongMaterial||L.isMeshToonMaterial||L.isMeshLambertMaterial||L.isMeshBasicMaterial||L.isMeshStandardMaterial||L.isShaderMaterial||L.isShadowMaterial||V.isSkinnedMesh)&&q2.setValue(H,"viewMatrix",D.matrixWorldInverse)}if(V.isSkinnedMesh){q2.setOptional(H,V,"bindMatrix"),q2.setOptional(H,V,"bindMatrixInverse");const c2=V.skeleton;c2&&(g1.floatVertexTextures?(c2.boneTexture===null&&c2.computeBoneTexture(),q2.setValue(H,"boneTexture",c2.boneTexture,f1),q2.setValue(H,"boneTextureSize",c2.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const B6=k.morphAttributes;if((B6.position!==void 0||B6.normal!==void 0||B6.color!==void 0&&g1.isWebGL2===!0)&&e1.update(V,k,L,_2),(o4||b1.receiveShadow!==V.receiveShadow)&&(b1.receiveShadow=V.receiveShadow,q2.setValue(H,"receiveShadow",V.receiveShadow)),L.isMeshGouraudMaterial&&L.envMap!==null&&(r3.envMap.value=E1,r3.flipEnvMap.value=E1.isCubeTexture&&E1.isRenderTargetTexture===!1?-1:1),o4&&(q2.setValue(H,"toneMappingExposure",d.toneMappingExposure),b1.needsLights&&n9(r3,D6),u1&&L.fog===!0&&x2.refreshFogUniforms(r3,u1),x2.refreshMaterialUniforms(r3,L,X,T,I),s6.upload(H,b1.uniformsList,r3,f1)),L.isShaderMaterial&&L.uniformsNeedUpdate===!0&&(s6.upload(H,b1.uniformsList,r3,f1),L.uniformsNeedUpdate=!1),L.isSpriteMaterial&&q2.setValue(H,"center",V.center),q2.setValue(H,"modelViewMatrix",V.modelViewMatrix),q2.setValue(H,"normalMatrix",V.normalMatrix),q2.setValue(H,"modelMatrix",V.matrixWorld),L.isShaderMaterial||L.isRawShaderMaterial){const c2=L.uniformsGroups;for(let y6=0,i9=c2.length;y6<i9;y6++)if(g1.isWebGL2){const O5=c2[y6];t1.update(O5,_2),t1.bind(O5,_2)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return _2}function n9(D,R){D.ambientLightColor.needsUpdate=R,D.lightProbe.needsUpdate=R,D.directionalLights.needsUpdate=R,D.directionalLightShadows.needsUpdate=R,D.pointLights.needsUpdate=R,D.pointLightShadows.needsUpdate=R,D.spotLights.needsUpdate=R,D.spotLightShadows.needsUpdate=R,D.rectAreaLights.needsUpdate=R,D.hemisphereLights.needsUpdate=R}function q9(D){return D.isMeshLambertMaterial||D.isMeshToonMaterial||D.isMeshPhongMaterial||D.isMeshStandardMaterial||D.isShadowMaterial||D.isShaderMaterial&&D.lights===!0}this.getActiveCubeFace=function(){return p},this.getActiveMipmapLevel=function(){return A},this.getRenderTarget=function(){return B},this.setRenderTargetTextures=function(D,R,k){v1.get(D.texture).__webglTexture=R,v1.get(D.depthTexture).__webglTexture=k;const L=v1.get(D);L.__hasExternalTextures=!0,L.__hasExternalTextures&&(L.__autoAllocateDepthBuffer=k===void 0,L.__autoAllocateDepthBuffer||d1.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),L.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(D,R){const k=v1.get(D);k.__webglFramebuffer=R,k.__useDefaultFramebuffer=R===void 0},this.setRenderTarget=function(D,R=0,k=0){B=D,p=R,A=k;let L=!0;if(D){const E1=v1.get(D);E1.__useDefaultFramebuffer!==void 0?(h1.bindFramebuffer(36160,null),L=!1):E1.__webglFramebuffer===void 0?f1.setupRenderTarget(D):E1.__hasExternalTextures&&f1.rebindTextures(D,v1.get(D.texture).__webglTexture,v1.get(D.depthTexture).__webglTexture)}let V=null,u1=!1,A1=!1;if(D){const E1=D.texture;(E1.isData3DTexture||E1.isDataArrayTexture)&&(A1=!0);const L1=v1.get(D).__webglFramebuffer;D.isWebGLCubeRenderTarget?(V=L1[R],u1=!0):g1.isWebGL2&&D.samples>0&&f1.useMultisampledRTT(D)===!1?V=v1.get(D).__webglMultisampledFramebuffer:V=L1,F.copy(D.viewport),z.copy(D.scissor),_=D.scissorTest}else F.copy(w).multiplyScalar(X).floor(),z.copy(W).multiplyScalar(X).floor(),_=j;if(h1.bindFramebuffer(36160,V)&&g1.drawBuffers&&L&&h1.drawBuffers(D,V),h1.viewport(F),h1.scissor(z),h1.setScissorTest(_),u1){const E1=v1.get(D.texture);H.framebufferTexture2D(36160,36064,34069+R,E1.__webglTexture,k)}else if(A1){const E1=v1.get(D.texture),L1=R||0;H.framebufferTextureLayer(36160,36064,E1.__webglTexture,k||0,L1)}v=-1},this.readRenderTargetPixels=function(D,R,k,L,V,u1,A1){if(!(D&&D.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let C1=v1.get(D).__webglFramebuffer;if(D.isWebGLCubeRenderTarget&&A1!==void 0&&(C1=C1[A1]),C1){h1.bindFramebuffer(36160,C1);try{const E1=D.texture,L1=E1.format,y1=E1.type;if(L1!==T2&&C.convert(L1)!==H.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const M1=y1===v4&&(d1.has("EXT_color_buffer_half_float")||g1.isWebGL2&&d1.has("EXT_color_buffer_float"));if(y1!==E3&&C.convert(y1)!==H.getParameter(35738)&&!(y1===p3&&(g1.isWebGL2||d1.has("OES_texture_float")||d1.has("WEBGL_color_buffer_float")))&&!M1){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}R>=0&&R<=D.width-L&&k>=0&&k<=D.height-V&&H.readPixels(R,k,L,V,C.convert(L1),C.convert(y1),u1)}finally{const E1=B!==null?v1.get(B).__webglFramebuffer:null;h1.bindFramebuffer(36160,E1)}}},this.copyFramebufferToTexture=function(D,R,k=0){const L=Math.pow(2,-k),V=Math.floor(R.image.width*L),u1=Math.floor(R.image.height*L);f1.setTexture2D(R,0),H.copyTexSubImage2D(3553,k,0,0,D.x,D.y,V,u1),h1.unbindTexture()},this.copyTextureToTexture=function(D,R,k,L=0){const V=R.image.width,u1=R.image.height,A1=C.convert(k.format),C1=C.convert(k.type);f1.setTexture2D(k,0),H.pixelStorei(37440,k.flipY),H.pixelStorei(37441,k.premultiplyAlpha),H.pixelStorei(3317,k.unpackAlignment),R.isDataTexture?H.texSubImage2D(3553,L,D.x,D.y,V,u1,A1,C1,R.image.data):R.isCompressedTexture?H.compressedTexSubImage2D(3553,L,D.x,D.y,R.mipmaps[0].width,R.mipmaps[0].height,A1,R.mipmaps[0].data):H.texSubImage2D(3553,L,D.x,D.y,A1,C1,R.image),L===0&&k.generateMipmaps&&H.generateMipmap(3553),h1.unbindTexture()},this.copyTextureToTexture3D=function(D,R,k,L,V=0){if(d.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const u1=D.max.x-D.min.x+1,A1=D.max.y-D.min.y+1,C1=D.max.z-D.min.z+1,E1=C.convert(L.format),L1=C.convert(L.type);let y1;if(L.isData3DTexture)f1.setTexture3D(L,0),y1=32879;else if(L.isDataArrayTexture)f1.setTexture2DArray(L,0),y1=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}H.pixelStorei(37440,L.flipY),H.pixelStorei(37441,L.premultiplyAlpha),H.pixelStorei(3317,L.unpackAlignment);const M1=H.getParameter(3314),O1=H.getParameter(32878),s3=H.getParameter(3316),S3=H.getParameter(3315),b3=H.getParameter(32877),b2=k.isCompressedTexture?k.mipmaps[0]:k.image;H.pixelStorei(3314,b2.width),H.pixelStorei(32878,b2.height),H.pixelStorei(3316,D.min.x),H.pixelStorei(3315,D.min.y),H.pixelStorei(32877,D.min.z),k.isDataTexture||k.isData3DTexture?H.texSubImage3D(y1,V,R.x,R.y,R.z,u1,A1,C1,E1,L1,b2.data):k.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),H.compressedTexSubImage3D(y1,V,R.x,R.y,R.z,u1,A1,C1,E1,b2.data)):H.texSubImage3D(y1,V,R.x,R.y,R.z,u1,A1,C1,E1,L1,b2),H.pixelStorei(3314,M1),H.pixelStorei(32878,O1),H.pixelStorei(3316,s3),H.pixelStorei(3315,S3),H.pixelStorei(32877,b3),V===0&&L.generateMipmaps&&H.generateMipmap(y1),h1.unbindTexture()},this.initTexture=function(D){D.isCubeTexture?f1.setTextureCube(D,0):D.isData3DTexture?f1.setTexture3D(D,0):D.isDataArrayTexture?f1.setTexture2DArray(D,0):f1.setTexture2D(D,0),h1.unbindTexture()},this.resetState=function(){p=0,A=0,B=null,h1.reset(),Y.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class uq extends T7{}uq.prototype.isWebGL1Renderer=!0;class fq extends J1{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(e){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=e}}class L7 extends F3{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new z1(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const K8=new G1,p5=new y5,e6=new x6,t6=new S;class dq extends J1{constructor(e=new D2,t=new L7){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const l=this.geometry,n=this.matrixWorld,q=e.params.Points.threshold,s=l.drawRange;if(l.boundingSphere===null&&l.computeBoundingSphere(),e6.copy(l.boundingSphere),e6.applyMatrix4(n),e6.radius+=q,e.ray.intersectsSphere(e6)===!1)return;K8.copy(n).invert(),p5.copy(e.ray).applyMatrix4(K8);const a=q/((this.scale.x+this.scale.y+this.scale.z)/3),r=a*a,o=l.index,h=l.attributes.position;if(o!==null){const c=Math.max(0,s.start),f=Math.min(o.count,s.start+s.count);for(let x=c,d=f;x<d;x++){const u=o.getX(x);t6.fromBufferAttribute(h,u),Q8(t6,u,r,n,e,t,this)}}else{const c=Math.max(0,s.start),f=Math.min(h.count,s.start+s.count);for(let x=c,d=f;x<d;x++)t6.fromBufferAttribute(h,x),Q8(t6,x,r,n,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,l=Object.keys(t);if(l.length>0){const n=t[l[0]];if(n!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let q=0,s=n.length;q<s;q++){const a=n[q].name||String(q);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=q}}}}}function Q8(i,e,t,l,n,q,s){const a=p5.distanceSqToPoint(i);if(a<t){const r=new S;p5.closestPointToPoint(i,r),r.applyMatrix4(l);const o=n.ray.origin.distanceTo(r);if(o<n.near||o>n.far)return;q.push({distance:o,distanceToRay:Math.sqrt(a),point:r,index:e,face:null,object:s})}}class R2{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const l=this.getUtoTmapping(e);return this.getPoint(l,t)}getPoints(e=5){const t=[];for(let l=0;l<=e;l++)t.push(this.getPoint(l/e));return t}getSpacedPoints(e=5){const t=[];for(let l=0;l<=e;l++)t.push(this.getPointAt(l/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let l,n=this.getPoint(0),q=0;t.push(0);for(let s=1;s<=e;s++)l=this.getPoint(s/e),q+=l.distanceTo(n),t.push(q),n=l;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const l=this.getLengths();let n=0;const q=l.length;let s;t?s=t:s=e*l[q-1];let a=0,r=q-1,o;for(;a<=r;)if(n=Math.floor(a+(r-a)/2),o=l[n]-s,o<0)a=n+1;else if(o>0)r=n-1;else{r=n;break}if(n=r,l[n]===s)return n/(q-1);const m=l[n],c=l[n+1]-m,f=(s-m)/c;return(n+f)/(q-1)}getTangent(e,t){let n=e-1e-4,q=e+1e-4;n<0&&(n=0),q>1&&(q=1);const s=this.getPoint(n),a=this.getPoint(q),r=t||(s.isVector2?new r1:new S);return r.copy(a).sub(s).normalize(),r}getTangentAt(e,t){const l=this.getUtoTmapping(e);return this.getTangent(l,t)}computeFrenetFrames(e,t){const l=new S,n=[],q=[],s=[],a=new S,r=new G1;for(let f=0;f<=e;f++){const x=f/e;n[f]=this.getTangentAt(x,new S)}q[0]=new S,s[0]=new S;let o=Number.MAX_VALUE;const m=Math.abs(n[0].x),h=Math.abs(n[0].y),c=Math.abs(n[0].z);m<=o&&(o=m,l.set(1,0,0)),h<=o&&(o=h,l.set(0,1,0)),c<=o&&l.set(0,0,1),a.crossVectors(n[0],l).normalize(),q[0].crossVectors(n[0],a),s[0].crossVectors(n[0],q[0]);for(let f=1;f<=e;f++){if(q[f]=q[f-1].clone(),s[f]=s[f-1].clone(),a.crossVectors(n[f-1],n[f]),a.length()>Number.EPSILON){a.normalize();const x=Math.acos(e2(n[f-1].dot(n[f]),-1,1));q[f].applyMatrix4(r.makeRotationAxis(a,x))}s[f].crossVectors(n[f],q[f])}if(t===!0){let f=Math.acos(e2(q[0].dot(q[e]),-1,1));f/=e,n[0].dot(a.crossVectors(q[0],q[e]))>0&&(f=-f);for(let x=1;x<=e;x++)q[x].applyMatrix4(r.makeRotationAxis(n[x],f*x)),s[x].crossVectors(n[x],q[x])}return{tangents:n,normals:q,binormals:s}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class z5 extends R2{constructor(e=0,t=0,l=1,n=1,q=0,s=Math.PI*2,a=!1,r=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=l,this.yRadius=n,this.aStartAngle=q,this.aEndAngle=s,this.aClockwise=a,this.aRotation=r}getPoint(e,t){const l=t||new r1,n=Math.PI*2;let q=this.aEndAngle-this.aStartAngle;const s=Math.abs(q)<Number.EPSILON;for(;q<0;)q+=n;for(;q>n;)q-=n;q<Number.EPSILON&&(s?q=0:q=n),this.aClockwise===!0&&!s&&(q===n?q=-n:q=q-n);const a=this.aStartAngle+e*q;let r=this.aX+this.xRadius*Math.cos(a),o=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const m=Math.cos(this.aRotation),h=Math.sin(this.aRotation),c=r-this.aX,f=o-this.aY;r=c*m-f*h+this.aX,o=c*h+f*m+this.aY}return l.set(r,o)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class xq extends z5{constructor(e,t,l,n,q,s){super(e,t,l,l,n,q,s),this.isArcCurve=!0,this.type="ArcCurve"}}function w5(){let i=0,e=0,t=0,l=0;function n(q,s,a,r){i=q,e=a,t=-3*q+3*s-2*a-r,l=2*q-2*s+a+r}return{initCatmullRom:function(q,s,a,r,o){n(s,a,o*(a-q),o*(r-s))},initNonuniformCatmullRom:function(q,s,a,r,o,m,h){let c=(s-q)/o-(a-q)/(o+m)+(a-s)/m,f=(a-s)/m-(r-s)/(m+h)+(r-a)/h;c*=m,f*=m,n(s,a,c,f)},calc:function(q){const s=q*q,a=s*q;return i+e*q+t*s+l*a}}}const l6=new S,n5=new w5,q5=new w5,i5=new w5;class P7 extends R2{constructor(e=[],t=!1,l="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=l,this.tension=n}getPoint(e,t=new S){const l=t,n=this.points,q=n.length,s=(q-(this.closed?0:1))*e;let a=Math.floor(s),r=s-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/q)+1)*q:r===0&&a===q-1&&(a=q-2,r=1);let o,m;this.closed||a>0?o=n[(a-1)%q]:(l6.subVectors(n[0],n[1]).add(n[0]),o=l6);const h=n[a%q],c=n[(a+1)%q];if(this.closed||a+2<q?m=n[(a+2)%q]:(l6.subVectors(n[q-1],n[q-2]).add(n[q-1]),m=l6),this.curveType==="centripetal"||this.curveType==="chordal"){const f=this.curveType==="chordal"?.5:.25;let x=Math.pow(o.distanceToSquared(h),f),d=Math.pow(h.distanceToSquared(c),f),u=Math.pow(c.distanceToSquared(m),f);d<1e-4&&(d=1),x<1e-4&&(x=d),u<1e-4&&(u=d),n5.initNonuniformCatmullRom(o.x,h.x,c.x,m.x,x,d,u),q5.initNonuniformCatmullRom(o.y,h.y,c.y,m.y,x,d,u),i5.initNonuniformCatmullRom(o.z,h.z,c.z,m.z,x,d,u)}else this.curveType==="catmullrom"&&(n5.initCatmullRom(o.x,h.x,c.x,m.x,this.tension),q5.initCatmullRom(o.y,h.y,c.y,m.y,this.tension),i5.initCatmullRom(o.z,h.z,c.z,m.z,this.tension));return l.set(n5.calc(r),q5.calc(r),i5.calc(r)),l}copy(e){super.copy(e),this.points=[];for(let t=0,l=e.points.length;t<l;t++){const n=e.points[t];this.points.push(n.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,l=this.points.length;t<l;t++){const n=this.points[t];e.points.push(n.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,l=e.points.length;t<l;t++){const n=e.points[t];this.points.push(new S().fromArray(n))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function e7(i,e,t,l,n){const q=(l-e)*.5,s=(n-t)*.5,a=i*i,r=i*a;return(2*t-2*l+q+s)*r+(-3*t+3*l-2*q-s)*a+q*i+t}function pq(i,e){const t=1-i;return t*t*e}function _q(i,e){return 2*(1-i)*i*e}function gq(i,e){return i*i*e}function g4(i,e,t,l){return pq(i,e)+_q(i,t)+gq(i,l)}function Aq(i,e){const t=1-i;return t*t*t*e}function Eq(i,e){const t=1-i;return 3*t*t*i*e}function vq(i,e){return 3*(1-i)*i*i*e}function Cq(i,e){return i*i*i*e}function A4(i,e,t,l,n){return Aq(i,e)+Eq(i,t)+vq(i,l)+Cq(i,n)}class R7 extends R2{constructor(e=new r1,t=new r1,l=new r1,n=new r1){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=l,this.v3=n}getPoint(e,t=new r1){const l=t,n=this.v0,q=this.v1,s=this.v2,a=this.v3;return l.set(A4(e,n.x,q.x,s.x,a.x),A4(e,n.y,q.y,s.y,a.y)),l}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class Dq extends R2{constructor(e=new S,t=new S,l=new S,n=new S){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=l,this.v3=n}getPoint(e,t=new S){const l=t,n=this.v0,q=this.v1,s=this.v2,a=this.v3;return l.set(A4(e,n.x,q.x,s.x,a.x),A4(e,n.y,q.y,s.y,a.y),A4(e,n.z,q.z,s.z,a.z)),l}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class T5 extends R2{constructor(e=new r1,t=new r1){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new r1){const l=t;return e===1?l.copy(this.v2):(l.copy(this.v2).sub(this.v1),l.multiplyScalar(e).add(this.v1)),l}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const l=t||new r1;return l.copy(this.v2).sub(this.v1).normalize(),l}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Bq extends R2{constructor(e=new S,t=new S){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new S){const l=t;return e===1?l.copy(this.v2):(l.copy(this.v2).sub(this.v1),l.multiplyScalar(e).add(this.v1)),l}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class I7 extends R2{constructor(e=new r1,t=new r1,l=new r1){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=l}getPoint(e,t=new r1){const l=t,n=this.v0,q=this.v1,s=this.v2;return l.set(g4(e,n.x,q.x,s.x),g4(e,n.y,q.y,s.y)),l}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class N7 extends R2{constructor(e=new S,t=new S,l=new S){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=l}getPoint(e,t=new S){const l=t,n=this.v0,q=this.v1,s=this.v2;return l.set(g4(e,n.x,q.x,s.x),g4(e,n.y,q.y,s.y),g4(e,n.z,q.z,s.z)),l}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class O7 extends R2{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new r1){const l=t,n=this.points,q=(n.length-1)*e,s=Math.floor(q),a=q-s,r=n[s===0?s:s-1],o=n[s],m=n[s>n.length-2?n.length-1:s+1],h=n[s>n.length-3?n.length-1:s+2];return l.set(e7(a,r.x,o.x,m.x,h.x),e7(a,r.y,o.y,m.y,h.y)),l}copy(e){super.copy(e),this.points=[];for(let t=0,l=e.points.length;t<l;t++){const n=e.points[t];this.points.push(n.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,l=this.points.length;t<l;t++){const n=this.points[t];e.points.push(n.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,l=e.points.length;t<l;t++){const n=e.points[t];this.points.push(new r1().fromArray(n))}return this}}var U7=Object.freeze({__proto__:null,ArcCurve:xq,CatmullRomCurve3:P7,CubicBezierCurve:R7,CubicBezierCurve3:Dq,EllipseCurve:z5,LineCurve:T5,LineCurve3:Bq,QuadraticBezierCurve:I7,QuadraticBezierCurve3:N7,SplineCurve:O7});class yq extends R2{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new T5(t,e))}getPoint(e,t){const l=e*this.getLength(),n=this.getCurveLengths();let q=0;for(;q<n.length;){if(n[q]>=l){const s=n[q]-l,a=this.curves[q],r=a.getLength(),o=r===0?0:1-s/r;return a.getPointAt(o,t)}q++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let l=0,n=this.curves.length;l<n;l++)t+=this.curves[l].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let l=0;l<=e;l++)t.push(this.getPoint(l/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let l;for(let n=0,q=this.curves;n<q.length;n++){const s=q[n],a=s.isEllipseCurve?e*2:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?e*s.points.length:e,r=s.getPoints(a);for(let o=0;o<r.length;o++){const m=r[o];l&&l.equals(m)||(t.push(m),l=m)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,l=e.curves.length;t<l;t++){const n=e.curves[t];this.curves.push(n.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,l=this.curves.length;t<l;t++){const n=this.curves[t];e.curves.push(n.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,l=e.curves.length;t<l;t++){const n=e.curves[t];this.curves.push(new U7[n.type]().fromJSON(n))}return this}}class _5 extends yq{constructor(e){super(),this.type="Path",this.currentPoint=new r1,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,l=e.length;t<l;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const l=new T5(this.currentPoint.clone(),new r1(e,t));return this.curves.push(l),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,l,n){const q=new I7(this.currentPoint.clone(),new r1(e,t),new r1(l,n));return this.curves.push(q),this.currentPoint.set(l,n),this}bezierCurveTo(e,t,l,n,q,s){const a=new R7(this.currentPoint.clone(),new r1(e,t),new r1(l,n),new r1(q,s));return this.curves.push(a),this.currentPoint.set(q,s),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),l=new O7(t);return this.curves.push(l),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,l,n,q,s){const a=this.currentPoint.x,r=this.currentPoint.y;return this.absarc(e+a,t+r,l,n,q,s),this}absarc(e,t,l,n,q,s){return this.absellipse(e,t,l,l,n,q,s),this}ellipse(e,t,l,n,q,s,a,r){const o=this.currentPoint.x,m=this.currentPoint.y;return this.absellipse(e+o,t+m,l,n,q,s,a,r),this}absellipse(e,t,l,n,q,s,a,r){const o=new z5(e,t,l,n,q,s,a,r);if(this.curves.length>0){const h=o.getPoint(0);h.equals(this.currentPoint)||this.lineTo(h.x,h.y)}this.curves.push(o);const m=o.getPoint(1);return this.currentPoint.copy(m),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class E4 extends _5{constructor(e){super(e),this.uuid=M3(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let l=0,n=this.holes.length;l<n;l++)t[l]=this.holes[l].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,l=e.holes.length;t<l;t++){const n=e.holes[t];this.holes.push(n.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,l=this.holes.length;t<l;t++){const n=this.holes[t];e.holes.push(n.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,l=e.holes.length;t<l;t++){const n=e.holes[t];this.holes.push(new _5().fromJSON(n))}return this}}const Mq={triangulate:function(i,e,t=2){const l=e&&e.length,n=l?e[0]*t:i.length;let q=k7(i,0,n,t,!0);const s=[];if(!q||q.next===q.prev)return s;let a,r,o,m,h,c,f;if(l&&(q=wq(i,e,q,t)),i.length>80*t){a=o=i[0],r=m=i[1];for(let x=t;x<n;x+=t)h=i[x],c=i[x+1],h<a&&(a=h),c<r&&(r=c),h>o&&(o=h),c>m&&(m=c);f=Math.max(o-a,m-r),f=f!==0?1/f:0}return D4(q,s,t,a,r,f),s}};function k7(i,e,t,l,n){let q,s;if(n===Vq(i,e,t,l)>0)for(q=e;q<t;q+=l)s=t7(q,i[q],i[q+1],s);else for(q=t-l;q>=e;q-=l)s=t7(q,i[q],i[q+1],s);return s&&_6(s,s.next)&&(y4(s),s=s.next),s}function a3(i,e){if(!i)return i;e||(e=i);let t=i,l;do if(l=!1,!t.steiner&&(_6(t,t.next)||I1(t.prev,t,t.next)===0)){if(y4(t),t=e=t.prev,t===t.next)break;l=!0}else t=t.next;while(l||t!==e);return e}function D4(i,e,t,l,n,q,s){if(!i)return;!s&&q&&Iq(i,l,n,q);let a=i,r,o;for(;i.prev!==i.next;){if(r=i.prev,o=i.next,q?Sq(i,l,n,q):Fq(i)){e.push(r.i/t),e.push(i.i/t),e.push(o.i/t),y4(i),i=o.next,a=o.next;continue}if(i=o,i===a){s?s===1?(i=bq(a3(i),e,t),D4(i,e,t,l,n,q,2)):s===2&&zq(i,e,t,l,n,q):D4(a3(i),e,t,l,n,q,1);break}}}function Fq(i){const e=i.prev,t=i,l=i.next;if(I1(e,t,l)>=0)return!1;let n=i.next.next;for(;n!==i.prev;){if($3(e.x,e.y,t.x,t.y,l.x,l.y,n.x,n.y)&&I1(n.prev,n,n.next)>=0)return!1;n=n.next}return!0}function Sq(i,e,t,l){const n=i.prev,q=i,s=i.next;if(I1(n,q,s)>=0)return!1;const a=n.x<q.x?n.x<s.x?n.x:s.x:q.x<s.x?q.x:s.x,r=n.y<q.y?n.y<s.y?n.y:s.y:q.y<s.y?q.y:s.y,o=n.x>q.x?n.x>s.x?n.x:s.x:q.x>s.x?q.x:s.x,m=n.y>q.y?n.y>s.y?n.y:s.y:q.y>s.y?q.y:s.y,h=g5(a,r,e,t,l),c=g5(o,m,e,t,l);let f=i.prevZ,x=i.nextZ;for(;f&&f.z>=h&&x&&x.z<=c;){if(f!==i.prev&&f!==i.next&&$3(n.x,n.y,q.x,q.y,s.x,s.y,f.x,f.y)&&I1(f.prev,f,f.next)>=0||(f=f.prevZ,x!==i.prev&&x!==i.next&&$3(n.x,n.y,q.x,q.y,s.x,s.y,x.x,x.y)&&I1(x.prev,x,x.next)>=0))return!1;x=x.nextZ}for(;f&&f.z>=h;){if(f!==i.prev&&f!==i.next&&$3(n.x,n.y,q.x,q.y,s.x,s.y,f.x,f.y)&&I1(f.prev,f,f.next)>=0)return!1;f=f.prevZ}for(;x&&x.z<=c;){if(x!==i.prev&&x!==i.next&&$3(n.x,n.y,q.x,q.y,s.x,s.y,x.x,x.y)&&I1(x.prev,x,x.next)>=0)return!1;x=x.nextZ}return!0}function bq(i,e,t){let l=i;do{const n=l.prev,q=l.next.next;!_6(n,q)&&G7(n,l,l.next,q)&&B4(n,q)&&B4(q,n)&&(e.push(n.i/t),e.push(l.i/t),e.push(q.i/t),y4(l),y4(l.next),l=i=q),l=l.next}while(l!==i);return a3(l)}function zq(i,e,t,l,n,q){let s=i;do{let a=s.next.next;for(;a!==s.prev;){if(s.i!==a.i&&Uq(s,a)){let r=V7(s,a);s=a3(s,s.next),r=a3(r,r.next),D4(s,e,t,l,n,q),D4(r,e,t,l,n,q);return}a=a.next}s=s.next}while(s!==i)}function wq(i,e,t,l){const n=[];let q,s,a,r,o;for(q=0,s=e.length;q<s;q++)a=e[q]*l,r=q<s-1?e[q+1]*l:i.length,o=k7(i,a,r,l,!1),o===o.next&&(o.steiner=!0),n.push(Oq(o));for(n.sort(Tq),q=0;q<n.length;q++)Lq(n[q],t),t=a3(t,t.next);return t}function Tq(i,e){return i.x-e.x}function Lq(i,e){if(e=Pq(i,e),e){const t=V7(e,i);a3(e,e.next),a3(t,t.next)}}function Pq(i,e){let t=e;const l=i.x,n=i.y;let q=-1/0,s;do{if(n<=t.y&&n>=t.next.y&&t.next.y!==t.y){const c=t.x+(n-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(c<=l&&c>q){if(q=c,c===l){if(n===t.y)return t;if(n===t.next.y)return t.next}s=t.x<t.next.x?t:t.next}}t=t.next}while(t!==e);if(!s)return null;if(l===q)return s;const a=s,r=s.x,o=s.y;let m=1/0,h;t=s;do l>=t.x&&t.x>=r&&l!==t.x&&$3(n<o?l:q,n,r,o,n<o?q:l,n,t.x,t.y)&&(h=Math.abs(n-t.y)/(l-t.x),B4(t,i)&&(h<m||h===m&&(t.x>s.x||t.x===s.x&&Rq(s,t)))&&(s=t,m=h)),t=t.next;while(t!==a);return s}function Rq(i,e){return I1(i.prev,i,e.prev)<0&&I1(e.next,i,i.next)<0}function Iq(i,e,t,l){let n=i;do n.z===null&&(n.z=g5(n.x,n.y,e,t,l)),n.prevZ=n.prev,n.nextZ=n.next,n=n.next;while(n!==i);n.prevZ.nextZ=null,n.prevZ=null,Nq(n)}function Nq(i){let e,t,l,n,q,s,a,r,o=1;do{for(t=i,i=null,q=null,s=0;t;){for(s++,l=t,a=0,e=0;e<o&&(a++,l=l.nextZ,!!l);e++);for(r=o;a>0||r>0&&l;)a!==0&&(r===0||!l||t.z<=l.z)?(n=t,t=t.nextZ,a--):(n=l,l=l.nextZ,r--),q?q.nextZ=n:i=n,n.prevZ=q,q=n;t=l}q.nextZ=null,o*=2}while(s>1);return i}function g5(i,e,t,l,n){return i=32767*(i-t)*n,e=32767*(e-l)*n,i=(i|i<<8)&16711935,i=(i|i<<4)&252645135,i=(i|i<<2)&858993459,i=(i|i<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,i|e<<1}function Oq(i){let e=i,t=i;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==i);return t}function $3(i,e,t,l,n,q,s,a){return(n-s)*(e-a)-(i-s)*(q-a)>=0&&(i-s)*(l-a)-(t-s)*(e-a)>=0&&(t-s)*(q-a)-(n-s)*(l-a)>=0}function Uq(i,e){return i.next.i!==e.i&&i.prev.i!==e.i&&!kq(i,e)&&(B4(i,e)&&B4(e,i)&&Gq(i,e)&&(I1(i.prev,i,e.prev)||I1(i,e.prev,e))||_6(i,e)&&I1(i.prev,i,i.next)>0&&I1(e.prev,e,e.next)>0)}function I1(i,e,t){return(e.y-i.y)*(t.x-e.x)-(e.x-i.x)*(t.y-e.y)}function _6(i,e){return i.x===e.x&&i.y===e.y}function G7(i,e,t,l){const n=q6(I1(i,e,t)),q=q6(I1(i,e,l)),s=q6(I1(t,l,i)),a=q6(I1(t,l,e));return!!(n!==q&&s!==a||n===0&&n6(i,t,e)||q===0&&n6(i,l,e)||s===0&&n6(t,i,l)||a===0&&n6(t,e,l))}function n6(i,e,t){return e.x<=Math.max(i.x,t.x)&&e.x>=Math.min(i.x,t.x)&&e.y<=Math.max(i.y,t.y)&&e.y>=Math.min(i.y,t.y)}function q6(i){return i>0?1:i<0?-1:0}function kq(i,e){let t=i;do{if(t.i!==i.i&&t.next.i!==i.i&&t.i!==e.i&&t.next.i!==e.i&&G7(t,t.next,i,e))return!0;t=t.next}while(t!==i);return!1}function B4(i,e){return I1(i.prev,i,i.next)<0?I1(i,e,i.next)>=0&&I1(i,i.prev,e)>=0:I1(i,e,i.prev)<0||I1(i,i.next,e)<0}function Gq(i,e){let t=i,l=!1;const n=(i.x+e.x)/2,q=(i.y+e.y)/2;do t.y>q!=t.next.y>q&&t.next.y!==t.y&&n<(t.next.x-t.x)*(q-t.y)/(t.next.y-t.y)+t.x&&(l=!l),t=t.next;while(t!==i);return l}function V7(i,e){const t=new A5(i.i,i.x,i.y),l=new A5(e.i,e.x,e.y),n=i.next,q=e.prev;return i.next=e,e.prev=i,t.next=n,n.prev=t,l.next=t,t.prev=l,q.next=l,l.prev=q,l}function t7(i,e,t,l){const n=new A5(i,e,t);return l?(n.next=l.next,n.prev=l,l.next.prev=n,l.next=n):(n.prev=n,n.next=n),n}function y4(i){i.next.prev=i.prev,i.prev.next=i.next,i.prevZ&&(i.prevZ.nextZ=i.nextZ),i.nextZ&&(i.nextZ.prevZ=i.prevZ)}function A5(i,e,t){this.i=i,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Vq(i,e,t,l){let n=0;for(let q=e,s=t-l;q<t;q+=l)n+=(i[s]-i[q])*(i[q+1]+i[s+1]),s=q;return n}class e4{static area(e){const t=e.length;let l=0;for(let n=t-1,q=0;q<t;n=q++)l+=e[n].x*e[q].y-e[q].x*e[n].y;return l*.5}static isClockWise(e){return e4.area(e)<0}static triangulateShape(e,t){const l=[],n=[],q=[];l7(e),n7(l,e);let s=e.length;t.forEach(l7);for(let r=0;r<t.length;r++)n.push(s),s+=t[r].length,n7(l,t[r]);const a=Mq.triangulate(l,n);for(let r=0;r<a.length;r+=3)q.push(a.slice(r,r+3));return q}}function l7(i){const e=i.length;e>2&&i[e-1].equals(i[0])&&i.pop()}function n7(i,e){for(let t=0;t<e.length;t++)i.push(e[t].x),i.push(e[t].y)}class g6 extends D2{constructor(e=new E4([new r1(0,.5),new r1(-.5,-.5),new r1(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const l=[],n=[],q=[],s=[];let a=0,r=0;if(Array.isArray(e)===!1)o(e);else for(let m=0;m<e.length;m++)o(e[m]),this.addGroup(a,r,m),a+=r,r=0;this.setIndex(l),this.setAttribute("position",new t2(n,3)),this.setAttribute("normal",new t2(q,3)),this.setAttribute("uv",new t2(s,2));function o(m){const h=n.length/3,c=m.extractPoints(t);let f=c.shape;const x=c.holes;e4.isClockWise(f)===!1&&(f=f.reverse());for(let u=0,p=x.length;u<p;u++){const A=x[u];e4.isClockWise(A)===!0&&(x[u]=A.reverse())}const d=e4.triangulateShape(f,x);for(let u=0,p=x.length;u<p;u++){const A=x[u];f=f.concat(A)}for(let u=0,p=f.length;u<p;u++){const A=f[u];n.push(A.x,A.y,0),q.push(0,0,1),s.push(A.x,A.y)}for(let u=0,p=d.length;u<p;u++){const A=d[u],B=A[0]+h,v=A[1]+h,g=A[2]+h;l.push(B,v,g),r+=3}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return Hq(t,e)}static fromJSON(e,t){const l=[];for(let n=0,q=e.shapes.length;n<q;n++){const s=t[e.shapes[n]];l.push(s)}return new g6(l,e.curveSegments)}}function Hq(i,e){if(e.shapes=[],Array.isArray(i))for(let t=0,l=i.length;t<l;t++){const n=i[t];e.shapes.push(n.uuid)}else e.shapes.push(i.uuid);return e}class r4 extends D2{constructor(e=1,t=32,l=16,n=0,q=Math.PI*2,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:l,phiStart:n,phiLength:q,thetaStart:s,thetaLength:a},t=Math.max(3,Math.floor(t)),l=Math.max(2,Math.floor(l));const r=Math.min(s+a,Math.PI);let o=0;const m=[],h=new S,c=new S,f=[],x=[],d=[],u=[];for(let p=0;p<=l;p++){const A=[],B=p/l;let v=0;p==0&&s==0?v=.5/t:p==l&&r==Math.PI&&(v=-.5/t);for(let g=0;g<=t;g++){const F=g/t;h.x=-e*Math.cos(n+F*q)*Math.sin(s+B*a),h.y=e*Math.cos(s+B*a),h.z=e*Math.sin(n+F*q)*Math.sin(s+B*a),x.push(h.x,h.y,h.z),c.copy(h).normalize(),d.push(c.x,c.y,c.z),u.push(F+v,1-B),A.push(o++)}m.push(A)}for(let p=0;p<l;p++)for(let A=0;A<t;A++){const B=m[p][A+1],v=m[p][A],g=m[p+1][A],F=m[p+1][A+1];(p!==0||s>0)&&f.push(B,v,F),(p!==l-1||r<Math.PI)&&f.push(v,g,F)}this.setIndex(f),this.setAttribute("position",new t2(x,3)),this.setAttribute("normal",new t2(d,3)),this.setAttribute("uv",new t2(u,2))}static fromJSON(e){return new r4(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class L5 extends D2{constructor(e=new N7(new S(-1,-1,0),new S(-1,1,0),new S(1,1,0)),t=64,l=1,n=8,q=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:l,radialSegments:n,closed:q};const s=e.computeFrenetFrames(t,q);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals;const a=new S,r=new S,o=new r1;let m=new S;const h=[],c=[],f=[],x=[];d(),this.setIndex(x),this.setAttribute("position",new t2(h,3)),this.setAttribute("normal",new t2(c,3)),this.setAttribute("uv",new t2(f,2));function d(){for(let B=0;B<t;B++)u(B);u(q===!1?t:0),A(),p()}function u(B){m=e.getPointAt(B/t,m);const v=s.normals[B],g=s.binormals[B];for(let F=0;F<=n;F++){const z=F/n*Math.PI*2,_=Math.sin(z),M=-Math.cos(z);r.x=M*v.x+_*g.x,r.y=M*v.y+_*g.y,r.z=M*v.z+_*g.z,r.normalize(),c.push(r.x,r.y,r.z),a.x=m.x+l*r.x,a.y=m.y+l*r.y,a.z=m.z+l*r.z,h.push(a.x,a.y,a.z)}}function p(){for(let B=1;B<=t;B++)for(let v=1;v<=n;v++){const g=(n+1)*(B-1)+(v-1),F=(n+1)*B+(v-1),z=(n+1)*B+v,_=(n+1)*(B-1)+v;x.push(g,F,_),x.push(F,z,_)}}function A(){for(let B=0;B<=t;B++)for(let v=0;v<=n;v++)o.x=B/t,o.y=v/n,f.push(o.x,o.y)}}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new L5(new U7[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class H7 extends F3{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new z1(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new z1(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D5,this.normalScale=new r1(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Wq extends F3{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new z1(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new z1(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D5,this.normalScale=new r1(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=C5,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}const c6={enabled:!1,files:{},add:function(i,e){this.enabled!==!1&&(this.files[i]=e)},get:function(i){if(this.enabled!==!1)return this.files[i]},remove:function(i){delete this.files[i]},clear:function(){this.files={}}};class Xq{constructor(e,t,l){const n=this;let q=!1,s=0,a=0,r;const o=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=l,this.itemStart=function(m){a++,q===!1&&n.onStart!==void 0&&n.onStart(m,s,a),q=!0},this.itemEnd=function(m){s++,n.onProgress!==void 0&&n.onProgress(m,s,a),s===a&&(q=!1,n.onLoad!==void 0&&n.onLoad())},this.itemError=function(m){n.onError!==void 0&&n.onError(m)},this.resolveURL=function(m){return r?r(m):m},this.setURLModifier=function(m){return r=m,this},this.addHandler=function(m,h){return o.push(m,h),this},this.removeHandler=function(m){const h=o.indexOf(m);return h!==-1&&o.splice(h,2),this},this.getHandler=function(m){for(let h=0,c=o.length;h<c;h+=2){const f=o[h],x=o[h+1];if(f.global&&(f.lastIndex=0),f.test(m))return x}return null}}}const Yq=new Xq;class A6{constructor(e){this.manager=e!==void 0?e:Yq,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const l=this;return new Promise(function(n,q){l.load(e,n,t,q)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const V2={};class jq extends Error{constructor(e,t){super(e),this.response=t}}class Zq extends A6{constructor(e){super(e)}load(e,t,l,n){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const q=c6.get(e);if(q!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(q),this.manager.itemEnd(e)},0),q;if(V2[e]!==void 0){V2[e].push({onLoad:t,onProgress:l,onError:n});return}V2[e]=[],V2[e].push({onLoad:t,onProgress:l,onError:n});const s=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,r=this.responseType;fetch(s).then(o=>{if(o.status===200||o.status===0){if(o.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||o.body===void 0||o.body.getReader===void 0)return o;const m=V2[e],h=o.body.getReader(),c=o.headers.get("Content-Length"),f=c?parseInt(c):0,x=f!==0;let d=0;const u=new ReadableStream({start(p){A();function A(){h.read().then(({done:B,value:v})=>{if(B)p.close();else{d+=v.byteLength;const g=new ProgressEvent("progress",{lengthComputable:x,loaded:d,total:f});for(let F=0,z=m.length;F<z;F++){const _=m[F];_.onProgress&&_.onProgress(g)}p.enqueue(v),A()}})}}});return new Response(u)}else throw new jq(`fetch for "${o.url}" responded with ${o.status}: ${o.statusText}`,o)}).then(o=>{switch(r){case"arraybuffer":return o.arrayBuffer();case"blob":return o.blob();case"document":return o.text().then(m=>new DOMParser().parseFromString(m,a));case"json":return o.json();default:if(a===void 0)return o.text();{const h=/charset="?([^;"\s]*)"?/i.exec(a),c=h&&h[1]?h[1].toLowerCase():void 0,f=new TextDecoder(c);return o.arrayBuffer().then(x=>f.decode(x))}}}).then(o=>{c6.add(e,o);const m=V2[e];delete V2[e];for(let h=0,c=m.length;h<c;h++){const f=m[h];f.onLoad&&f.onLoad(o)}}).catch(o=>{const m=V2[e];if(m===void 0)throw this.manager.itemError(e),o;delete V2[e];for(let h=0,c=m.length;h<c;h++){const f=m[h];f.onError&&f.onError(o)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Jq extends A6{constructor(e){super(e)}load(e,t,l,n){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const q=this,s=c6.get(e);if(s!==void 0)return q.manager.itemStart(e),setTimeout(function(){t&&t(s),q.manager.itemEnd(e)},0),s;const a=C4("img");function r(){m(),c6.add(e,this),t&&t(this),q.manager.itemEnd(e)}function o(h){m(),n&&n(h),q.manager.itemError(e),q.manager.itemEnd(e)}function m(){a.removeEventListener("load",r,!1),a.removeEventListener("error",o,!1)}return a.addEventListener("load",r,!1),a.addEventListener("error",o,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),q.manager.itemStart(e),a.src=e,a}}class P5 extends A6{constructor(e){super(e)}load(e,t,l,n){const q=new C2,s=new Jq(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(e,function(a){q.image=a,q.needsUpdate=!0,t!==void 0&&t(q)},l,n),q}}class W7 extends J1{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new z1(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}const q7=new G1,i7=new S,a7=new S;class $q{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new r1(512,512),this.map=null,this.mapPass=null,this.matrix=new G1,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new F5,this._frameExtents=new r1(1,1),this._viewportCount=1,this._viewports=[new R1(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,l=this.matrix;i7.setFromMatrixPosition(e.matrixWorld),t.position.copy(i7),a7.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(a7),t.updateMatrixWorld(),q7.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(q7),l.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),l.multiply(t.projectionMatrix),l.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}const s7=new G1,u4=new S,a5=new S;class Kq extends $q{constructor(){super(new d2(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new r1(4,2),this._viewportCount=6,this._viewports=[new R1(2,1,1,1),new R1(0,1,1,1),new R1(3,1,1,1),new R1(1,1,1,1),new R1(3,0,1,1),new R1(1,0,1,1)],this._cubeDirections=[new S(1,0,0),new S(-1,0,0),new S(0,0,1),new S(0,0,-1),new S(0,1,0),new S(0,-1,0)],this._cubeUps=[new S(0,1,0),new S(0,1,0),new S(0,1,0),new S(0,1,0),new S(0,0,1),new S(0,0,-1)]}updateMatrices(e,t=0){const l=this.camera,n=this.matrix,q=e.distance||l.far;q!==l.far&&(l.far=q,l.updateProjectionMatrix()),u4.setFromMatrixPosition(e.matrixWorld),l.position.copy(u4),a5.copy(l.position),a5.add(this._cubeDirections[t]),l.up.copy(this._cubeUps[t]),l.lookAt(a5),l.updateMatrixWorld(),n.makeTranslation(-u4.x,-u4.y,-u4.z),s7.multiplyMatrices(l.projectionMatrix,l.matrixWorldInverse),this._frustum.setFromProjectionMatrix(s7)}}class X7 extends W7{constructor(e,t,l=0,n=1){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=l,this.decay=n,this.shadow=new Kq}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Qq extends W7{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class ei{constructor(e,t,l=0,n=1/0){this.ray=new y5(e,t),this.near=l,this.far=n,this.camera=null,this.layers=new M5,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,l=[]){return E5(e,this,l,t),l.sort(r7),l}intersectObjects(e,t=!0,l=[]){for(let n=0,q=e.length;n<q;n++)E5(e[n],this,l,t);return l.sort(r7),l}}function r7(i,e){return i.distance-e.distance}function E5(i,e,t,l){if(i.layers.test(e.layers)&&i.raycast(e,t),l===!0){const n=i.children;for(let q=0,s=n.length;q<s;q++)E5(n[q],e,t,!0)}}class o7{constructor(e=1,t=0,l=0){return this.radius=e,this.phi=t,this.theta=l,this}set(e,t,l){return this.radius=e,this.phi=t,this.theta=l,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,l){return this.radius=Math.sqrt(e*e+t*t+l*l),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,l),this.phi=Math.acos(e2(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class ti{constructor(){this.type="ShapePath",this.color=new z1,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new _5,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,l,n){return this.currentPath.quadraticCurveTo(e,t,l,n),this}bezierCurveTo(e,t,l,n,q,s){return this.currentPath.bezierCurveTo(e,t,l,n,q,s),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(p){const A=[];for(let B=0,v=p.length;B<v;B++){const g=p[B],F=new E4;F.curves=g.curves,A.push(F)}return A}function l(p,A){const B=A.length;let v=!1;for(let g=B-1,F=0;F<B;g=F++){let z=A[g],_=A[F],M=_.x-z.x,T=_.y-z.y;if(Math.abs(T)>Number.EPSILON){if(T<0&&(z=A[F],M=-M,_=A[g],T=-T),p.y<z.y||p.y>_.y)continue;if(p.y===z.y){if(p.x===z.x)return!0}else{const X=T*(p.x-z.x)-M*(p.y-z.y);if(X===0)return!0;if(X<0)continue;v=!v}}else{if(p.y!==z.y)continue;if(_.x<=p.x&&p.x<=z.x||z.x<=p.x&&p.x<=_.x)return!0}}return v}const n=e4.isClockWise,q=this.subPaths;if(q.length===0)return[];let s,a,r;const o=[];if(q.length===1)return a=q[0],r=new E4,r.curves=a.curves,o.push(r),o;let m=!n(q[0].getPoints());m=e?!m:m;const h=[],c=[];let f=[],x=0,d;c[x]=void 0,f[x]=[];for(let p=0,A=q.length;p<A;p++)a=q[p],d=a.getPoints(),s=n(d),s=e?!s:s,s?(!m&&c[x]&&x++,c[x]={s:new E4,p:d},c[x].s.curves=a.curves,m&&x++,f[x]=[]):f[x].push({h:a,p:d[0]});if(!c[0])return t(q);if(c.length>1){let p=!1,A=0;for(let B=0,v=c.length;B<v;B++)h[B]=[];for(let B=0,v=c.length;B<v;B++){const g=f[B];for(let F=0;F<g.length;F++){const z=g[F];let _=!0;for(let M=0;M<c.length;M++)l(z.p,c[M].p)&&(B!==M&&A++,_?(_=!1,h[M].push(z)):p=!0);_&&h[B].push(z)}}A>0&&p===!1&&(f=h)}let u;for(let p=0,A=c.length;p<A;p++){r=c[p].s,o.push(r),u=f[p];for(let B=0,v=u.length;B<v;B++)r.holes.push(u[B].h)}return o}}class li extends g6{constructor(e,t){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(e,t)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:v5}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=v5);const k1=[["8BD3708E-8E3D-44B8-9E92-1050FA7987E5",`the essence of 
 love / meaning`,14.5,90,10649230,40],["D4724AD1-EECD-4975-920C-CDAD71AA53C3",`the essence of 
 wisdom / will`,14.5,210,8965361,40],["0027E01B-C40A-49F0-9833-30244700C39E",`the essence of 
 salvation / peace`,14.5,330,15916398,40],["66F19982-732D-4744-AF06-F1F8A68D898B","Rewiring the gut",18,330,15916398,40],["287B1377-9E86-42B2-99F1-EBBEA971AB08","Rewiring the heart",18,90,10649230,40],["B5027C8B-D476-49B0-A713-ACC447159AE1","Rewiring the head",18,211,8965361,40],["4A481D1E-5DB6-4ABB-B9D0-8164F41393F9","Unconditional Peace",21,330,15916398,40],["876BC8AC-4013-448E-9ACA-A82DA031E09C","Transcendence",35,328,15916398,40],["008ADA1B-1D52-4F68-AB43-97D070D7774C",`Existential exploration / 
 Insight meditation`,52,321,15916398,40],["3C87D468-FC43-4E9C-9CEE-0EFA0B63EA7A","Deep states of calm",67,307,15916398,40],["D131CF5B-A895-4212-A4D4-A7E976CF5DA6","real meaning",21,245,8965361,20],["90212AAB-4CFE-4FDF-850A-7E6141F727AE",`potentially the source of 
 not-so-obvious (but highly 
 attractive) \u201Cqualities\u201D`,25,235,8965361,25],["611A4954-9E7D-4D25-AD7D-E1FAB38482F5","freedom",28,237,8965361,20],["5C63879D-74A6-458B-8193-AFA06A62F794","unshakable peace",30,230,8965361,20],["2A36743D-9E95-4B9D-A8EB-6B4B11F20AB5","salvation",27,227,8965361,20],["963CA1BA-9539-4089-96AB-EB0E78602390","true wisdom",32,235,8965361,20],["EEA100C2-4D71-40C8-B70B-FE6A6D01D33B","why important?",22.5,224,8965361,30],["982A6AFF-D536-4504-B63A-EC42A2712432",`Unconditional 
        Truth`,22.5,211,8965361,50],["F1EB56D4-15AE-4837-A070-40550E1262C7","must be reduced to",29,205,8965361,40],["506E723E-071E-4694-80AD-06BBD0681E26",`Conventional 
        truth`,35,211,8965361,50],["0DA43E60-8DB6-4401-A1B1-F3BC1B5EA856","must transcend",40,217,8965361,40],["6BDD61FD-3F46-453B-8714-64AF81BCE3F9","limitations of",35,223,8965361,30],["A81C54C1-D640-4297-AFA9-346A25B8132E","contextual",44,232,8965361,25],["9E19FF41-5144-4745-9C0B-A99858302CDE","ways of cutting the apple",36,238,8965361,25],["050308DE-F371-436D-AE9F-B0D5B7F8C282","lost in reduction",41,237,8965361,25],["A7D7AE08-AFD8-49B2-A964-2098C4ACEAF4","Diversity",35,199,8965361,30],["0EC034DC-AFC0-4C17-84CF-0DD0991AFDAD","Dualist ontologies",31,183,8965361,40],["302B64FD-4E04-4823-8E13-C7F2FAA4E7C9","Dualism",36,177,8965361,30],["2EF6A6A1-AC8E-4A00-BC75-F36E9AA0A60F","to be communicated",40,205,8965361,40],["3F0021AE-02A1-44B8-AE19-11C0D2A4FE75","to realise",29,217,8965361,40],["D456FA2C-65F4-40D2-AC84-4C7E2266BA84","Unity",22.5,199,8965361,30],["B90D2293-D457-4567-8102-363F70D95781","Monist ontologies",27,183,8965361,40],["2930997B-A726-473E-B6E9-333C2732271F","Idealism",24,184,8965361,30],["2B64F02A-BEAA-4403-8380-A8B2614D5F90","Panpsychism",24,174,8965361,30],["4D70D48E-D8D1-45C6-8E15-C0837ABBC1D7","Physicalism",24,164,8965361,30],["EFDE4F51-B2DD-443A-9C35-39F5DA1C1DB6","Emergence",25.5,162,8965361,25],["FBC53F23-9EA7-4B55-B6D4-BC9C456FD9B8","weak",27,160,8965361,20],["23979ADC-AD3F-4447-BF76-224A807C2144","strong",32,170,8965361,20],["8F0D0BF3-BF3C-4E2B-9E1E-B16E615EFF0F",`the essence of 
\u201Cyou\u201D / life`,31,245,8965361,20],["2A4B9CAB-EEC1-48A8-9BE6-5A519210D7A7","all-encompassing love",27,248,8965361,20],["C978C527-2523-4078-8B16-523DF8553FD5",`the core of 
will / agency`,24,250,8965361,20],["F47603CA-44A7-4009-B07B-29DFA540729D","Unconditional Love",21,90,10649230,40],["87B9AFEC-9F64-4748-87F8-F64F2B31FC29","Atammayat\u0101",22.5,101,10649230,25],["FEB31ADB-CF1C-45B6-9522-C37B4F4C1E07","Su\xF1\xF1at\u0101",24.5,105,10649230,25],["EF7C61DB-A84C-4D0A-941F-B5EF2D64F28C","Tath\u0101t\u0101",27,108,10649230,25],["0EF99714-0619-45EC-A71D-B4F01B6211DC","Liberation",31,108,10649230,40],["7AFE8322-410C-44FA-8223-F6080F45359C","from",31,94,10649230,25],["236FD67F-CD44-4B75-96AD-B16FA578E708","delusion",34,94,10649230,30],["C9DCCC19-CD84-427B-9234-09050646BCD3","hatred",33,89,10649230,30],["10D1D640-DE4C-4334-B08F-A4716D198E5F","greed",29,90,10649230,30],["89ED6168-2517-4EF9-A5D6-3635A0C80BDC",`Fundamental 
 perspective change`,30,131,8965361,40],["074931F9-D5F1-401B-ABE0-1F26BA921E1F","From paradoxes to wisdom",25,131,8965361,40],["E0E6199E-B9CC-4E3B-924F-4F481CEB6B8B",`Direct experience-based 
 understanding`,35,150,8965361,40],["9E5C67A2-894D-4AB1-AF81-E62C2BF4C1AD","Intellectual understanding",51,159,8965361,40],["39A86FA9-4CDF-4DD2-8AB6-78A36AC75762",`Basic conceptual 
 understanding`,72,162,8965361,40],["60046B15-D09E-4F1F-9BC0-BA3900E29EB9","Levels of understanding",81,169,8965361,40],["263D9AEE-6F33-4D35-B945-CE35173E2F11","Analysis / questioning",79,187,8965361,40],["3A45A8B4-3FEE-48C4-AB56-730C2284B9F0","Open-mindedness",89,184,8965361,40],["37A0AEC4-634C-4BF4-A14B-7B6E25172BBC","Observation",94,170,8965361,40],["4572B437-5182-4EBE-A383-F76440484F8E","Indirect",96,164,8965361,40],["9BA80071-89E9-400F-89CA-53CA700FA703","Instruments",97,158,8965361,40],["450F8534-2F59-4A8E-BA92-D417FD0FE000","Advantages",95.5,150,8965361,40],["951EBA46-9D4B-453F-B0B6-C03CFA9BD6C0","Sensing",93,158,8965361,40],["C2B220C0-B7D4-432B-9ADC-1E40F1A66E25","Introspection",90,158,8965361,40],["B470B5D1-31ED-4F91-A94D-6A94CF45E744","Limitations",93.5,150,8965361,40],["95A61B65-7A40-42FA-8622-D7A0B736BA9C","Biases",91.5,150,8965361,40],["0CEDFFCF-0C8D-4705-B40C-439631CCD3E1","Direct",92,164,8965361,40],["B8BA585E-D985-44A9-A8E9-6BC1E3EA3731",`Strategies for 
Understanding`,98,197,8965361,50],["AA38CD3C-7D47-4CD3-956C-5EE5C285E408","Dogmatism",109,193,8965361,40],["16C1A9C0-30BF-441E-8DA4-3216C0A42C51",`Thought labyrinths / 
rumination`,103,181,8965361,40],["4265E048-CDF8-4B44-836C-38549C965725","Wearing blinders",94,205,8965361,40],["807EE50B-B4E4-42B7-B1B4-10EBB38C1299",`Settles in: 
Convergence between 
assumptions and reality`,111,212,8965361,40],["B5E8EA63-9C7A-4CAD-8B29-1EC4ACDF5F63","Depth of transformation",98,237,8965361,40],["B07DBBCA-2123-4D55-828C-6931A999128B","Brain",82,257,8965361,40],["C6BACFDA-45F3-4BD7-ACE4-3720C8E6E7D8","Opinions",86,258,8965361,40],["794FB1D5-42CF-496B-929F-9568976B58FF","Intellectual view",80,262,8965361,40],["12872E37-D9BC-4CDD-BB7E-E09FD46D993A","Identification",75,243,8965361,40],["2875511F-F91A-4807-9839-4B7153B23143","Witnessing",64,246,8965361,40],["F9E35865-1D97-4667-B3FE-A0EDB4D37B8A","What am I not?",64,235,8965361,40],["3E8EDBA9-59E1-4835-8343-4AA9FF799D49","Two methods of approach",60,235,8965361,40],["64077339-5087-4CBD-A706-C1AA35E8AC8B","What am I?",55,235,8965361,40],["9E801875-A714-49E5-969A-D9A5E5497D18","running the risk of",55,228,8965361,40],["31475508-739B-4966-ADC9-D8EBCE5FE3DB","Eternalist view",55,219.5,8965361,40],["A0E9CFBE-CFD6-47E2-8D78-15E5382BBC1E",`Drowning the baby 
in the bathwater`,53,219.5,8965361,25],["FBC40F7A-8C27-43BE-9E80-2E330B1EAE7B",`The fundamental nature
 of awareness`,60,220,8965361,40],["9A853604-4CB0-4B1B-98E1-E4D95626433A","The Screen",53,212,8965361,40],["93C64795-A33C-4578-9694-B8B0FFE287AE","What can we know?",57,207,8965361,40],["73E6253F-D36B-45B8-ABF9-A72432F5F576","The content",53,205,8965361,40],["D5F25680-4FED-4B74-A5D5-1B15A8C8A580","The way it is",45,205,8965361,40],["C5096451-E5CF-4498-AF7A-E97C3C8197F9","Reductive categories",45,217,8965361,40],["53296584-40BE-4F83-96D3-B77540245AC2","Direct",66,210,8965361,40],["EE9D175C-0953-4B73-9B31-5C7AD0C50288","Biases",70,214,8965361,40],["5A058F3F-7A05-44E2-8417-7B99A2437742","Experimentation",70,202,8965361,40],["42B4C435-0661-46DB-8D8B-AB2AA00D601B","Mathematics",72,201.5,8965361,40],["64BC8F62-AA83-4E65-B1A3-D982DE8A86C1","Statistics",74,201,8965361,40],["87EFBBA1-F6E2-4A35-8897-A73210A18318","Indirect",66,203,8965361,40],["FC6818C0-13A9-44E2-8A38-7C4D4FB8827B","Limitations",72,214,8965361,40],["8873A022-151A-41EA-B380-2284DEB82A22","Advantages",74,213,8965361,40],["43F70C8C-15B6-4EF0-81F4-E26FF4FB8DC3","running the risk of",64,228,8965361,40],["D8BD31CF-36A0-45FD-8EFD-A5A1428C03E9","Annihilationist view",64,219.5,8965361,40],["9CC41D5D-A392-4C0B-8FA9-B455CAF9AF91",`Throwing the baby out 
with the bathwater`,66,219.5,8965361,25],["334445AA-FC20-48D6-9A7D-2558857C2346","Re-uniting",49,246,8965361,40],["074F7C7B-C390-4328-A205-B73143806FFA","Gut",39,259,8965361,40],["9E66D7AE-5825-4691-BADB-FC7A75F7B29D","Perceptual view",34,262,8965361,40],["2C809F14-A1A9-4178-B236-FA6408CD789D","Experiential",41,265,8965361,40],["F7A69942-1F8A-42CC-A8C3-8DF26E439289","What do I take to be me?",82,226.5,8965361,40],["5AE32B80-01A1-4314-9A23-453A397A2599","What ceases?",84,225,8965361,40],["72A32148-45A5-41A7-A836-0CE959AF38D4","What persists?",86,225,8965361,40],["3F0C901E-76B2-463D-B17A-8078CA2E1C91","Feelings",76,227,8965361,40],["E27CC807-EB70-45C4-84B3-DDF1F8AADB00","Body",77,221,8965361,40],["1E34F972-7322-4F63-A271-2BC8A5241BB8","Will",87,232,8965361,40],["76AB6EF8-AEF6-41D3-9576-2FE8D14F462B","Perceptions",76,233,8965361,40],["5BEDE28D-38C4-4D03-B4C6-2C74ECD89078","Consciousness",89,226,8965361,40],["D7868612-7C4F-49F8-BCAA-B03E2BCEF450","Thoughts",84,236,8965361,40],["820F18C3-7140-4923-9D3A-2CD81A26B702","Memory",80,237,8965361,40],["7BD9A4A4-29F0-46A8-8D8E-FAD18F242DB6","Heart",61,263,8965361,40],["EB83C866-FF54-449B-A65C-24ECDE2820C1","Action",65,266,8965361,40],["3D5EC2BE-F6E7-4BC2-A093-B8ABFF663C58","Felt view",58,267,8965361,40],["A35D6C5D-B56F-416F-B337-41FB9E923AE0",`Existential problem: 
 What - and how - 
 do I know?`,150,210,8965361,40],["EDCAFFF6-FD78-40E0-B719-97569DCD8819",`The Human - 
Reason`,162,211,8965361,40],["46CBB5AE-79D5-4808-A400-4B804DA91E12",`What matters to 
your head`,167,211,8965361,50],["8D82CC00-C9F5-4B9E-B256-A879D4623B3C",`What matters to 
your heart`,167,90,10649230,50],["35476F95-E324-40D2-B224-A5E27568028C",`The Lion - 
Thymos`,162,90,10649230,40],["4D1CEB04-6987-4C58-93B0-57DBB0914867",`Existential problem: 
What gives life 
meaning?`,153,91,10649230,40],["0EF9450D-3CB7-4D13-BCFB-49088E87F374",`Settles in: Happiness, 
love, meaning`,135,91,10649230,40],["80130A99-E12B-459A-B43D-1CE8BB3B1EF2",`Strategies for 
happiness / love`,128.5,91.5,10649230,50],["2095179D-0AC4-4378-8E6F-8F71E2793FAD",`getting, avoiding, manipulating, 
changing, controlling, collecting`,120,98,10649230,40],["AE242003-1C0A-40BF-AEA2-567E61901171","doing",120,111,10649230,40],["F3695B21-1EAA-404B-9239-0767DA0BC90C","past / future",122,112,10649230,40],["B7A263AD-5457-4712-A089-03B24D041629","personal identification",124.5,114.5,10649230,40],["B4399091-3D0A-472B-A40C-BC8CDD097E7F","depended on comparison",127,114,10649230,40],["20ADE73B-D8CA-4CF8-ABA2-4D0A52F1CAAB","non-sustainable happiness",129,114,10649230,40],["D6B5FE51-C8D9-42EB-B0BE-07B09B51776C",`accepting, letting be, allowing, 
embracing, opening, experiencing`,120,81,10649230,40],["6473A93C-A4A4-41D5-9765-D58B3F8A57EA","being",121,68,10649230,40],["0A57B7F6-E875-485D-98F2-66458F5FBC6B","present",123,68,10649230,40],["19DB1035-B51E-4F0A-8F97-888375D12E8F","selfless",125,68,10649230,40],["34C06752-B7AD-461D-A5E9-B29CAE227645","sustainable happiness",130,67,10649230,40],["83D9EEC0-3314-4BD5-826E-F1ADDA1492EA","independent of comparison",127,66,10649230,40],["1E7C0EB1-1DDE-4044-A8B7-E4540487DB1C","The threefold training",102.5,71,10649230,40],["E28DBBC9-DECF-4F9E-BFF7-6366EBCC51D4","S\u012Bla",95.5,63,10649230,50],["DA6F224D-BC2D-47BF-91C5-9538BF062D81","Methods",108,59,10649230,40],["603F93B5-AA5A-49C2-8AEE-440DA485BA40","Restraint",102.5,57,10649230,40],["F26DDAD3-74C1-48A8-9488-8BAB580947E7","Generosity",111,64,10649230,40],["05CF2077-5B2D-43E7-92AC-232082EA7F8C","The brahmavih\u0101ras",113,55,10649230,40],["F0AA6E16-8A46-43FA-B435-942FFF734B06","Loving-kindness",117,58,10649230,40],["BEA84E38-CF01-4A16-941B-F26EEE3E6D88","Compassion",118,51,10649230,40],["EB0FBD7E-7BA3-43E7-AB1C-2AC2DBFAC7F3","Equanimity",110,52,10649230,40],["C07EE1B5-5DC2-4E9E-AD6C-A8550A7991FF","Sympathetic joy",114,46,10649230,40],["DEA78281-438E-4CB6-ADCE-25DC85D9FF37","Self-compassion",105,52,10649230,40],["202B8B0D-13DA-459A-9D5E-ED5DD40D30E4","Emotional blockages",66,30,10649230,40],["0AA203B9-8B52-4412-B32D-D412F894D779","P\u012Bti",56,53,10649230,40],["6A20558B-3A35-4D14-8EBE-3C5DF4F02868","Components",57,60,10649230,40],["96786F52-EB9D-42BB-B854-457841A162BA","Sukha",53,57.5,10649230,40],["28106D6F-9E60-4579-A457-B2F4DB781D6D","Ekaggat\u0101",53.5,64,10649230,40],["D81C6E33-ED3A-45ED-9567-78EC22F9A6C7","Vitakka",61,61,10649230,40],["8CFD3A14-106B-4D63-9B2B-1CA46A8CA16B","Vic\u0101ra",60,55,10649230,40],["2BAF7986-984E-4937-BA03-E5CBAA234AEF","Challenging emotions",42,40,10649230,40],["C0074FCF-7AB4-4781-BC26-3812FBA61015","shame",44,50.3,10649230,40],["CB62D122-2342-4D33-B98D-EE3BD70B6538","grief",40,48,10649230,40],["64192F80-785C-4B14-AF81-987193E41085","anger / hate",38,47.2,10649230,40],["83BC3254-7B62-4D9C-BC20-192D2D442466","pride / conceit",36,47,10649230,40],["4788E206-DE47-48FA-8DC4-326274991F8D","doubt / confusion",48,50.5,10649230,40],["111EBFA8-E400-4984-A638-63120DDC1590","fear",46,52,10649230,40],["1D823800-DD7A-4B6F-94EA-517D4DE9876B","Low",124,42,15916398,40],["C0993BB8-9C64-4F7A-A673-289EA2A33D0D","Level of experiencing",140,25,15916398,40],["00E891B6-75E2-43B7-97B4-62F6DD69B15B","Emotions",146,10,15916398,40],["B477D774-01E4-4F6A-93B1-111E699FFE75","Components of emotion",141,11,15916398,40],["E2D52070-A83C-4D48-A218-BB3DC7BEAF21","Emotional style",143,1,15916398,40],["EBCF0E75-DA1D-4533-BEEA-73657C4588AF","Types of emotion",150,20,15916398,40],["4AF3AF2F-5D76-4620-911E-54398F84F288",`Degree of emotional 
processing`,146,28,15916398,40],["672E2CBD-7421-4E94-9728-95353BCD772E","High",80,11,15916398,40],["14BA8BEB-FA35-44B7-9DE3-A1503614069D","Sam\u0101dhi",64.5,71.5,10649230,50],["1EABAD2F-1D1A-4124-A324-4EFAD6DDF176","Methods",70,58,10649230,40],["A478FC19-7AC1-4480-A9C9-93AD4C925970","Directed attention",75,57,10649230,40],["6E92A01E-0E8D-494E-8249-EF0EF0D22987","Bodily sensations",80,59,10649230,40],["349EFC6D-D96C-4E61-A839-93D31BF698B5","Breath",79,51,10649230,40],["ED71676A-652A-400A-AAEB-70A6B980A6F2","Mantra",76,47,10649230,40],["61282C0C-C654-4B5D-B2F9-ECF698B16489","Choiceless awareness",69,48,10649230,40],["9FC8F28B-4B52-4BFC-9349-4B5271FCDD84","Open awareness",72,48,10649230,40],["E8F9F0EB-2B89-4D4C-901E-A029C0211A93","Progression",53.5,82.5,10649230,40],["CCBD9962-2FF7-4C39-97B9-D93FA4044BD3","outward to inward",56.5,84,10649230,20],["D0E50499-8C3F-4818-BBAA-FEB433FC1704","complexity to simplicity",49,80,10649230,20],["BC583511-0DA5-4F1E-B699-D72CB449DD00","movement to stillness",52,76,10649230,20],["C4B7A8B7-5171-4873-B269-0A0582CA2084","doing to being",56.5,76,10649230,20],["FC88FDFD-AE27-4F76-938D-6FE581E65D08","coarse to refined",48,85,10649230,20],["30F3B081-5F90-4F13-BC8D-BBC7293CEC04","judging to embracing",54,75,10649230,20],["D49F0D1E-5DD6-4147-88E2-604F7E4A3566","diversity to unity",47,90,10649230,20],["268F9754-9375-4E1F-B752-233A8F83F592","Hindrances / Obstacles",42,68,10649230,40],["B46F4E38-26DA-4388-91DA-32731D7B44A1","habits",44,62,10649230,40],["128A73FA-B982-4A3E-B9C8-4AFBAB70AB56","distracting",48,57,10649230,40],["6DDD2CD3-CE4A-492C-A6BF-8044A902E5E0","indulgent",44,55,10649230,40],["8AABE820-1F0B-4DDD-BFF2-9177B2A47112","avoidant",46,56,10649230,40],["21DDAAEC-A832-4BB4-9A82-D2F10FCAA66F",`evolutionary 
conditioned 
ignorance`,35.5,66,10649230,40],["A6BA6799-B325-453E-B4D1-BCD71CF12705","wrong views about",38,61,10649230,40],["FEABFE95-869D-40F9-9D0B-5EE5BA3D85E1","happiness / suffering",40,55,10649230,40],["D358D3A2-957C-470B-BC5F-A71A7622AE07","reality",38,53,10649230,40],["55EF8116-598E-4168-ADBC-9248DB79A821","self",36,53,10649230,40],["CBDECA18-D9A1-4FDE-84FD-DDB8849710A3","Seven factors of awakening",98,81,10649230,40],["A5DD6CEA-4DFA-4DDB-B586-FE8629D274B1","mindfulness",91,73,10649230,40],["F05326DF-FA0C-4619-8A75-0411CB1CB2F9","investigation",85,71,10649230,40],["9EAF3484-3F2C-415B-8067-B50A3FA1B974","energy",79,71,10649230,40],["ADBA0E07-67F4-47EC-B776-EE198BCA1A53","rapture",73,72,10649230,40],["75FF467B-7F2F-4EEC-ADC9-2D64EE46D692","tranquility",68.5,77.5,10649230,40],["03593653-145D-4B52-9873-D90B412C8468","samadhi",62,87,10649230,40],["4F429C0B-B3D5-49B9-AC7B-BE0B2BAA0953","equanimity",49,95,10649230,40],["B1212500-7C71-4B0B-B979-C8A5E93B544C","Natural unfolding",98,93,10649230,40],["D7191BF4-96AD-46A9-89F8-B015FD27C991","virtuous conduct",92,91,10649230,40],["F63DCD53-F24F-4AE7-84C0-61419A5D6E68","freedom from remorse",90,82,10649230,40],["6FD89C72-5D89-4A96-B643-4BDDDEC450AC","gladness",85,77,10649230,40],["28B608E4-AED5-4042-977B-B32908F4DC0F","rapture",81,77,10649230,40],["04FEF0CF-A123-4DB2-A9CC-72E134399258","bodily tranquility",76,77,10649230,40],["E78076C8-224D-4606-81AD-7DF62AE1B946","bliss",72,81,10649230,40],["6D9D49EF-63D9-441E-865B-80CFE99B3E48","samadhi",68,87,10649230,40],["E0E57B88-D092-45E3-93DE-F47199063BEA",`seeing things 
as they are`,60,95,10649230,40],["1F0628F7-D965-4529-8228-AA53C73527B2","disillusionment",53,99,10649230,40],["5A3B2B58-7D59-4EA8-BA25-EE9243C1AB8B","dispassion",44,100,10649230,40],["EC74E906-1F03-4570-A640-5E95985106E8","freedom and release",36,102,10649230,40],["7F7F7458-6893-4CAE-A35A-78DCBA2DF0A8",`Motivated by: 
Honour / Shame`,157,80,10649230,35],["5946ACA1-B182-4776-BAC0-5EC43E0480C6",`Mode: Empathy / 
Intuition / Faith`,157,104,10649230,35],["05C8F42F-1F73-443B-B461-A3FFE6867199",`Concerned with: 
Mid-term goals`,162,106,10649230,35],["E8C9F6D8-E4E3-4764-9449-4AC760B4EAA0",`Communal 
well-being`,162,119,10649230,30],["4C0B70B2-C4EC-4716-A08C-220E856D5B4A",`Growth potential: 
Can be trained`,162,73,10649230,35],["A870BA4E-6243-4C93-B823-BDF69104A69A","Cleaning up",162,59,10649230,30],["9BFCB2C3-78B9-4982-8501-2BFF113D4207",`What matters to 
your gut / genitals`,167,330,15916398,50],["2C1FEC64-B01F-4D90-93AF-4F17977F3E05",`The Beast - 
Appetite`,162,330,15916398,40],["27D920A3-4748-497F-92C3-0CEAE399325B",`Existential problem: 
What do I need 
to function?`,153,330,15916398,40],["3DB4BB32-A030-449C-B131-424A2FD3A651","Path of the Gut",144,335,7606813,70],["FB0B3D0C-9C10-4533-924E-96F0ACC2BB2D","Settles in: Peace",134,339,15916398,40],["744A07BE-0872-47C6-B69E-6FD2A3E8EC1B",`(Even need for excitement 
settles in peace)`,137,347,15916398,40],["13BD4AA3-E5C9-4A13-A702-70244A2B81AC","Strategies for peace",119,339,15916398,50],["6940ABE5-F16A-451E-9986-1853902A8FAA",`In terms of practical 
therapy work`,128,326,15916398,40],["2657C9EE-BFA1-43FA-BB34-1A624A4E5237","Mechanism of change",135,322,15916398,40],["228A6803-C3D9-420B-A083-476A5B6FE927","Method",130,311,15916398,40],["F095128A-1A37-4D3C-98C5-FAE6E3F9E808",`Islands of work 
in a sea of empathy`,124,303,15916398,40],["475EAF65-F5DA-4D50-AA66-64CF5305CBC9",`In terms of early 
development`,126,353,15916398,40],["39717030-47DE-4D14-8D3B-9D454BE3AF3B",`Authenticity vs. 
attachment`,134,4,15916398,40],["A5D7A8C8-3B1D-44A4-AA31-4B1602B10252","In terms of needs",103,334,15916398,40],["08A7BDCA-0161-40B1-9F74-EF7E09C1BE13",`Making adaptations 
in the world`,113,325,15916398,40],["8DFECF54-6362-48C2-84A0-B9A79FD7371A","Adapting one\u2019s mind",94,325,15916398,40],["4D115C88-FC8E-4544-AC27-0B775B126D44","In terms of emotion",103,346,15916398,40],["84C0342B-29BC-4E8A-A39D-0D638491312E","Embracing vulnerability",80,343,15916398,40],["F0CABC11-FB43-49D3-B32C-F6AC2F728BEF","Resisting vulnerability",125,10,15916398,40],["FF0DE3EB-BA66-4B54-9700-1075754A5EB3",`Motivated by: 
Pain / Pleasure`,156,319,15916398,35],["53CADF73-2F2C-4BCC-8748-842EE8177A85",`Growth potential: 
Can be tamed`,162,312,15916398,35],["D733DA5C-E0BC-4EAE-BD64-92B116E15988","Growing up",162,298,15916398,30],["5C54BDDE-E5AB-472E-BB3E-CC33CEDB5E2B",`Concerned with: 
Immidiate goals`,162,348,15916398,35],["CC9D819E-DC87-4E17-97B4-AADC851E9E8E",`Individual 
survival`,162,2,15916398,30],["8A3E20D3-00BC-47E5-AC05-E717C6A803C6",`Mode: Action / 
Needs / Emotion`,156,341,15916398,35],["83BA614D-5560-48B0-8377-217CF04E01FC","Needs",147,7,15916398,40],["E55861C5-E9D1-4B9A-956B-DC53B1C0E01E",`Mode: Thinking / 
Exploration`,156,220,8965361,35],["8405A4E1-F7F9-4016-86B8-2E5C98520036",`Motivated by: 
Truth / Falsity`,156,200,8965361,35],["8573618D-34C1-481C-A217-71AB05C7C4D7",`Concerned with: 
Long-term goals`,161,225,8965361,35],["F05FC454-9C67-4E53-AAC4-A288D7E0E4E2","Abstract principles",161,240,8965361,30],["B9839052-6809-4E31-8792-FF4DF8C9FC48",`Growth potential: Can 
discover principles`,161,195,8965361,35],["38B0E475-2D54-4818-ABC6-E353229FDFF2","Waking up",161,180,8965361,30],["68B6E135-509A-4064-9FF9-DE55C3B66A8E","What is life?",82,207,8965361,40],["6A92592D-70EE-451D-941A-AD8F8435EF6E","What is death?",84,207,8965361,40],["DC5F27E6-E594-4651-A151-4F70145EDFD5","What am I?",86,207,8965361,40],["092BED79-8510-4E20-9040-0BF73C433EB0",`Ontology - 
What is reality?`,56.5,182,8965361,40],["F1D5FF04-CA73-47D3-87C6-41C6BA8F6708","God?",62,177,8965361,40],["ACF82BBE-F34C-4E20-B18E-08F28B3ABA12","Consciousness?",59.5,172,8965361,40],["B6246F44-0855-4817-9D0D-D397E9DB7442","Space?",52,173,8965361,40],["050CF590-16D7-48A8-9656-E58FD0B6E8BF","Time?",54,170,8965361,40],["1EE48F2F-650A-413A-8F77-720A641BA416","Matter?",57,170,8965361,40],["C2DF7137-7E37-4EAD-8AF9-BDCF24C7A5BA","Ontologies",29,184,8965361,40],["20790E3B-9D36-40B2-82CB-56322AA09DE7",`Epistemology - how can 
we get true knowledge?`,62,204,8965361,40],["28763A09-FA38-43D2-A7C3-52E15D20F5B9","What can\u2019t we know?",57,195,8965361,40],["B20BB587-FDB1-45B4-9F6B-04D75DB45484","Pa\xF1\xF1a",67.5,102,10649230,50],["9C1A33F2-FA28-4FD0-B3A3-011939BF112E","Methods",77,101,10649230,40],["0B0E75E0-8E66-4B96-8D18-05B388B8166B","Four noble truths",72,108,10649230,40],["39C8C744-9E33-4FBD-B64F-4392BB1D7D43","Dependent origination",76,111,10649230,40],["F3CDF5ED-FE39-4306-9BC7-732E7252919B","Body contemplation",87,100,10649230,40],["C4AE0F47-95C9-42BF-875A-9DF1743AAFB2",`Contemplation of 
the characteristics of 
conditioned phenomena`,81,111,10649230,40],["33DB61E6-CD56-4F49-98BD-5397EB788805","Dukkha",78,122,10649230,40],["554920A7-A50D-44F4-8448-DD747BBB57DA",`The inherent unsatisfactoriness
 of constructed/conditioned 
phenomena`,77,130,10649230,40],["803C7EA0-EF36-42AE-B810-7620C3509FEA","Must be understood",82,138,10649230,40],["21CBC21A-6D6E-424D-B1D0-DCCD5425A05B","Cause and effect",84,124,10649230,40],["A9BA755A-FE4B-498E-9952-40214F02B8D6",`That craving for sensuality, 
being or non-being is 
a necessary cause for 
dissatisfaction`,68,145,10649230,40],["82F1F09B-EBCB-4F04-BDF1-4991F27E3724","Must be abandoned",72,148,10649230,40],["5503BDDB-9985-44D9-B9A4-F731513F6903","Pain \u2022 resistance = suffering",60,146,10649230,40],["FEC6325D-1E5F-4790-A841-63709B264A8D","That letting be leads to peace",53,142,10649230,40],["905689F0-5537-42CC-B864-9166DA60C470","Must be realized",50,147,10649230,40],["D8049867-1FC0-4817-BD67-64A421349C65",`That certain conditions 
lead to these insights`,51,124,10649230,40],["6CAB2F87-C43C-4231-BD7A-AD9747EDCDCB","Must be practiced",46,122,10649230,40],["6C32C072-E56E-40F0-AC39-7909FC465612","Anatta",81,122,10649230,40],["64768881-AED3-403E-92A8-E4A3CBB39100","Anicca",76,122,10649230,40],["EE895C76-B04A-4587-9970-5A6CBA56069C","Six sense-spheres",86.5,108,10649230,40],["DE7F9890-14E7-433A-AD84-B0E18BE5BD79","Insights",64,115,10649230,40],["95BBCB02-420D-4FD9-A9BA-A404D72B41D3","Nature of fundamental reality",21,174,8965361,25],["6A893E71-2F6B-4958-B917-5F145FA37CF5","Matter",22,164,8965361,20],["3041389D-AD21-46F6-9721-2DD4E9FC1F65","Consciousness",22,184,8965361,20],["CC97CAEF-3828-466E-B55A-BA85783CE034","Acceptance and agency",80,3,15916398,40],["0F8B3461-7B9D-4E1D-A392-A6DE782AE537","Motivation split",82,289,15916398,40],["DEADD385-73FB-4EA3-AACC-13C6B453E9E6","Transcendence needs",83,307,15916398,40],["CDC69285-DE4B-40DE-BDFB-73C750FA8CB4","Fulfilment needs",95,295,15916398,40],["EEF6AD45-1ABB-4D2E-BCA0-A3BE592FCE95","Psychological needs",109,295,15916398,40],["662B5EE1-6533-44B3-BC7A-2DF7708F1658","Basic needs",118,310,15916398,40],["973015FD-576A-40F3-A86C-2E8EDA196B5F",`Assertive anger /
 self-compassion`,91,10,15916398,40],["29155A2F-FCBB-4347-90DE-E8D3F86A3FFA","Grief / hurt",91,356,15916398,40],["E400970C-2383-40ED-90F4-793AFAD87E45","Rejecting anger",110,25,15916398,40],["788AC673-A0A0-4E77-93EC-2A21B981D7A8","Global distress",121,18,15916398,40],["3C66F9F4-19C8-497C-AD5A-377F74970968","Fear / shame",110,10,15916398,40],["829B047D-0C32-4887-8A3B-690BED8B847B","Needs",103,17,15916398,40],["DFDD1307-4F65-4A71-AC89-9E7B8A3D22FB",`Negative 
self-evaluation`,103,3,15916398,40],["88244D22-DAEF-4189-83EB-E7B5D5726E62","Meaning protest",91,282,15916398,40],["9CE480B4-FB41-45F1-ABF5-D956A5526141","Path of the Head",93,191,7606813,70],["F2CA7E5B-766D-48F0-941D-D4B1FD54C097","Unfinished business",100,277,15916398,40],["987F0FDD-0FAF-44FC-9DE7-7D88E32D801D","Case formulation",106,277,15916398,40],["6423DD8B-C097-4C26-9917-D401ACA5FE91","Wisdom",112,285,15916398,40],["6345AAF7-5F22-49C1-8052-E28059BFFC3F","Empathy",119,292,15916398,40],["29EA91F8-0360-45F4-9E0A-511D80C51516","Presence",121.5,286,15916398,40],["4798DE69-2868-4EA6-84D8-E4D0CE7A90E8","Focusing",124,280,15916398,40],["2DAB65D3-0549-4831-9C7C-8EBCDDE96F2D","Attunement",126,290,15916398,40],["2CE0722A-9C86-40E1-ACB8-DBD6EDCF10E3","Empathic exploration",133,286,15916398,40],["04C21F20-915C-446A-902D-A8D5D7076C6F",`Unconditional 
positive regard`,129,298,15916398,40],["23D5758E-178A-43BD-A82B-5D1F11CC1223","Alliance work",137,301,15916398,40],["7D0652E2-E579-47BC-8FB9-E1FBA3539A3F","Conflict splits",112,275,15916398,40],["5D8415B8-AD5B-44AE-804C-9A2A62B177F8","Path of the Heart",112.5,81,7606813,70],["025E5CB8-BF2F-46EC-A170-4F80BD2FCA54","Anxiety splits",119,275,15916398,40],["C120D32F-4E27-481A-97F9-9B62BB394DF9","Evocative unfolding",128,279,15916398,40],["94D5EB98-E41E-4DD5-8B8D-06598E285B4E","Trauma retelling",137,282,15916398,40],["2E8B960D-5F3B-4AB7-8A28-23D9FE4326DB","Self-soothing",143,293,15916398,40],["4F5D4105-E8C7-4F54-97E6-F9549BC75D4F","\u2190 back and forth between \u2192",91,3,15916398,30],["65FB0CCF-F7C4-4159-9D6D-0F929AB12136","\u2190 back and forth between \u2192",103,10,15916398,30],["CF403F63-27E2-4424-B4F3-5D6CB1252881","",180,0,7606813,70]],i6=[["8BD3708E-8E3D-44B8-9E92-1050FA7987E5","D4724AD1-EECD-4975-920C-CDAD71AA53C3","0027E01B-C40A-49F0-9833-30244700C39E"],["D4724AD1-EECD-4975-920C-CDAD71AA53C3","0027E01B-C40A-49F0-9833-30244700C39E"],["0027E01B-C40A-49F0-9833-30244700C39E"],["66F19982-732D-4744-AF06-F1F8A68D898B","287B1377-9E86-42B2-99F1-EBBEA971AB08","B5027C8B-D476-49B0-A713-ACC447159AE1"],["287B1377-9E86-42B2-99F1-EBBEA971AB08","B5027C8B-D476-49B0-A713-ACC447159AE1"],["B5027C8B-D476-49B0-A713-ACC447159AE1"],["4A481D1E-5DB6-4ABB-B9D0-8164F41393F9","876BC8AC-4013-448E-9ACA-A82DA031E09C"],["876BC8AC-4013-448E-9ACA-A82DA031E09C","008ADA1B-1D52-4F68-AB43-97D070D7774C"],["008ADA1B-1D52-4F68-AB43-97D070D7774C","3C87D468-FC43-4E9C-9CEE-0EFA0B63EA7A"],["3C87D468-FC43-4E9C-9CEE-0EFA0B63EA7A"],["D131CF5B-A895-4212-A4D4-A7E976CF5DA6","90212AAB-4CFE-4FDF-850A-7E6141F727AE"],["90212AAB-4CFE-4FDF-850A-7E6141F727AE","611A4954-9E7D-4D25-AD7D-E1FAB38482F5","5C63879D-74A6-458B-8193-AFA06A62F794","2A36743D-9E95-4B9D-A8EB-6B4B11F20AB5","963CA1BA-9539-4089-96AB-EB0E78602390","EEA100C2-4D71-40C8-B70B-FE6A6D01D33B","8F0D0BF3-BF3C-4E2B-9E1E-B16E615EFF0F","2A4B9CAB-EEC1-48A8-9BE6-5A519210D7A7","C978C527-2523-4078-8B16-523DF8553FD5"],["611A4954-9E7D-4D25-AD7D-E1FAB38482F5"],["5C63879D-74A6-458B-8193-AFA06A62F794"],["2A36743D-9E95-4B9D-A8EB-6B4B11F20AB5"],["963CA1BA-9539-4089-96AB-EB0E78602390"],["EEA100C2-4D71-40C8-B70B-FE6A6D01D33B","982A6AFF-D536-4504-B63A-EC42A2712432"],["982A6AFF-D536-4504-B63A-EC42A2712432","F1EB56D4-15AE-4837-A070-40550E1262C7","3F0021AE-02A1-44B8-AE19-11C0D2A4FE75","D456FA2C-65F4-40D2-AC84-4C7E2266BA84"],["F1EB56D4-15AE-4837-A070-40550E1262C7","506E723E-071E-4694-80AD-06BBD0681E26","2EF6A6A1-AC8E-4A00-BC75-F36E9AA0A60F"],["506E723E-071E-4694-80AD-06BBD0681E26","0DA43E60-8DB6-4401-A1B1-F3BC1B5EA856","6BDD61FD-3F46-453B-8714-64AF81BCE3F9","A7D7AE08-AFD8-49B2-A964-2098C4ACEAF4","2EF6A6A1-AC8E-4A00-BC75-F36E9AA0A60F","3F0021AE-02A1-44B8-AE19-11C0D2A4FE75"],["0DA43E60-8DB6-4401-A1B1-F3BC1B5EA856","3F0021AE-02A1-44B8-AE19-11C0D2A4FE75"],["6BDD61FD-3F46-453B-8714-64AF81BCE3F9","A81C54C1-D640-4297-AFA9-346A25B8132E","9E19FF41-5144-4745-9C0B-A99858302CDE","050308DE-F371-436D-AE9F-B0D5B7F8C282"],["A81C54C1-D640-4297-AFA9-346A25B8132E"],["9E19FF41-5144-4745-9C0B-A99858302CDE"],["050308DE-F371-436D-AE9F-B0D5B7F8C282"],["A7D7AE08-AFD8-49B2-A964-2098C4ACEAF4","0EC034DC-AFC0-4C17-84CF-0DD0991AFDAD"],["0EC034DC-AFC0-4C17-84CF-0DD0991AFDAD","302B64FD-4E04-4823-8E13-C7F2FAA4E7C9"],["302B64FD-4E04-4823-8E13-C7F2FAA4E7C9"],["2EF6A6A1-AC8E-4A00-BC75-F36E9AA0A60F"],["3F0021AE-02A1-44B8-AE19-11C0D2A4FE75"],["D456FA2C-65F4-40D2-AC84-4C7E2266BA84","B90D2293-D457-4567-8102-363F70D95781"],["B90D2293-D457-4567-8102-363F70D95781","2930997B-A726-473E-B6E9-333C2732271F","2B64F02A-BEAA-4403-8380-A8B2614D5F90","4D70D48E-D8D1-45C6-8E15-C0837ABBC1D7"],["2930997B-A726-473E-B6E9-333C2732271F"],["2B64F02A-BEAA-4403-8380-A8B2614D5F90"],["4D70D48E-D8D1-45C6-8E15-C0837ABBC1D7","EFDE4F51-B2DD-443A-9C35-39F5DA1C1DB6"],["EFDE4F51-B2DD-443A-9C35-39F5DA1C1DB6","FBC53F23-9EA7-4B55-B6D4-BC9C456FD9B8","23979ADC-AD3F-4447-BF76-224A807C2144"],["FBC53F23-9EA7-4B55-B6D4-BC9C456FD9B8"],["23979ADC-AD3F-4447-BF76-224A807C2144"],["8F0D0BF3-BF3C-4E2B-9E1E-B16E615EFF0F"],["2A4B9CAB-EEC1-48A8-9BE6-5A519210D7A7"],["C978C527-2523-4078-8B16-523DF8553FD5"],["F47603CA-44A7-4009-B07B-29DFA540729D","87B9AFEC-9F64-4748-87F8-F64F2B31FC29","0EF99714-0619-45EC-A71D-B4F01B6211DC"],["87B9AFEC-9F64-4748-87F8-F64F2B31FC29","FEB31ADB-CF1C-45B6-9522-C37B4F4C1E07"],["FEB31ADB-CF1C-45B6-9522-C37B4F4C1E07","EF7C61DB-A84C-4D0A-941F-B5EF2D64F28C"],["EF7C61DB-A84C-4D0A-941F-B5EF2D64F28C","0EF99714-0619-45EC-A71D-B4F01B6211DC"],["0EF99714-0619-45EC-A71D-B4F01B6211DC","7AFE8322-410C-44FA-8223-F6080F45359C","89ED6168-2517-4EF9-A5D6-3635A0C80BDC","B20BB587-FDB1-45B4-9F6B-04D75DB45484"],["7AFE8322-410C-44FA-8223-F6080F45359C","236FD67F-CD44-4B75-96AD-B16FA578E708","C9DCCC19-CD84-427B-9234-09050646BCD3","10D1D640-DE4C-4334-B08F-A4716D198E5F"],["236FD67F-CD44-4B75-96AD-B16FA578E708"],["C9DCCC19-CD84-427B-9234-09050646BCD3"],["10D1D640-DE4C-4334-B08F-A4716D198E5F"],["89ED6168-2517-4EF9-A5D6-3635A0C80BDC","074931F9-D5F1-401B-ABE0-1F26BA921E1F","E0E6199E-B9CC-4E3B-924F-4F481CEB6B8B"],["074931F9-D5F1-401B-ABE0-1F26BA921E1F"],["E0E6199E-B9CC-4E3B-924F-4F481CEB6B8B","9E5C67A2-894D-4AB1-AF81-E62C2BF4C1AD"],["9E5C67A2-894D-4AB1-AF81-E62C2BF4C1AD","39A86FA9-4CDF-4DD2-8AB6-78A36AC75762"],["39A86FA9-4CDF-4DD2-8AB6-78A36AC75762","60046B15-D09E-4F1F-9BC0-BA3900E29EB9"],["60046B15-D09E-4F1F-9BC0-BA3900E29EB9","263D9AEE-6F33-4D35-B945-CE35173E2F11"],["263D9AEE-6F33-4D35-B945-CE35173E2F11","3A45A8B4-3FEE-48C4-AB56-730C2284B9F0","37A0AEC4-634C-4BF4-A14B-7B6E25172BBC","68B6E135-509A-4064-9FF9-DE55C3B66A8E","6A92592D-70EE-451D-941A-AD8F8435EF6E","DC5F27E6-E594-4651-A151-4F70145EDFD5","092BED79-8510-4E20-9040-0BF73C433EB0","20790E3B-9D36-40B2-82CB-56322AA09DE7"],["3A45A8B4-3FEE-48C4-AB56-730C2284B9F0","37A0AEC4-634C-4BF4-A14B-7B6E25172BBC","9CE480B4-FB41-45F1-ABF5-D956A5526141"],["37A0AEC4-634C-4BF4-A14B-7B6E25172BBC","4572B437-5182-4EBE-A383-F76440484F8E","0CEDFFCF-0C8D-4705-B40C-439631CCD3E1"],["4572B437-5182-4EBE-A383-F76440484F8E","9BA80071-89E9-400F-89CA-53CA700FA703"],["9BA80071-89E9-400F-89CA-53CA700FA703","450F8534-2F59-4A8E-BA92-D417FD0FE000","B470B5D1-31ED-4F91-A94D-6A94CF45E744","95A61B65-7A40-42FA-8622-D7A0B736BA9C"],["450F8534-2F59-4A8E-BA92-D417FD0FE000","951EBA46-9D4B-453F-B0B6-C03CFA9BD6C0","C2B220C0-B7D4-432B-9ADC-1E40F1A66E25"],["951EBA46-9D4B-453F-B0B6-C03CFA9BD6C0","B470B5D1-31ED-4F91-A94D-6A94CF45E744","95A61B65-7A40-42FA-8622-D7A0B736BA9C","0CEDFFCF-0C8D-4705-B40C-439631CCD3E1"],["C2B220C0-B7D4-432B-9ADC-1E40F1A66E25","B470B5D1-31ED-4F91-A94D-6A94CF45E744","95A61B65-7A40-42FA-8622-D7A0B736BA9C","0CEDFFCF-0C8D-4705-B40C-439631CCD3E1"],["B470B5D1-31ED-4F91-A94D-6A94CF45E744"],["95A61B65-7A40-42FA-8622-D7A0B736BA9C"],["0CEDFFCF-0C8D-4705-B40C-439631CCD3E1"],["B8BA585E-D985-44A9-A8E9-6BC1E3EA3731","AA38CD3C-7D47-4CD3-956C-5EE5C285E408","16C1A9C0-30BF-441E-8DA4-3216C0A42C51","807EE50B-B4E4-42B7-B1B4-10EBB38C1299","9CE480B4-FB41-45F1-ABF5-D956A5526141"],["AA38CD3C-7D47-4CD3-956C-5EE5C285E408"],["16C1A9C0-30BF-441E-8DA4-3216C0A42C51"],["4265E048-CDF8-4B44-836C-38549C965725"],["807EE50B-B4E4-42B7-B1B4-10EBB38C1299","B5E8EA63-9C7A-4CAD-8B29-1EC4ACDF5F63","A35D6C5D-B56F-416F-B337-41FB9E923AE0"],["B5E8EA63-9C7A-4CAD-8B29-1EC4ACDF5F63","B07DBBCA-2123-4D55-828C-6931A999128B"],["B07DBBCA-2123-4D55-828C-6931A999128B","C6BACFDA-45F3-4BD7-ACE4-3720C8E6E7D8","794FB1D5-42CF-496B-929F-9568976B58FF","12872E37-D9BC-4CDD-BB7E-E09FD46D993A","7BD9A4A4-29F0-46A8-8D8E-FAD18F242DB6"],["C6BACFDA-45F3-4BD7-ACE4-3720C8E6E7D8"],["794FB1D5-42CF-496B-929F-9568976B58FF"],["12872E37-D9BC-4CDD-BB7E-E09FD46D993A","2875511F-F91A-4807-9839-4B7153B23143","F7A69942-1F8A-42CC-A8C3-8DF26E439289"],["2875511F-F91A-4807-9839-4B7153B23143","F9E35865-1D97-4667-B3FE-A0EDB4D37B8A","334445AA-FC20-48D6-9A7D-2558857C2346","7BD9A4A4-29F0-46A8-8D8E-FAD18F242DB6"],["F9E35865-1D97-4667-B3FE-A0EDB4D37B8A","3E8EDBA9-59E1-4835-8343-4AA9FF799D49","43F70C8C-15B6-4EF0-81F4-E26FF4FB8DC3"],["3E8EDBA9-59E1-4835-8343-4AA9FF799D49","64077339-5087-4CBD-A706-C1AA35E8AC8B","FBC40F7A-8C27-43BE-9E80-2E330B1EAE7B"],["64077339-5087-4CBD-A706-C1AA35E8AC8B","9E801875-A714-49E5-969A-D9A5E5497D18","334445AA-FC20-48D6-9A7D-2558857C2346"],["9E801875-A714-49E5-969A-D9A5E5497D18","31475508-739B-4966-ADC9-D8EBCE5FE3DB"],["31475508-739B-4966-ADC9-D8EBCE5FE3DB","A0E9CFBE-CFD6-47E2-8D78-15E5382BBC1E"],["A0E9CFBE-CFD6-47E2-8D78-15E5382BBC1E"],["FBC40F7A-8C27-43BE-9E80-2E330B1EAE7B","9A853604-4CB0-4B1B-98E1-E4D95626433A","53296584-40BE-4F83-96D3-B77540245AC2"],["9A853604-4CB0-4B1B-98E1-E4D95626433A","93C64795-A33C-4578-9694-B8B0FFE287AE"],["93C64795-A33C-4578-9694-B8B0FFE287AE","73E6253F-D36B-45B8-ABF9-A72432F5F576","20790E3B-9D36-40B2-82CB-56322AA09DE7"],["73E6253F-D36B-45B8-ABF9-A72432F5F576","D5F25680-4FED-4B74-A5D5-1B15A8C8A580","C5096451-E5CF-4498-AF7A-E97C3C8197F9"],["D5F25680-4FED-4B74-A5D5-1B15A8C8A580"],["C5096451-E5CF-4498-AF7A-E97C3C8197F9"],["53296584-40BE-4F83-96D3-B77540245AC2","EE9D175C-0953-4B73-9B31-5C7AD0C50288","FC6818C0-13A9-44E2-8A38-7C4D4FB8827B","8873A022-151A-41EA-B380-2284DEB82A22","20790E3B-9D36-40B2-82CB-56322AA09DE7"],["EE9D175C-0953-4B73-9B31-5C7AD0C50288","5A058F3F-7A05-44E2-8417-7B99A2437742","42B4C435-0661-46DB-8D8B-AB2AA00D601B","64BC8F62-AA83-4E65-B1A3-D982DE8A86C1"],["5A058F3F-7A05-44E2-8417-7B99A2437742","42B4C435-0661-46DB-8D8B-AB2AA00D601B","87EFBBA1-F6E2-4A35-8897-A73210A18318","FC6818C0-13A9-44E2-8A38-7C4D4FB8827B","8873A022-151A-41EA-B380-2284DEB82A22"],["42B4C435-0661-46DB-8D8B-AB2AA00D601B","64BC8F62-AA83-4E65-B1A3-D982DE8A86C1","FC6818C0-13A9-44E2-8A38-7C4D4FB8827B","8873A022-151A-41EA-B380-2284DEB82A22"],["64BC8F62-AA83-4E65-B1A3-D982DE8A86C1","FC6818C0-13A9-44E2-8A38-7C4D4FB8827B","8873A022-151A-41EA-B380-2284DEB82A22"],["87EFBBA1-F6E2-4A35-8897-A73210A18318","20790E3B-9D36-40B2-82CB-56322AA09DE7"],["FC6818C0-13A9-44E2-8A38-7C4D4FB8827B"],["8873A022-151A-41EA-B380-2284DEB82A22"],["43F70C8C-15B6-4EF0-81F4-E26FF4FB8DC3","D8BD31CF-36A0-45FD-8EFD-A5A1428C03E9"],["D8BD31CF-36A0-45FD-8EFD-A5A1428C03E9","9CC41D5D-A392-4C0B-8FA9-B455CAF9AF91"],["9CC41D5D-A392-4C0B-8FA9-B455CAF9AF91"],["334445AA-FC20-48D6-9A7D-2558857C2346","074F7C7B-C390-4328-A205-B73143806FFA"],["074F7C7B-C390-4328-A205-B73143806FFA","9E66D7AE-5825-4691-BADB-FC7A75F7B29D","2C809F14-A1A9-4178-B236-FA6408CD789D","7BD9A4A4-29F0-46A8-8D8E-FAD18F242DB6"],["9E66D7AE-5825-4691-BADB-FC7A75F7B29D"],["2C809F14-A1A9-4178-B236-FA6408CD789D"],["F7A69942-1F8A-42CC-A8C3-8DF26E439289","5AE32B80-01A1-4314-9A23-453A397A2599","3F0C901E-76B2-463D-B17A-8078CA2E1C91","E27CC807-EB70-45C4-84B3-DDF1F8AADB00","1E34F972-7322-4F63-A271-2BC8A5241BB8","76AB6EF8-AEF6-41D3-9576-2FE8D14F462B","5BEDE28D-38C4-4D03-B4C6-2C74ECD89078","D7868612-7C4F-49F8-BCAA-B03E2BCEF450","820F18C3-7140-4923-9D3A-2CD81A26B702","68B6E135-509A-4064-9FF9-DE55C3B66A8E"],["5AE32B80-01A1-4314-9A23-453A397A2599","72A32148-45A5-41A7-A836-0CE959AF38D4","3F0C901E-76B2-463D-B17A-8078CA2E1C91","E27CC807-EB70-45C4-84B3-DDF1F8AADB00","1E34F972-7322-4F63-A271-2BC8A5241BB8","76AB6EF8-AEF6-41D3-9576-2FE8D14F462B","5BEDE28D-38C4-4D03-B4C6-2C74ECD89078","D7868612-7C4F-49F8-BCAA-B03E2BCEF450","820F18C3-7140-4923-9D3A-2CD81A26B702","6A92592D-70EE-451D-941A-AD8F8435EF6E"],["72A32148-45A5-41A7-A836-0CE959AF38D4","3F0C901E-76B2-463D-B17A-8078CA2E1C91","E27CC807-EB70-45C4-84B3-DDF1F8AADB00","1E34F972-7322-4F63-A271-2BC8A5241BB8","76AB6EF8-AEF6-41D3-9576-2FE8D14F462B","5BEDE28D-38C4-4D03-B4C6-2C74ECD89078","D7868612-7C4F-49F8-BCAA-B03E2BCEF450","820F18C3-7140-4923-9D3A-2CD81A26B702","DC5F27E6-E594-4651-A151-4F70145EDFD5"],["3F0C901E-76B2-463D-B17A-8078CA2E1C91"],["E27CC807-EB70-45C4-84B3-DDF1F8AADB00"],["1E34F972-7322-4F63-A271-2BC8A5241BB8"],["76AB6EF8-AEF6-41D3-9576-2FE8D14F462B"],["5BEDE28D-38C4-4D03-B4C6-2C74ECD89078"],["D7868612-7C4F-49F8-BCAA-B03E2BCEF450"],["820F18C3-7140-4923-9D3A-2CD81A26B702"],["7BD9A4A4-29F0-46A8-8D8E-FAD18F242DB6","EB83C866-FF54-449B-A65C-24ECDE2820C1","3D5EC2BE-F6E7-4BC2-A093-B8ABFF663C58"],["EB83C866-FF54-449B-A65C-24ECDE2820C1"],["3D5EC2BE-F6E7-4BC2-A093-B8ABFF663C58"],["A35D6C5D-B56F-416F-B337-41FB9E923AE0","EDCAFFF6-FD78-40E0-B719-97569DCD8819"],["EDCAFFF6-FD78-40E0-B719-97569DCD8819","46CBB5AE-79D5-4808-A400-4B804DA91E12","E55861C5-E9D1-4B9A-956B-DC53B1C0E01E","8405A4E1-F7F9-4016-86B8-2E5C98520036","8573618D-34C1-481C-A217-71AB05C7C4D7","B9839052-6809-4E31-8792-FF4DF8C9FC48"],["46CBB5AE-79D5-4808-A400-4B804DA91E12","8D82CC00-C9F5-4B9E-B256-A879D4623B3C","9BFCB2C3-78B9-4982-8501-2BFF113D4207"],["8D82CC00-C9F5-4B9E-B256-A879D4623B3C","35476F95-E324-40D2-B224-A5E27568028C","9BFCB2C3-78B9-4982-8501-2BFF113D4207"],["35476F95-E324-40D2-B224-A5E27568028C","4D1CEB04-6987-4C58-93B0-57DBB0914867","7F7F7458-6893-4CAE-A35A-78DCBA2DF0A8","5946ACA1-B182-4776-BAC0-5EC43E0480C6","05C8F42F-1F73-443B-B461-A3FFE6867199","4C0B70B2-C4EC-4716-A08C-220E856D5B4A"],["4D1CEB04-6987-4C58-93B0-57DBB0914867","0EF9450D-3CB7-4D13-BCFB-49088E87F374"],["0EF9450D-3CB7-4D13-BCFB-49088E87F374","80130A99-E12B-459A-B43D-1CE8BB3B1EF2"],["80130A99-E12B-459A-B43D-1CE8BB3B1EF2","2095179D-0AC4-4378-8E6F-8F71E2793FAD","D6B5FE51-C8D9-42EB-B0BE-07B09B51776C"],["2095179D-0AC4-4378-8E6F-8F71E2793FAD","AE242003-1C0A-40BF-AEA2-567E61901171","F3695B21-1EAA-404B-9239-0767DA0BC90C","B7A263AD-5457-4712-A089-03B24D041629","B4399091-3D0A-472B-A40C-BC8CDD097E7F","20ADE73B-D8CA-4CF8-ABA2-4D0A52F1CAAB"],["AE242003-1C0A-40BF-AEA2-567E61901171"],["F3695B21-1EAA-404B-9239-0767DA0BC90C"],["B7A263AD-5457-4712-A089-03B24D041629"],["B4399091-3D0A-472B-A40C-BC8CDD097E7F"],["20ADE73B-D8CA-4CF8-ABA2-4D0A52F1CAAB"],["D6B5FE51-C8D9-42EB-B0BE-07B09B51776C","6473A93C-A4A4-41D5-9765-D58B3F8A57EA","0A57B7F6-E875-485D-98F2-66458F5FBC6B","19DB1035-B51E-4F0A-8F97-888375D12E8F","34C06752-B7AD-461D-A5E9-B29CAE227645","83D9EEC0-3314-4BD5-826E-F1ADDA1492EA","5D8415B8-AD5B-44AE-804C-9A2A62B177F8"],["6473A93C-A4A4-41D5-9765-D58B3F8A57EA"],["0A57B7F6-E875-485D-98F2-66458F5FBC6B"],["19DB1035-B51E-4F0A-8F97-888375D12E8F"],["34C06752-B7AD-461D-A5E9-B29CAE227645"],["83D9EEC0-3314-4BD5-826E-F1ADDA1492EA"],["1E7C0EB1-1DDE-4044-A8B7-E4540487DB1C","E28DBBC9-DECF-4F9E-BFF7-6366EBCC51D4","5D8415B8-AD5B-44AE-804C-9A2A62B177F8"],["E28DBBC9-DECF-4F9E-BFF7-6366EBCC51D4","DA6F224D-BC2D-47BF-91C5-9538BF062D81","14BA8BEB-FA35-44B7-9DE3-A1503614069D"],["DA6F224D-BC2D-47BF-91C5-9538BF062D81","603F93B5-AA5A-49C2-8AEE-440DA485BA40","F26DDAD3-74C1-48A8-9488-8BAB580947E7","05CF2077-5B2D-43E7-92AC-232082EA7F8C","DEA78281-438E-4CB6-ADCE-25DC85D9FF37"],["603F93B5-AA5A-49C2-8AEE-440DA485BA40"],["F26DDAD3-74C1-48A8-9488-8BAB580947E7"],["05CF2077-5B2D-43E7-92AC-232082EA7F8C","F0AA6E16-8A46-43FA-B435-942FFF734B06","BEA84E38-CF01-4A16-941B-F26EEE3E6D88","EB0FBD7E-7BA3-43E7-AB1C-2AC2DBFAC7F3","C07EE1B5-5DC2-4E9E-AD6C-A8550A7991FF"],["F0AA6E16-8A46-43FA-B435-942FFF734B06"],["BEA84E38-CF01-4A16-941B-F26EEE3E6D88"],["EB0FBD7E-7BA3-43E7-AB1C-2AC2DBFAC7F3"],["C07EE1B5-5DC2-4E9E-AD6C-A8550A7991FF"],["DEA78281-438E-4CB6-ADCE-25DC85D9FF37","202B8B0D-13DA-459A-9D5E-ED5DD40D30E4"],["202B8B0D-13DA-459A-9D5E-ED5DD40D30E4","0AA203B9-8B52-4412-B32D-D412F894D779","2BAF7986-984E-4937-BA03-E5CBAA234AEF","1D823800-DD7A-4B6F-94EA-517D4DE9876B"],["0AA203B9-8B52-4412-B32D-D412F894D779","6A20558B-3A35-4D14-8EBE-3C5DF4F02868"],["6A20558B-3A35-4D14-8EBE-3C5DF4F02868","96786F52-EB9D-42BB-B854-457841A162BA","28106D6F-9E60-4579-A457-B2F4DB781D6D","D81C6E33-ED3A-45ED-9567-78EC22F9A6C7","8CFD3A14-106B-4D63-9B2B-1CA46A8CA16B","14BA8BEB-FA35-44B7-9DE3-A1503614069D"],["96786F52-EB9D-42BB-B854-457841A162BA"],["28106D6F-9E60-4579-A457-B2F4DB781D6D"],["D81C6E33-ED3A-45ED-9567-78EC22F9A6C7"],["8CFD3A14-106B-4D63-9B2B-1CA46A8CA16B"],["2BAF7986-984E-4937-BA03-E5CBAA234AEF","C0074FCF-7AB4-4781-BC26-3812FBA61015","CB62D122-2342-4D33-B98D-EE3BD70B6538","64192F80-785C-4B14-AF81-987193E41085","83BC3254-7B62-4D9C-BC20-192D2D442466","4788E206-DE47-48FA-8DC4-326274991F8D","111EBFA8-E400-4984-A638-63120DDC1590"],["C0074FCF-7AB4-4781-BC26-3812FBA61015"],["CB62D122-2342-4D33-B98D-EE3BD70B6538"],["64192F80-785C-4B14-AF81-987193E41085"],["83BC3254-7B62-4D9C-BC20-192D2D442466"],["4788E206-DE47-48FA-8DC4-326274991F8D"],["111EBFA8-E400-4984-A638-63120DDC1590"],["1D823800-DD7A-4B6F-94EA-517D4DE9876B","C0993BB8-9C64-4F7A-A673-289EA2A33D0D","4AF3AF2F-5D76-4620-911E-54398F84F288","672E2CBD-7421-4E94-9728-95353BCD772E"],["C0993BB8-9C64-4F7A-A673-289EA2A33D0D","00E891B6-75E2-43B7-97B4-62F6DD69B15B"],["00E891B6-75E2-43B7-97B4-62F6DD69B15B","B477D774-01E4-4F6A-93B1-111E699FFE75","E2D52070-A83C-4D48-A218-BB3DC7BEAF21","EBCF0E75-DA1D-4533-BEEA-73657C4588AF","4AF3AF2F-5D76-4620-911E-54398F84F288","83BA614D-5560-48B0-8377-217CF04E01FC"],["B477D774-01E4-4F6A-93B1-111E699FFE75"],["E2D52070-A83C-4D48-A218-BB3DC7BEAF21"],["EBCF0E75-DA1D-4533-BEEA-73657C4588AF"],["4AF3AF2F-5D76-4620-911E-54398F84F288"],["672E2CBD-7421-4E94-9728-95353BCD772E"],["14BA8BEB-FA35-44B7-9DE3-A1503614069D","1EABAD2F-1D1A-4124-A324-4EFAD6DDF176","E8F9F0EB-2B89-4D4C-901E-A029C0211A93","268F9754-9375-4E1F-B752-233A8F83F592","B20BB587-FDB1-45B4-9F6B-04D75DB45484"],["1EABAD2F-1D1A-4124-A324-4EFAD6DDF176","A478FC19-7AC1-4480-A9C9-93AD4C925970","61282C0C-C654-4B5D-B2F9-ECF698B16489","9FC8F28B-4B52-4BFC-9349-4B5271FCDD84"],["A478FC19-7AC1-4480-A9C9-93AD4C925970","6E92A01E-0E8D-494E-8249-EF0EF0D22987","349EFC6D-D96C-4E61-A839-93D31BF698B5","ED71676A-652A-400A-AAEB-70A6B980A6F2"],["6E92A01E-0E8D-494E-8249-EF0EF0D22987"],["349EFC6D-D96C-4E61-A839-93D31BF698B5"],["ED71676A-652A-400A-AAEB-70A6B980A6F2"],["61282C0C-C654-4B5D-B2F9-ECF698B16489"],["9FC8F28B-4B52-4BFC-9349-4B5271FCDD84"],["E8F9F0EB-2B89-4D4C-901E-A029C0211A93","CCBD9962-2FF7-4C39-97B9-D93FA4044BD3","D0E50499-8C3F-4818-BBAA-FEB433FC1704","BC583511-0DA5-4F1E-B699-D72CB449DD00","C4B7A8B7-5171-4873-B269-0A0582CA2084","FC88FDFD-AE27-4F76-938D-6FE581E65D08","30F3B081-5F90-4F13-BC8D-BBC7293CEC04","D49F0D1E-5DD6-4147-88E2-604F7E4A3566"],["CCBD9962-2FF7-4C39-97B9-D93FA4044BD3"],["D0E50499-8C3F-4818-BBAA-FEB433FC1704"],["BC583511-0DA5-4F1E-B699-D72CB449DD00"],["C4B7A8B7-5171-4873-B269-0A0582CA2084"],["FC88FDFD-AE27-4F76-938D-6FE581E65D08"],["30F3B081-5F90-4F13-BC8D-BBC7293CEC04"],["D49F0D1E-5DD6-4147-88E2-604F7E4A3566"],["268F9754-9375-4E1F-B752-233A8F83F592","B46F4E38-26DA-4388-91DA-32731D7B44A1","21DDAAEC-A832-4BB4-9A82-D2F10FCAA66F","A6BA6799-B325-453E-B4D1-BCD71CF12705"],["B46F4E38-26DA-4388-91DA-32731D7B44A1","6DDD2CD3-CE4A-492C-A6BF-8044A902E5E0","8AABE820-1F0B-4DDD-BFF2-9177B2A47112","128A73FA-B982-4A3E-B9C8-4AFBAB70AB56"],["128A73FA-B982-4A3E-B9C8-4AFBAB70AB56"],["6DDD2CD3-CE4A-492C-A6BF-8044A902E5E0"],["8AABE820-1F0B-4DDD-BFF2-9177B2A47112"],["21DDAAEC-A832-4BB4-9A82-D2F10FCAA66F"],["A6BA6799-B325-453E-B4D1-BCD71CF12705","FEABFE95-869D-40F9-9D0B-5EE5BA3D85E1","D358D3A2-957C-470B-BC5F-A71A7622AE07","55EF8116-598E-4168-ADBC-9248DB79A821"],["FEABFE95-869D-40F9-9D0B-5EE5BA3D85E1"],["D358D3A2-957C-470B-BC5F-A71A7622AE07"],["55EF8116-598E-4168-ADBC-9248DB79A821"],["CBDECA18-D9A1-4FDE-84FD-DDB8849710A3","A5DD6CEA-4DFA-4DDB-B586-FE8629D274B1","5D8415B8-AD5B-44AE-804C-9A2A62B177F8"],["A5DD6CEA-4DFA-4DDB-B586-FE8629D274B1","F05326DF-FA0C-4619-8A75-0411CB1CB2F9"],["F05326DF-FA0C-4619-8A75-0411CB1CB2F9","9EAF3484-3F2C-415B-8067-B50A3FA1B974"],["9EAF3484-3F2C-415B-8067-B50A3FA1B974","ADBA0E07-67F4-47EC-B776-EE198BCA1A53"],["ADBA0E07-67F4-47EC-B776-EE198BCA1A53","75FF467B-7F2F-4EEC-ADC9-2D64EE46D692"],["75FF467B-7F2F-4EEC-ADC9-2D64EE46D692","03593653-145D-4B52-9873-D90B412C8468"],["03593653-145D-4B52-9873-D90B412C8468","4F429C0B-B3D5-49B9-AC7B-BE0B2BAA0953"],["4F429C0B-B3D5-49B9-AC7B-BE0B2BAA0953"],["B1212500-7C71-4B0B-B979-C8A5E93B544C","D7191BF4-96AD-46A9-89F8-B015FD27C991","5D8415B8-AD5B-44AE-804C-9A2A62B177F8"],["D7191BF4-96AD-46A9-89F8-B015FD27C991","F63DCD53-F24F-4AE7-84C0-61419A5D6E68"],["F63DCD53-F24F-4AE7-84C0-61419A5D6E68","6FD89C72-5D89-4A96-B643-4BDDDEC450AC"],["6FD89C72-5D89-4A96-B643-4BDDDEC450AC","28B608E4-AED5-4042-977B-B32908F4DC0F"],["28B608E4-AED5-4042-977B-B32908F4DC0F","04FEF0CF-A123-4DB2-A9CC-72E134399258"],["04FEF0CF-A123-4DB2-A9CC-72E134399258","E78076C8-224D-4606-81AD-7DF62AE1B946"],["E78076C8-224D-4606-81AD-7DF62AE1B946","6D9D49EF-63D9-441E-865B-80CFE99B3E48"],["6D9D49EF-63D9-441E-865B-80CFE99B3E48","E0E57B88-D092-45E3-93DE-F47199063BEA"],["E0E57B88-D092-45E3-93DE-F47199063BEA","1F0628F7-D965-4529-8228-AA53C73527B2"],["1F0628F7-D965-4529-8228-AA53C73527B2","5A3B2B58-7D59-4EA8-BA25-EE9243C1AB8B"],["5A3B2B58-7D59-4EA8-BA25-EE9243C1AB8B","EC74E906-1F03-4570-A640-5E95985106E8"],["EC74E906-1F03-4570-A640-5E95985106E8"],["7F7F7458-6893-4CAE-A35A-78DCBA2DF0A8"],["5946ACA1-B182-4776-BAC0-5EC43E0480C6"],["05C8F42F-1F73-443B-B461-A3FFE6867199","E8C9F6D8-E4E3-4764-9449-4AC760B4EAA0"],["E8C9F6D8-E4E3-4764-9449-4AC760B4EAA0"],["4C0B70B2-C4EC-4716-A08C-220E856D5B4A","A870BA4E-6243-4C93-B823-BDF69104A69A"],["A870BA4E-6243-4C93-B823-BDF69104A69A"],["9BFCB2C3-78B9-4982-8501-2BFF113D4207","2C1FEC64-B01F-4D90-93AF-4F17977F3E05"],["2C1FEC64-B01F-4D90-93AF-4F17977F3E05","27D920A3-4748-497F-92C3-0CEAE399325B","FF0DE3EB-BA66-4B54-9700-1075754A5EB3","53CADF73-2F2C-4BCC-8748-842EE8177A85","5C54BDDE-E5AB-472E-BB3E-CC33CEDB5E2B","8A3E20D3-00BC-47E5-AC05-E717C6A803C6"],["27D920A3-4748-497F-92C3-0CEAE399325B","3DB4BB32-A030-449C-B131-424A2FD3A651"],["3DB4BB32-A030-449C-B131-424A2FD3A651","FB0B3D0C-9C10-4533-924E-96F0ACC2BB2D"],["FB0B3D0C-9C10-4533-924E-96F0ACC2BB2D","744A07BE-0872-47C6-B69E-6FD2A3E8EC1B","13BD4AA3-E5C9-4A13-A702-70244A2B81AC"],["744A07BE-0872-47C6-B69E-6FD2A3E8EC1B"],["13BD4AA3-E5C9-4A13-A702-70244A2B81AC","6940ABE5-F16A-451E-9986-1853902A8FAA","475EAF65-F5DA-4D50-AA66-64CF5305CBC9","A5D7A8C8-3B1D-44A4-AA31-4B1602B10252","4D115C88-FC8E-4544-AC27-0B775B126D44"],["6940ABE5-F16A-451E-9986-1853902A8FAA","2657C9EE-BFA1-43FA-BB34-1A624A4E5237","228A6803-C3D9-420B-A083-476A5B6FE927"],["2657C9EE-BFA1-43FA-BB34-1A624A4E5237"],["228A6803-C3D9-420B-A083-476A5B6FE927","F095128A-1A37-4D3C-98C5-FAE6E3F9E808"],["F095128A-1A37-4D3C-98C5-FAE6E3F9E808"],["475EAF65-F5DA-4D50-AA66-64CF5305CBC9","39717030-47DE-4D14-8D3B-9D454BE3AF3B"],["39717030-47DE-4D14-8D3B-9D454BE3AF3B"],["A5D7A8C8-3B1D-44A4-AA31-4B1602B10252","08A7BDCA-0161-40B1-9F74-EF7E09C1BE13","8DFECF54-6362-48C2-84A0-B9A79FD7371A"],["08A7BDCA-0161-40B1-9F74-EF7E09C1BE13","8DFECF54-6362-48C2-84A0-B9A79FD7371A"],["8DFECF54-6362-48C2-84A0-B9A79FD7371A"],["4D115C88-FC8E-4544-AC27-0B775B126D44","4D115C88-FC8E-4544-AC27-0B775B126D44","84C0342B-29BC-4E8A-A39D-0D638491312E","F0CABC11-FB43-49D3-B32C-F6AC2F728BEF"],["84C0342B-29BC-4E8A-A39D-0D638491312E","F0CABC11-FB43-49D3-B32C-F6AC2F728BEF"],["F0CABC11-FB43-49D3-B32C-F6AC2F728BEF"],["FF0DE3EB-BA66-4B54-9700-1075754A5EB3"],["53CADF73-2F2C-4BCC-8748-842EE8177A85","D733DA5C-E0BC-4EAE-BD64-92B116E15988"],["D733DA5C-E0BC-4EAE-BD64-92B116E15988"],["5C54BDDE-E5AB-472E-BB3E-CC33CEDB5E2B","CC9D819E-DC87-4E17-97B4-AADC851E9E8E"],["CC9D819E-DC87-4E17-97B4-AADC851E9E8E"],["8A3E20D3-00BC-47E5-AC05-E717C6A803C6","83BA614D-5560-48B0-8377-217CF04E01FC"],["83BA614D-5560-48B0-8377-217CF04E01FC"],["E55861C5-E9D1-4B9A-956B-DC53B1C0E01E"],["8405A4E1-F7F9-4016-86B8-2E5C98520036"],["8573618D-34C1-481C-A217-71AB05C7C4D7","F05FC454-9C67-4E53-AAC4-A288D7E0E4E2"],["F05FC454-9C67-4E53-AAC4-A288D7E0E4E2"],["B9839052-6809-4E31-8792-FF4DF8C9FC48","38B0E475-2D54-4818-ABC6-E353229FDFF2"],["38B0E475-2D54-4818-ABC6-E353229FDFF2"],["68B6E135-509A-4064-9FF9-DE55C3B66A8E"],["6A92592D-70EE-451D-941A-AD8F8435EF6E"],["DC5F27E6-E594-4651-A151-4F70145EDFD5"],["092BED79-8510-4E20-9040-0BF73C433EB0","F1D5FF04-CA73-47D3-87C6-41C6BA8F6708","ACF82BBE-F34C-4E20-B18E-08F28B3ABA12","B6246F44-0855-4817-9D0D-D397E9DB7442","050CF590-16D7-48A8-9656-E58FD0B6E8BF","1EE48F2F-650A-413A-8F77-720A641BA416","C2DF7137-7E37-4EAD-8AF9-BDCF24C7A5BA"],["F1D5FF04-CA73-47D3-87C6-41C6BA8F6708"],["ACF82BBE-F34C-4E20-B18E-08F28B3ABA12"],["B6246F44-0855-4817-9D0D-D397E9DB7442"],["050CF590-16D7-48A8-9656-E58FD0B6E8BF"],["1EE48F2F-650A-413A-8F77-720A641BA416"],["C2DF7137-7E37-4EAD-8AF9-BDCF24C7A5BA"],["20790E3B-9D36-40B2-82CB-56322AA09DE7","28763A09-FA38-43D2-A7C3-52E15D20F5B9"],["28763A09-FA38-43D2-A7C3-52E15D20F5B9"],["B20BB587-FDB1-45B4-9F6B-04D75DB45484","9C1A33F2-FA28-4FD0-B3A3-011939BF112E","DE7F9890-14E7-433A-AD84-B0E18BE5BD79"],["9C1A33F2-FA28-4FD0-B3A3-011939BF112E","0B0E75E0-8E66-4B96-8D18-05B388B8166B","39C8C744-9E33-4FBD-B64F-4392BB1D7D43","F3CDF5ED-FE39-4306-9BC7-732E7252919B","C4AE0F47-95C9-42BF-875A-9DF1743AAFB2","EE895C76-B04A-4587-9970-5A6CBA56069C"],["0B0E75E0-8E66-4B96-8D18-05B388B8166B"],["39C8C744-9E33-4FBD-B64F-4392BB1D7D43"],["F3CDF5ED-FE39-4306-9BC7-732E7252919B"],["C4AE0F47-95C9-42BF-875A-9DF1743AAFB2","33DB61E6-CD56-4F49-98BD-5397EB788805","6C32C072-E56E-40F0-AC39-7909FC465612","64768881-AED3-403E-92A8-E4A3CBB39100"],["33DB61E6-CD56-4F49-98BD-5397EB788805","554920A7-A50D-44F4-8448-DD747BBB57DA"],["554920A7-A50D-44F4-8448-DD747BBB57DA","803C7EA0-EF36-42AE-B810-7620C3509FEA","21CBC21A-6D6E-424D-B1D0-DCCD5425A05B","A9BA755A-FE4B-498E-9952-40214F02B8D6","6C32C072-E56E-40F0-AC39-7909FC465612","64768881-AED3-403E-92A8-E4A3CBB39100","DE7F9890-14E7-433A-AD84-B0E18BE5BD79"],["803C7EA0-EF36-42AE-B810-7620C3509FEA"],["21CBC21A-6D6E-424D-B1D0-DCCD5425A05B"],["A9BA755A-FE4B-498E-9952-40214F02B8D6","5503BDDB-9985-44D9-B9A4-F731513F6903","FEC6325D-1E5F-4790-A841-63709B264A8D","82F1F09B-EBCB-4F04-BDF1-4991F27E3724"],["82F1F09B-EBCB-4F04-BDF1-4991F27E3724","82F1F09B-EBCB-4F04-BDF1-4991F27E3724"],["5503BDDB-9985-44D9-B9A4-F731513F6903","FEC6325D-1E5F-4790-A841-63709B264A8D"],["FEC6325D-1E5F-4790-A841-63709B264A8D","905689F0-5537-42CC-B864-9166DA60C470","D8049867-1FC0-4817-BD67-64A421349C65"],["905689F0-5537-42CC-B864-9166DA60C470"],["D8049867-1FC0-4817-BD67-64A421349C65","6CAB2F87-C43C-4231-BD7A-AD9747EDCDCB","DE7F9890-14E7-433A-AD84-B0E18BE5BD79"],["6CAB2F87-C43C-4231-BD7A-AD9747EDCDCB"],["6C32C072-E56E-40F0-AC39-7909FC465612"],["64768881-AED3-403E-92A8-E4A3CBB39100"],["EE895C76-B04A-4587-9970-5A6CBA56069C"],["DE7F9890-14E7-433A-AD84-B0E18BE5BD79"],["95BBCB02-420D-4FD9-A9BA-A404D72B41D3"],["6A893E71-2F6B-4958-B917-5F145FA37CF5","3041389D-AD21-46F6-9721-2DD4E9FC1F65"],["3041389D-AD21-46F6-9721-2DD4E9FC1F65"],["CC97CAEF-3828-466E-B55A-BA85783CE034","4F5D4105-E8C7-4F54-97E6-F9549BC75D4F"],["0F8B3461-7B9D-4E1D-A392-A6DE782AE537"],["DEADD385-73FB-4EA3-AACC-13C6B453E9E6","CDC69285-DE4B-40DE-BDFB-73C750FA8CB4"],["CDC69285-DE4B-40DE-BDFB-73C750FA8CB4","EEF6AD45-1ABB-4D2E-BCA0-A3BE592FCE95"],["EEF6AD45-1ABB-4D2E-BCA0-A3BE592FCE95","662B5EE1-6533-44B3-BC7A-2DF7708F1658"],["662B5EE1-6533-44B3-BC7A-2DF7708F1658"],["973015FD-576A-40F3-A86C-2E8EDA196B5F","29155A2F-FCBB-4347-90DE-E8D3F86A3FFA","E400970C-2383-40ED-90F4-793AFAD87E45","65FB0CCF-F7C4-4159-9D6D-0F929AB12136"],["29155A2F-FCBB-4347-90DE-E8D3F86A3FFA"],["E400970C-2383-40ED-90F4-793AFAD87E45","788AC673-A0A0-4E77-93EC-2A21B981D7A8"],["788AC673-A0A0-4E77-93EC-2A21B981D7A8","3C66F9F4-19C8-497C-AD5A-377F74970968"],["3C66F9F4-19C8-497C-AD5A-377F74970968","829B047D-0C32-4887-8A3B-690BED8B847B","DFDD1307-4F65-4A71-AC89-9E7B8A3D22FB"],["829B047D-0C32-4887-8A3B-690BED8B847B","DFDD1307-4F65-4A71-AC89-9E7B8A3D22FB"],["DFDD1307-4F65-4A71-AC89-9E7B8A3D22FB"],["88244D22-DAEF-4189-83EB-E7B5D5726E62"],["9CE480B4-FB41-45F1-ABF5-D956A5526141"],["F2CA7E5B-766D-48F0-941D-D4B1FD54C097"],["987F0FDD-0FAF-44FC-9DE7-7D88E32D801D","6423DD8B-C097-4C26-9917-D401ACA5FE91"],["6423DD8B-C097-4C26-9917-D401ACA5FE91","6345AAF7-5F22-49C1-8052-E28059BFFC3F"],["6345AAF7-5F22-49C1-8052-E28059BFFC3F","29EA91F8-0360-45F4-9E0A-511D80C51516","2DAB65D3-0549-4831-9C7C-8EBCDDE96F2D","04C21F20-915C-446A-902D-A8D5D7076C6F"],["29EA91F8-0360-45F4-9E0A-511D80C51516","4798DE69-2868-4EA6-84D8-E4D0CE7A90E8"],["4798DE69-2868-4EA6-84D8-E4D0CE7A90E8"],["2DAB65D3-0549-4831-9C7C-8EBCDDE96F2D","2CE0722A-9C86-40E1-ACB8-DBD6EDCF10E3"],["2CE0722A-9C86-40E1-ACB8-DBD6EDCF10E3"],["04C21F20-915C-446A-902D-A8D5D7076C6F","23D5758E-178A-43BD-A82B-5D1F11CC1223"],["23D5758E-178A-43BD-A82B-5D1F11CC1223"],["7D0652E2-E579-47BC-8FB9-E1FBA3539A3F"],["5D8415B8-AD5B-44AE-804C-9A2A62B177F8"],["025E5CB8-BF2F-46EC-A170-4F80BD2FCA54"],["C120D32F-4E27-481A-97F9-9B62BB394DF9"],["94D5EB98-E41E-4DD5-8B8D-06598E285B4E"],["2E8B960D-5F3B-4AB7-8A28-23D9FE4326DB"],["4F5D4105-E8C7-4F54-97E6-F9549BC75D4F"],["65FB0CCF-F7C4-4159-9D6D-0F929AB12136"]];function a4(i,e,t){let l=i*Math.PI/180,n=e*Math.PI/180-Math.PI,q=t*Math.sin(l)*Math.sin(n),s=t*Math.cos(l),a=t*Math.sin(l)*Math.cos(n);return{x:q,y:s,z:a}}function ni(i,e,t){let l=Math.acos(e/Math.sqrt(Math.pow(t,2)+Math.pow(i,2)+Math.pow(e,2))),n=Math.atan(i/t),q=!1,s=!1;t>0&&(q=!0),i>0&&(s=!0);let a=l/Math.PI*180,r=n/Math.PI*180+180;return q==!1&&s==!1&&(r-=180),q==!1&&s==!0&&(r+=180),{lat:a,lng:r}}const m7={type:"change"},s5={type:"start"},h7={type:"end"};class qi extends y3{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new S,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:w3.ROTATE,MIDDLE:w3.DOLLY,RIGHT:w3.PAN},this.touches={ONE:T3.ROTATE,TWO:T3.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(C){C.addEventListener("keydown",h2),this._domElementKeyEvents=C},this.saveState=function(){l.target0.copy(l.target),l.position0.copy(l.object.position),l.zoom0=l.object.zoom},this.reset=function(){l.target.copy(l.target0),l.object.position.copy(l.position0),l.object.zoom=l.zoom0,l.object.updateProjectionMatrix(),l.dispatchEvent(m7),l.update(),q=n.NONE},this.update=function(){const C=new S,Y=new D3().setFromUnitVectors(e.up,new S(0,1,0)),t1=Y.clone().invert(),s1=new S,i1=new D3,p1=2*Math.PI;return function(){const P1=l.object.position;C.copy(P1).sub(l.target),C.applyQuaternion(Y),a.setFromVector3(C),l.autoRotate&&q===n.NONE&&M(z()),l.enableDamping?(a.theta+=r.theta*l.dampingFactor,a.phi+=r.phi*l.dampingFactor):(a.theta+=r.theta,a.phi+=r.phi);let b=l.minAzimuthAngle,n1=l.maxAzimuthAngle;return isFinite(b)&&isFinite(n1)&&(b<-Math.PI?b+=p1:b>Math.PI&&(b-=p1),n1<-Math.PI?n1+=p1:n1>Math.PI&&(n1-=p1),b<=n1?a.theta=Math.max(b,Math.min(n1,a.theta)):a.theta=a.theta>(b+n1)/2?Math.max(b,a.theta):Math.min(n1,a.theta)),a.phi=Math.max(l.minPolarAngle,Math.min(l.maxPolarAngle,a.phi)),a.makeSafe(),a.radius*=o,a.radius=Math.max(l.minDistance,Math.min(l.maxDistance,a.radius)),l.enableDamping===!0?l.target.addScaledVector(m,l.dampingFactor):l.target.add(m),C.setFromSpherical(a),C.applyQuaternion(t1),P1.copy(l.target).add(C),l.object.lookAt(l.target),l.enableDamping===!0?(r.theta*=1-l.dampingFactor,r.phi*=1-l.dampingFactor,m.multiplyScalar(1-l.dampingFactor)):(r.set(0,0,0),m.set(0,0,0)),o=1,h||s1.distanceToSquared(l.object.position)>s||8*(1-i1.dot(l.object.quaternion))>s?(l.dispatchEvent(m7),s1.copy(l.object.position),i1.copy(l.object.quaternion),h=!1,!0):!1}}(),this.dispose=function(){l.domElement.removeEventListener("contextmenu",U),l.domElement.removeEventListener("pointerdown",H1),l.domElement.removeEventListener("pointercancel",m2),l.domElement.removeEventListener("wheel",x2),l.domElement.removeEventListener("pointermove",Q1),l.domElement.removeEventListener("pointerup",Y1),l._domElementKeyEvents!==null&&l._domElementKeyEvents.removeEventListener("keydown",h2)};const l=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let q=n.NONE;const s=1e-6,a=new o7,r=new o7;let o=1;const m=new S;let h=!1;const c=new r1,f=new r1,x=new r1,d=new r1,u=new r1,p=new r1,A=new r1,B=new r1,v=new r1,g=[],F={};function z(){return 2*Math.PI/60/60*l.autoRotateSpeed}function _(){return Math.pow(.95,l.zoomSpeed)}function M(C){r.theta-=C}function T(C){r.phi-=C}const X=function(){const C=new S;return function(t1,s1){C.setFromMatrixColumn(s1,0),C.multiplyScalar(-t1),m.add(C)}}(),q1=function(){const C=new S;return function(t1,s1){l.screenSpacePanning===!0?C.setFromMatrixColumn(s1,1):(C.setFromMatrixColumn(s1,0),C.crossVectors(l.object.up,C)),C.multiplyScalar(t1),m.add(C)}}(),N=function(){const C=new S;return function(t1,s1){const i1=l.domElement;if(l.object.isPerspectiveCamera){const p1=l.object.position;C.copy(p1).sub(l.target);let B1=C.length();B1*=Math.tan(l.object.fov/2*Math.PI/180),X(2*t1*B1/i1.clientHeight,l.object.matrix),q1(2*s1*B1/i1.clientHeight,l.object.matrix)}else l.object.isOrthographicCamera?(X(t1*(l.object.right-l.object.left)/l.object.zoom/i1.clientWidth,l.object.matrix),q1(s1*(l.object.top-l.object.bottom)/l.object.zoom/i1.clientHeight,l.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),l.enablePan=!1)}}();function w(C){l.object.isPerspectiveCamera?o/=C:l.object.isOrthographicCamera?(l.object.zoom=Math.max(l.minZoom,Math.min(l.maxZoom,l.object.zoom*C)),l.object.updateProjectionMatrix(),h=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),l.enableZoom=!1)}function W(C){l.object.isPerspectiveCamera?o*=C:l.object.isOrthographicCamera?(l.object.zoom=Math.max(l.minZoom,Math.min(l.maxZoom,l.object.zoom/C)),l.object.updateProjectionMatrix(),h=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),l.enableZoom=!1)}function j(C){c.set(C.clientX,C.clientY)}function Z(C){A.set(C.clientX,C.clientY)}function G(C){d.set(C.clientX,C.clientY)}function P(C){f.set(C.clientX,C.clientY),x.subVectors(f,c).multiplyScalar(l.rotateSpeed);const Y=l.domElement;M(2*Math.PI*x.x/Y.clientHeight),T(2*Math.PI*x.y/Y.clientHeight),c.copy(f),l.update()}function I(C){B.set(C.clientX,C.clientY),v.subVectors(B,A),v.y>0?w(_()):v.y<0&&W(_()),A.copy(B),l.update()}function $(C){u.set(C.clientX,C.clientY),p.subVectors(u,d).multiplyScalar(l.panSpeed),N(p.x,p.y),d.copy(u),l.update()}function J(C){C.deltaY<0?W(_()):C.deltaY>0&&w(_()),l.update()}function K(C){let Y=!1;switch(C.code){case l.keys.UP:N(0,l.keyPanSpeed),Y=!0;break;case l.keys.BOTTOM:N(0,-l.keyPanSpeed),Y=!0;break;case l.keys.LEFT:N(l.keyPanSpeed,0),Y=!0;break;case l.keys.RIGHT:N(-l.keyPanSpeed,0),Y=!0;break}Y&&(C.preventDefault(),l.update())}function c1(){if(g.length===1)c.set(g[0].pageX,g[0].pageY);else{const C=.5*(g[0].pageX+g[1].pageX),Y=.5*(g[0].pageY+g[1].pageY);c.set(C,Y)}}function _1(){if(g.length===1)d.set(g[0].pageX,g[0].pageY);else{const C=.5*(g[0].pageX+g[1].pageX),Y=.5*(g[0].pageY+g[1].pageY);d.set(C,Y)}}function H(){const C=g[0].pageX-g[1].pageX,Y=g[0].pageY-g[1].pageY,t1=Math.sqrt(C*C+Y*Y);A.set(0,t1)}function S1(){l.enableZoom&&H(),l.enablePan&&_1()}function d1(){l.enableZoom&&H(),l.enableRotate&&c1()}function g1(C){if(g.length==1)f.set(C.pageX,C.pageY);else{const t1=x1(C),s1=.5*(C.pageX+t1.x),i1=.5*(C.pageY+t1.y);f.set(s1,i1)}x.subVectors(f,c).multiplyScalar(l.rotateSpeed);const Y=l.domElement;M(2*Math.PI*x.x/Y.clientHeight),T(2*Math.PI*x.y/Y.clientHeight),c.copy(f)}function h1(C){if(g.length===1)u.set(C.pageX,C.pageY);else{const Y=x1(C),t1=.5*(C.pageX+Y.x),s1=.5*(C.pageY+Y.y);u.set(t1,s1)}p.subVectors(u,d).multiplyScalar(l.panSpeed),N(p.x,p.y),d.copy(u)}function w1(C){const Y=x1(C),t1=C.pageX-Y.x,s1=C.pageY-Y.y,i1=Math.sqrt(t1*t1+s1*s1);B.set(0,i1),v.set(0,Math.pow(B.y/A.y,l.zoomSpeed)),w(v.y),A.copy(B)}function v1(C){l.enableZoom&&w1(C),l.enablePan&&h1(C)}function f1(C){l.enableZoom&&w1(C),l.enableRotate&&g1(C)}function H1(C){l.enabled!==!1&&(g.length===0&&(l.domElement.setPointerCapture(C.pointerId),l.domElement.addEventListener("pointermove",Q1),l.domElement.addEventListener("pointerup",Y1)),Q(C),C.pointerType==="touch"?y(C):j1(C))}function Q1(C){l.enabled!==!1&&(C.pointerType==="touch"?E(C):T1(C))}function Y1(C){e1(C),g.length===0&&(l.domElement.releasePointerCapture(C.pointerId),l.domElement.removeEventListener("pointermove",Q1),l.domElement.removeEventListener("pointerup",Y1)),l.dispatchEvent(h7),q=n.NONE}function m2(C){e1(C)}function j1(C){let Y;switch(C.button){case 0:Y=l.mouseButtons.LEFT;break;case 1:Y=l.mouseButtons.MIDDLE;break;case 2:Y=l.mouseButtons.RIGHT;break;default:Y=-1}switch(Y){case w3.DOLLY:if(l.enableZoom===!1)return;Z(C),q=n.DOLLY;break;case w3.ROTATE:if(C.ctrlKey||C.metaKey||C.shiftKey){if(l.enablePan===!1)return;G(C),q=n.PAN}else{if(l.enableRotate===!1)return;j(C),q=n.ROTATE}break;case w3.PAN:if(C.ctrlKey||C.metaKey||C.shiftKey){if(l.enableRotate===!1)return;j(C),q=n.ROTATE}else{if(l.enablePan===!1)return;G(C),q=n.PAN}break;default:q=n.NONE}q!==n.NONE&&l.dispatchEvent(s5)}function T1(C){switch(q){case n.ROTATE:if(l.enableRotate===!1)return;P(C);break;case n.DOLLY:if(l.enableZoom===!1)return;I(C);break;case n.PAN:if(l.enablePan===!1)return;$(C);break}}function x2(C){l.enabled===!1||l.enableZoom===!1||q!==n.NONE||(C.preventDefault(),l.dispatchEvent(s5),J(C),l.dispatchEvent(h7))}function h2(C){l.enabled===!1||l.enablePan===!1||K(C)}function y(C){switch(a1(C),g.length){case 1:switch(l.touches.ONE){case T3.ROTATE:if(l.enableRotate===!1)return;c1(),q=n.TOUCH_ROTATE;break;case T3.PAN:if(l.enablePan===!1)return;_1(),q=n.TOUCH_PAN;break;default:q=n.NONE}break;case 2:switch(l.touches.TWO){case T3.DOLLY_PAN:if(l.enableZoom===!1&&l.enablePan===!1)return;S1(),q=n.TOUCH_DOLLY_PAN;break;case T3.DOLLY_ROTATE:if(l.enableZoom===!1&&l.enableRotate===!1)return;d1(),q=n.TOUCH_DOLLY_ROTATE;break;default:q=n.NONE}break;default:q=n.NONE}q!==n.NONE&&l.dispatchEvent(s5)}function E(C){switch(a1(C),q){case n.TOUCH_ROTATE:if(l.enableRotate===!1)return;g1(C),l.update();break;case n.TOUCH_PAN:if(l.enablePan===!1)return;h1(C),l.update();break;case n.TOUCH_DOLLY_PAN:if(l.enableZoom===!1&&l.enablePan===!1)return;v1(C),l.update();break;case n.TOUCH_DOLLY_ROTATE:if(l.enableZoom===!1&&l.enableRotate===!1)return;f1(C),l.update();break;default:q=n.NONE}}function U(C){l.enabled!==!1&&C.preventDefault()}function Q(C){g.push(C)}function e1(C){delete F[C.pointerId];for(let Y=0;Y<g.length;Y++)if(g[Y].pointerId==C.pointerId){g.splice(Y,1);return}}function a1(C){let Y=F[C.pointerId];Y===void 0&&(Y=new r1,F[C.pointerId]=Y),Y.set(C.pageX,C.pageY)}function x1(C){const Y=C.pointerId===g[0].pointerId?g[1]:g[0];return F[Y.pointerId]}l.domElement.addEventListener("contextmenu",U),l.domElement.addEventListener("pointerdown",H1),l.domElement.addEventListener("pointercancel",m2),l.domElement.addEventListener("wheel",x2,{passive:!1}),this.update()}}class ii extends A6{constructor(e){super(e)}load(e,t,l,n){const q=this,s=new Zq(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(e,function(a){const r=q.parse(JSON.parse(a));t&&t(r)},l,n)}parse(e){return new ai(e)}}class ai{constructor(e){this.isFont=!0,this.type="Font",this.data=e}generateShapes(e,t=100){const l=[],n=si(e,t,this.data);for(let q=0,s=n.length;q<s;q++)l.push(...n[q].toShapes());return l}}function si(i,e,t){const l=Array.from(i),n=e/t.resolution,q=(t.boundingBox.yMax-t.boundingBox.yMin+t.underlineThickness)*n,s=[];let a=0,r=0;for(let o=0;o<l.length;o++){const m=l[o];if(m===`
`)a=0,r-=q;else{const h=ri(m,n,a,r,t);a+=h.offsetX,s.push(h.path)}}return s}function ri(i,e,t,l,n){const q=n.glyphs[i]||n.glyphs["?"];if(!q){console.error('THREE.Font: character "'+i+'" does not exists in font family '+n.familyName+".");return}const s=new ti;let a,r,o,m,h,c,f,x;if(q.o){const d=q._cachedOutline||(q._cachedOutline=q.o.split(" "));for(let u=0,p=d.length;u<p;)switch(d[u++]){case"m":a=d[u++]*e+t,r=d[u++]*e+l,s.moveTo(a,r);break;case"l":a=d[u++]*e+t,r=d[u++]*e+l,s.lineTo(a,r);break;case"q":o=d[u++]*e+t,m=d[u++]*e+l,h=d[u++]*e+t,c=d[u++]*e+l,s.quadraticCurveTo(h,c,o,m);break;case"b":o=d[u++]*e+t,m=d[u++]*e+l,h=d[u++]*e+t,c=d[u++]*e+l,f=d[u++]*e+t,x=d[u++]*e+l,s.bezierCurveTo(h,c,f,x,o,m);break}}return{offsetX:q.ha*e,path:s}}const oi="/Planet/assets/terrain8k.d5bba463.jpg",mi="/Planet/assets/normal8k.fc4444fd.jpg",hi="/Planet/assets/roughness2k.06c786a2.jpg",ci="/Planet/assets/clouds2.dec6ecfe.png",ui="/Planet/assets/cloudsalpha.78a3d208.jpg",fi="/Planet/assets/star.71d593a7.png",di="/Planet/assets/moon.b246064f.jpg",xi="/Planet/assets/moon2.29310b47.png",pi="/Planet/assets/moon3.d1a182f0.png",_i={0:{ha:690,x_min:61,x_max:629,o:"m 346 -17 q 137 103 213 -17 q 61 446 61 224 q 137 786 61 669 q 346 903 213 903 q 553 786 478 903 q 629 446 629 669 q 553 103 629 224 q 346 -17 478 -17 m 346 75 q 471 163 424 75 q 518 446 518 251 q 471 726 518 640 q 346 811 424 811 q 220 726 268 811 q 172 446 172 640 q 220 163 172 251 q 346 75 268 75 z "},1:{ha:690,x_min:110,x_max:610,o:"m 110 0 l 110 94 l 313 94 l 313 747 l 151 747 l 151 821 q 258 848 213 832 q 339 886 303 864 l 426 886 l 426 94 l 610 94 l 610 0 l 110 0 z "},2:{ha:690,x_min:51,x_max:628,o:"m 56 0 l 56 69 q 282 301 189 200 q 424 483 375 401 q 472 636 472 565 q 431 761 472 713 q 304 810 389 810 q 201 778 249 810 q 115 703 154 747 l 51 765 q 170 865 107 828 q 318 903 233 903 q 513 831 442 903 q 583 643 583 760 q 535 472 583 557 q 404 294 488 388 q 213 90 321 201 q 288 96 249 93 q 361 99 326 99 l 628 99 l 628 0 l 56 0 z "},3:{ha:690,x_min:36,x_max:619,o:"m 328 -17 q 151 22 222 -17 q 36 108 81 60 l 94 183 q 189 110 135 142 q 321 78 243 78 q 453 122 401 78 q 504 240 504 167 q 477 333 504 293 q 388 394 450 372 q 221 417 326 417 l 221 504 q 370 526 315 504 q 449 586 425 549 q 472 669 472 624 q 431 772 472 735 q 319 810 390 810 q 217 785 264 810 q 131 719 171 760 l 69 792 q 183 872 121 840 q 324 903 246 903 q 514 844 439 903 q 589 678 589 785 q 544 546 589 597 q 428 467 500 494 l 428 461 q 564 385 508 443 q 619 236 619 328 q 581 101 619 158 q 476 14 542 44 q 328 -17 410 -17 z "},4:{ha:690,x_min:24,x_max:651,o:"m 144 336 l 422 336 l 422 593 q 425 679 422 629 q 429 764 428 729 l 424 764 q 389 701 407 732 q 351 639 371 671 l 144 336 m 422 0 l 422 244 l 24 244 l 24 319 l 403 886 l 531 886 l 531 336 l 651 336 l 651 244 l 531 244 l 531 0 l 422 0 z "},5:{ha:690,x_min:35,x_max:624,o:"m 325 -17 q 150 21 219 -17 q 35 104 81 58 l 90 179 q 183 109 131 140 q 314 78 236 78 q 452 133 396 78 q 508 281 508 188 q 457 424 508 372 q 319 475 406 475 q 241 461 274 475 q 168 421 208 447 l 107 460 l 136 886 l 579 886 l 579 788 l 236 788 l 213 525 q 276 551 244 542 q 349 561 308 561 q 487 531 425 561 q 586 440 549 501 q 624 283 624 379 q 581 120 624 188 q 471 18 539 53 q 325 -17 403 -17 z "},6:{ha:690,x_min:67,x_max:635,o:"m 363 456 q 269 428 319 456 q 178 339 219 400 q 238 142 189 210 q 372 74 288 74 q 482 127 438 74 q 526 268 526 181 q 485 405 526 354 q 363 456 444 456 m 372 -17 q 217 31 286 -17 q 107 173 147 78 q 67 410 67 268 q 115 696 67 588 q 240 853 163 804 q 404 903 317 903 q 528 876 476 903 q 618 808 581 849 l 554 738 q 489 788 528 769 q 408 807 450 807 q 294 772 346 807 q 210 653 243 736 q 175 431 178 571 q 272 512 217 482 q 382 542 328 542 q 566 473 497 542 q 635 268 635 404 q 599 119 635 183 q 503 19 563 56 q 372 -17 444 -17 z "},7:{ha:690,x_min:61,x_max:632,o:"m 238 0 q 274 299 246 167 q 358 548 301 431 q 504 788 414 665 l 61 788 l 61 886 l 632 886 l 632 815 q 500 622 551 714 q 419 436 449 531 q 376 235 390 342 q 356 0 361 129 l 238 0 z "},8:{ha:690,x_min:57,x_max:633,o:"m 347 -17 q 199 15 264 -17 q 95 101 133 46 q 57 226 57 157 q 81 330 57 285 q 144 409 106 375 q 224 465 182 443 l 224 471 q 138 556 175 506 q 100 675 100 606 q 133 794 100 743 q 224 874 167 846 q 351 903 281 903 q 534 836 467 903 q 601 667 601 769 q 582 580 601 621 q 535 506 563 539 q 479 453 507 474 l 479 447 q 554 394 519 425 q 611 322 589 364 q 633 219 633 279 q 598 100 633 154 q 498 15 563 46 q 347 -17 433 -17 m 410 483 q 478 568 454 524 q 503 661 503 613 q 463 772 503 726 q 349 818 422 818 q 247 779 288 818 q 206 675 206 740 q 234 588 206 622 q 310 528 263 553 q 410 483 357 504 m 350 68 q 476 112 428 68 q 524 224 524 156 q 490 317 524 281 q 402 379 457 353 q 283 431 347 406 q 195 347 231 396 q 160 238 160 299 q 215 116 160 164 q 350 68 269 68 z "},9:{ha:690,x_min:56,x_max:622,o:"m 163 618 q 203 481 163 532 q 326 431 244 431 q 420 458 371 431 q 513 549 469 486 q 451 745 501 678 q 317 813 401 813 q 208 759 253 813 q 163 618 163 706 m 285 -17 q 160 10 214 -17 q 71 76 107 38 l 135 149 q 201 97 163 117 q 281 78 239 78 q 396 114 343 78 q 481 233 449 150 q 515 458 514 317 q 418 375 474 406 q 307 344 363 344 q 124 413 193 344 q 56 618 56 482 q 92 767 56 703 q 187 867 128 831 q 317 903 246 903 q 474 856 404 903 q 583 714 543 808 q 622 476 622 619 q 574 190 622 299 q 450 33 526 82 q 285 -17 374 -17 z "}," ":{ha:278,x_min:0,x_max:0,o:""},A:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 z "},B:{ha:817,x_min:125,x_max:761,o:"m 125 0 l 125 911 l 396 911 q 559 889 489 911 q 669 818 629 867 q 708 689 708 769 q 674 565 708 618 q 575 490 640 511 l 575 485 q 711 416 661 469 q 761 271 761 363 q 717 120 761 181 q 596 30 674 60 q 415 0 518 0 l 125 0 m 240 524 l 375 524 q 543 564 492 524 q 594 674 594 604 q 541 786 594 753 q 381 819 488 819 l 240 819 l 240 524 m 240 92 l 399 92 q 582 135 517 92 q 647 271 647 179 q 583 395 647 356 q 399 435 518 435 l 240 435 l 240 92 z "},C:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 z "},D:{ha:854,x_min:125,x_max:783,o:"m 125 0 l 125 911 l 353 911 q 674 794 564 911 q 783 460 783 676 q 674 121 783 242 q 358 0 565 0 l 125 0 m 240 94 l 344 94 q 584 191 504 94 q 664 460 664 288 q 584 724 664 632 q 344 817 504 817 l 240 817 l 240 94 z "},E:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 z "},F:{ha:686,x_min:125,x_max:650,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 506 l 588 506 l 588 408 l 240 408 l 240 0 l 125 0 z "},G:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 z "},H:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 z "},I:{ha:365,x_min:125,x_max:240,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 z "},J:{ha:667,x_min:46,x_max:546,o:"m 288 -17 q 46 131 121 -17 l 124 182 q 281 85 181 85 q 392 131 356 85 q 429 282 429 176 l 429 911 l 546 911 l 546 271 q 519 126 546 192 q 436 22 493 61 q 288 -17 379 -17 z "},K:{ha:804,x_min:125,x_max:799,o:"m 125 0 l 125 911 l 240 911 l 240 454 l 244 454 l 624 911 l 754 911 l 469 564 l 799 0 l 669 0 l 397 474 l 240 289 l 240 0 l 125 0 z "},L:{ha:675,x_min:125,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 z "},M:{ha:1010,x_min:125,x_max:885,o:"m 125 0 l 125 911 l 271 911 l 443 424 q 474 331 458 376 q 504 235 489 286 l 510 235 q 538 331 525 286 q 568 424 551 376 l 740 911 l 885 911 l 885 0 l 776 0 l 776 501 q 779 592 776 542 q 786 691 782 642 q 793 781 790 740 l 788 781 l 717 561 l 546 90 l 461 90 l 290 561 l 219 781 l 214 781 q 222 691 218 740 q 228 592 226 642 q 231 501 231 542 l 231 0 l 125 0 z "},N:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 z "},O:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 z "},P:{ha:786,x_min:125,x_max:726,o:"m 125 0 l 125 911 l 385 911 q 564 886 488 911 q 683 802 640 861 q 726 643 726 743 q 633 431 726 500 q 390 361 540 361 l 240 361 l 240 0 l 125 0 m 240 456 l 376 456 q 553 501 496 456 q 611 643 611 546 q 551 780 611 742 q 371 818 490 818 l 240 818 l 240 456 z "},Q:{ha:922,x_min:72,x_max:871,o:"m 461 79 q 603 126 543 79 q 697 258 664 172 q 731 460 731 343 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 258 192 343 q 319 126 258 172 q 461 79 381 79 m 740 -229 q 529 -167 614 -229 q 404 -12 444 -106 q 231 63 306 1 q 114 225 156 124 q 72 460 72 326 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 811 229 851 329 q 699 67 771 129 q 529 -11 626 6 q 620 -101 561 -71 q 753 -132 679 -132 q 807 -128 783 -132 q 849 -119 831 -125 l 871 -207 q 815 -223 850 -217 q 740 -229 781 -229 z "},R:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 z "},S:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 z "},T:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 z "},U:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 z "},V:{ha:715,x_min:0,x_max:715,o:"m 286 0 l 0 911 l 124 911 l 264 419 q 308 269 288 338 q 353 118 329 200 l 358 118 q 401 269 382 200 q 446 419 421 338 l 597 911 l 715 911 l 421 0 l 286 0 z "},W:{ha:1092,x_min:32,x_max:1060,o:"m 221 0 l 32 911 l 156 911 l 249 415 q 275 268 263 342 q 299 117 288 194 l 304 117 q 335 269 319 194 q 367 415 350 343 l 490 911 l 607 911 l 726 415 q 760 269 743 343 q 792 117 776 194 l 797 117 q 820 269 808 194 q 846 415 832 343 l 942 911 l 1060 911 l 869 0 l 721 0 l 590 547 q 569 651 579 600 q 549 761 560 701 l 543 761 q 524 651 535 701 q 503 547 514 600 l 369 0 l 221 0 z "},X:{ha:713,x_min:21,x_max:692,o:"m 21 0 l 286 471 l 39 911 l 167 911 l 290 678 q 324 617 308 647 q 361 546 340 586 l 367 546 q 401 617 386 586 q 432 678 415 647 l 553 911 l 675 911 l 426 465 l 692 0 l 564 0 l 431 246 q 394 315 413 279 q 353 392 375 350 l 347 392 q 310 315 328 350 q 275 246 292 279 l 143 0 l 21 0 z "},Y:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 z "},Z:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 z "},a:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 z "},b:{ha:768,x_min:114,x_max:704,o:"m 413 -17 q 315 6 365 -17 q 219 69 264 29 l 215 69 l 206 0 l 114 0 l 114 989 l 228 989 l 228 719 l 225 597 q 326 665 271 638 q 436 692 381 692 q 636 599 568 692 q 704 349 704 506 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 321 572 365 596 q 228 504 276 549 l 228 150 q 316 95 272 111 q 393 79 360 79 z "},c:{ha:633,x_min:64,x_max:599,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 z "},d:{ha:771,x_min:65,x_max:657,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 989 l 657 989 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},e:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 z "},f:{ha:406,x_min:33,x_max:443,o:"m 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 782 q 181 945 133 885 q 331 1006 229 1006 q 392 999 363 1006 q 443 983 421 993 l 418 900 q 342 913 376 913 q 247 782 247 913 l 247 675 l 390 675 l 390 582 l 247 582 l 247 0 l 133 0 z "},g:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 z "},h:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},i:{ha:342,x_min:94,x_max:247,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 171 814 q 116 834 138 814 q 94 889 94 854 q 116 943 94 922 q 171 964 138 964 q 226 943 204 964 q 247 889 247 922 q 226 834 247 854 q 171 814 204 814 z "},j:{ha:343,x_min:-56,x_max:247,o:"m 44 -301 q -12 -296 14 -301 q -56 -282 -37 -290 l -32 -197 q -2 -205 -19 -201 q 32 -208 15 -208 q 99 -173 82 -208 q 115 -76 115 -137 l 115 675 l 229 675 l 229 -76 q 188 -240 229 -179 q 44 -301 146 -301 m 171 814 q 116 834 138 814 q 94 889 94 854 q 116 943 94 922 q 171 964 138 964 q 226 943 204 964 q 247 889 247 922 q 226 834 247 854 q 171 814 204 814 z "},k:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 989 l 228 989 l 228 321 l 231 321 l 517 675 l 644 675 l 419 403 l 675 0 l 550 0 l 353 325 l 228 178 l 228 0 l 114 0 z "},l:{ha:354,x_min:114,x_max:300,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 z "},m:{ha:1151,x_min:114,x_max:1046,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 319 659 267 626 q 432 692 372 692 q 553 658 510 692 q 618 563 597 624 q 725 656 671 619 q 840 692 779 692 q 995 624 944 692 q 1046 428 1046 557 l 1046 0 l 932 0 l 932 413 q 901 550 932 507 q 807 593 871 593 q 638 489 732 593 l 638 0 l 524 0 l 524 413 q 493 550 524 507 q 397 593 463 593 q 228 489 322 593 l 228 0 l 114 0 z "},n:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},o:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 z "},p:{ha:771,x_min:114,x_max:704,o:"m 114 -285 l 114 675 l 208 675 l 218 597 l 222 597 q 323 664 268 636 q 438 692 378 692 q 636 598 568 692 q 704 347 704 504 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 q 319 4 365 -17 q 225 61 272 25 l 228 -57 l 228 -285 l 114 -285 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 322 572 365 596 q 228 504 278 549 l 228 150 q 317 95 274 111 q 393 79 360 79 z "},q:{ha:771,x_min:65,x_max:657,o:"m 542 -285 l 542 -44 l 547 78 q 455 11 507 39 q 344 -17 403 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 461 672 417 692 q 551 611 506 651 l 554 611 l 565 675 l 657 675 l 657 -285 l 542 -285 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},r:{ha:482,x_min:114,x_max:486,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 z "},s:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 z "},t:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 z "},u:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 z "},v:{ha:649,x_min:17,x_max:632,o:"m 260 0 l 17 675 l 135 675 l 263 292 q 294 192 278 242 q 325 93 310 142 l 331 93 q 362 192 346 142 q 392 292 378 242 l 519 675 l 632 675 l 393 0 l 260 0 z "},w:{ha:999,x_min:33,x_max:965,o:"m 221 0 l 33 675 l 153 675 l 251 285 q 272 193 263 239 q 290 93 282 147 l 296 93 q 317 193 307 147 q 339 285 328 239 l 439 675 l 564 675 l 665 285 q 689 193 678 239 q 710 93 700 147 l 715 93 q 736 193 726 147 q 756 285 746 239 l 854 675 l 965 675 l 783 0 l 635 0 l 544 361 q 522 455 532 408 q 501 561 513 501 l 496 561 q 476 454 486 501 q 453 361 465 407 l 363 0 l 221 0 z "},x:{ha:619,x_min:19,x_max:600,o:"m 19 0 l 240 353 l 36 675 l 160 675 l 250 526 q 282 471 265 500 q 317 414 299 442 l 322 414 q 353 471 338 442 q 383 526 368 500 l 465 675 l 585 675 l 381 340 l 600 0 l 476 0 l 378 157 q 342 218 360 188 q 304 278 324 249 l 299 278 q 264 219 281 249 q 231 157 247 189 l 139 0 l 19 0 z "},y:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 z "},z:{ha:590,x_min:43,x_max:554,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 z "},\u00C0:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 381 981 l 154 1156 l 160 1168 l 300 1168 l 483 981 l 381 981 z "},\u00C1:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 269 981 l 453 1168 l 593 1168 l 599 1156 l 372 981 l 269 981 z "},\u00C2:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 132 981 l 322 1168 l 431 1168 l 621 981 l 524 981 l 379 1093 l 374 1093 l 229 981 l 132 981 z "},\u00C3:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 481 985 q 413 999 442 985 q 363 1034 385 1014 q 321 1069 342 1054 q 275 1083 300 1083 q 231 1060 249 1083 q 208 992 213 1036 l 131 997 q 172 1122 135 1076 q 272 1168 210 1168 q 340 1153 311 1168 q 390 1119 368 1139 q 432 1084 411 1099 q 478 1069 453 1069 q 544 1161 533 1069 l 622 1156 q 581 1030 618 1075 q 481 985 543 985 z "},\u00C4:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 233 993 q 185 1013 204 993 q 165 1061 165 1032 q 185 1110 165 1092 q 233 1129 204 1129 q 283 1110 264 1129 q 301 1061 301 1092 q 283 1013 301 1032 q 233 993 264 993 m 519 993 q 470 1013 489 993 q 451 1061 451 1032 q 470 1110 451 1092 q 519 1129 489 1129 q 568 1110 549 1129 q 588 1061 588 1092 q 568 1013 588 1032 q 519 993 549 993 z "},\u00C5:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 971 q 265 1004 307 971 q 222 1096 222 1038 q 265 1188 222 1154 q 376 1222 307 1222 q 488 1188 446 1222 q 531 1096 531 1154 q 488 1004 531 1038 q 376 971 446 971 m 376 1021 q 433 1040 411 1021 q 456 1096 456 1060 q 433 1153 456 1133 q 376 1172 411 1172 q 319 1153 342 1172 q 297 1096 297 1133 q 319 1040 297 1060 q 376 1021 342 1021 z "},\u0100:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 189 1021 l 189 1100 l 564 1100 l 564 1021 l 189 1021 z "},\u0102:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1034 279 981 q 174 1160 182 1088 l 243 1171 q 284 1088 251 1122 q 376 1054 317 1054 q 469 1088 436 1054 q 510 1171 501 1122 l 579 1160 q 522 1034 571 1088 q 376 981 474 981 z "},\u0226:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 992 q 320 1013 343 992 q 297 1067 297 1033 q 320 1119 297 1099 q 376 1140 343 1140 q 433 1119 410 1140 q 456 1067 456 1099 q 433 1013 456 1033 q 376 992 410 992 z "},\u01CD:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 322 983 l 132 1168 l 229 1168 l 374 1060 l 379 1060 l 524 1168 l 621 1168 l 431 983 l 322 983 z "},\u0200:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 228 982 l 42 1156 l 49 1168 l 160 1168 l 308 982 l 228 982 m 488 982 l 301 1156 l 308 1168 l 421 1168 l 568 982 l 488 982 z "},\u0104:{ha:756,x_min:4,x_max:811,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 686 -304 q 583 -272 626 -304 q 539 -176 539 -240 q 575 -72 539 -118 q 650 0 611 -25 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 l 313 911 l 443 911 l 751 0 q 667 -64 701 -22 q 633 -149 633 -106 q 656 -201 633 -185 q 708 -218 678 -218 q 779 -194 747 -218 l 811 -260 q 756 -291 789 -278 q 686 -304 722 -304 z "},\u1EA0:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 z "},\u1EA2:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 332 974 l 319 1026 q 375 1051 353 1036 q 397 1092 397 1065 q 282 1156 397 1151 l 294 1224 q 435 1191 385 1221 q 486 1104 486 1161 q 440 1014 486 1043 q 332 974 393 985 z "},\u1EA4:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 160 981 l 326 1140 l 426 1140 l 593 981 l 500 981 l 379 1071 l 374 1071 l 253 981 l 160 981 m 504 1089 l 614 1243 l 714 1243 l 721 1231 l 576 1089 l 504 1089 z "},\u1EA6:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 160 981 l 326 1140 l 426 1140 l 593 981 l 500 981 l 379 1071 l 374 1071 l 253 981 l 160 981 m 176 1089 l 32 1231 l 39 1243 l 139 1243 l 249 1089 l 176 1089 z "},\u1EA8:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 547 1075 l 535 1121 q 577 1140 560 1128 q 594 1174 594 1151 q 572 1213 594 1201 q 499 1228 550 1225 l 508 1286 q 675 1185 675 1279 q 638 1109 675 1135 q 547 1075 600 1083 m 160 983 l 326 1142 l 426 1142 l 593 983 l 500 983 l 379 1074 l 374 1074 l 253 983 l 160 983 z "},\u1EAA:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 160 981 l 326 1135 l 426 1135 l 593 981 l 500 981 l 379 1067 l 374 1067 l 253 981 l 160 981 m 472 1171 q 395 1188 425 1171 q 341 1223 365 1206 q 285 1240 317 1240 q 249 1224 261 1240 q 232 1175 238 1207 l 167 1182 q 198 1272 172 1235 q 281 1310 224 1310 q 359 1292 329 1310 q 413 1258 389 1275 q 468 1240 438 1240 q 503 1257 492 1240 q 521 1304 515 1274 l 586 1299 q 555 1208 581 1244 q 472 1171 529 1171 z "},\u1EAC:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 132 981 l 322 1168 l 431 1168 l 621 981 l 524 981 l 379 1093 l 374 1093 l 229 981 l 132 981 z "},\u1EAE:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1033 279 981 q 174 1158 182 1086 l 239 1169 q 281 1083 247 1118 q 376 1047 315 1047 q 472 1083 438 1047 q 514 1169 506 1118 l 579 1158 q 522 1033 571 1086 q 376 981 474 981 m 311 1153 l 421 1308 l 519 1308 l 526 1296 l 383 1153 l 311 1153 z "},\u1EB0:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1033 279 981 q 174 1158 182 1086 l 239 1169 q 281 1083 247 1118 q 376 1047 315 1047 q 472 1083 438 1047 q 514 1169 506 1118 l 579 1158 q 522 1033 571 1086 q 376 981 474 981 m 369 1153 l 226 1296 l 233 1308 l 332 1308 l 442 1153 l 369 1153 z "},\u1EB2:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1033 279 981 q 174 1158 182 1086 l 239 1169 q 281 1083 247 1118 q 376 1047 315 1047 q 472 1083 438 1047 q 514 1169 506 1118 l 579 1158 q 522 1033 571 1086 q 376 981 474 981 m 344 1119 l 331 1168 q 374 1185 356 1175 q 392 1218 392 1196 q 369 1258 392 1246 q 294 1272 346 1269 l 306 1331 q 431 1303 388 1328 q 474 1229 474 1278 q 434 1152 474 1176 q 344 1119 394 1128 z "},\u1EB4:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1026 279 981 q 175 1131 183 1072 l 242 1142 q 283 1076 249 1104 q 376 1047 317 1047 q 471 1076 438 1047 q 511 1142 504 1104 l 578 1131 q 522 1026 569 1072 q 376 981 474 981 m 468 1171 q 393 1188 422 1171 q 341 1223 364 1206 q 288 1240 318 1240 q 254 1224 265 1240 q 238 1175 243 1207 l 172 1182 q 202 1274 176 1238 q 285 1310 228 1310 q 360 1292 332 1310 q 412 1258 389 1275 q 465 1240 435 1240 q 499 1257 489 1240 q 515 1304 510 1274 l 581 1299 q 551 1207 576 1243 q 468 1171 525 1171 z "},\u1EB6:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1034 279 981 q 174 1160 182 1088 l 243 1171 q 284 1088 251 1122 q 376 1054 317 1054 q 469 1088 436 1054 q 510 1171 501 1122 l 579 1160 q 522 1034 571 1088 q 376 981 474 981 z "},\u01FA:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 971 q 263 1003 304 971 q 222 1090 222 1036 q 235 1144 222 1122 q 274 1189 247 1167 l 432 1318 l 544 1318 l 551 1306 l 399 1207 q 493 1174 456 1204 q 531 1090 531 1144 q 490 1003 531 1036 q 376 971 449 971 m 376 1021 q 433 1039 411 1021 q 456 1090 456 1057 q 433 1144 456 1126 q 376 1163 411 1163 q 319 1144 342 1163 q 297 1090 297 1126 q 319 1039 297 1057 q 376 1021 342 1021 z "},\u00C6:{ha:1142,x_min:11,x_max:1074,o:"m 403 522 l 318 358 l 557 358 l 557 819 l 551 819 q 403 522 478 671 m 11 0 l 489 911 l 1060 911 l 1060 814 l 674 814 l 674 528 l 996 528 l 996 429 l 674 429 l 674 99 l 1074 99 l 1074 0 l 557 0 l 557 265 l 271 265 l 133 0 l 11 0 z "},\u01FC:{ha:1142,x_min:11,x_max:1074,o:"m 403 522 l 318 358 l 557 358 l 557 819 l 551 819 q 403 522 478 671 m 11 0 l 489 911 l 1060 911 l 1060 814 l 674 814 l 674 528 l 996 528 l 996 429 l 674 429 l 674 99 l 1074 99 l 1074 0 l 557 0 l 557 265 l 271 265 l 133 0 l 11 0 m 674 981 l 857 1168 l 997 1168 l 1003 1156 l 776 981 l 674 981 z "},\u01E2:{ha:1142,x_min:11,x_max:1074,o:"m 403 522 l 318 358 l 557 358 l 557 819 l 551 819 q 403 522 478 671 m 11 0 l 489 911 l 1060 911 l 1060 814 l 674 814 l 674 528 l 996 528 l 996 429 l 674 429 l 674 99 l 1074 99 l 1074 0 l 557 0 l 557 265 l 271 265 l 133 0 l 11 0 m 593 1021 l 593 1100 l 968 1100 l 968 1021 l 593 1021 z "},"\u023A":{ha:754,x_min:4,x_max:751,o:"m 249 -71 l 196 -57 l 296 278 l 210 278 l 122 0 l 4 0 l 313 911 l 443 911 l 465 847 l 504 981 l 557 967 l 494 758 l 751 0 l 628 0 l 542 278 l 353 278 l 249 -71 m 282 510 l 239 371 l 324 371 l 415 683 q 378 817 397 749 l 372 817 q 329 662 351 738 q 282 510 307 586 m 469 510 q 458 549 464 529 q 444 588 451 569 l 381 371 l 513 371 l 469 510 z "},"\u0243":{ha:840,x_min:31,x_max:789,o:"m 153 0 l 153 233 l 31 233 l 31 315 l 153 322 l 153 911 l 422 911 q 650 860 563 911 q 738 692 738 808 q 698 573 738 625 q 578 500 658 521 l 578 494 q 733 423 678 478 q 789 272 789 368 q 744 120 789 181 q 622 30 700 60 q 443 0 544 0 l 153 0 m 268 532 l 403 532 q 571 569 518 532 q 624 683 624 607 q 569 788 624 757 q 408 819 514 819 l 268 819 l 268 532 m 268 92 l 426 92 q 610 136 543 92 q 676 278 676 181 q 611 406 676 367 q 426 446 546 446 l 268 446 l 268 322 l 479 322 l 479 233 l 268 233 l 268 92 z "},\u0181:{ha:1033,x_min:60,x_max:978,o:"m 490 524 l 594 524 q 761 565 710 524 q 813 679 813 607 q 753 794 813 760 q 575 829 693 829 l 492 829 l 490 829 l 490 524 m 375 0 l 375 818 q 215 738 265 797 q 164 599 164 678 q 190 494 164 535 q 271 424 217 453 l 221 344 q 103 439 147 379 q 60 596 60 499 q 110 767 60 693 q 265 885 160 842 q 539 928 371 928 q 829 872 733 928 q 925 693 925 817 q 891 566 925 621 q 792 490 857 511 l 792 485 q 928 416 878 469 q 978 271 978 363 q 934 120 978 181 q 813 30 890 60 q 635 0 736 0 l 375 0 m 490 92 l 618 92 q 800 135 735 92 q 865 271 865 179 q 801 395 865 356 q 618 435 738 435 l 490 435 l 490 92 z "},\u1E02:{ha:817,x_min:125,x_max:761,o:"m 125 0 l 125 911 l 396 911 q 559 889 489 911 q 669 818 629 867 q 708 689 708 769 q 674 565 708 618 q 575 490 640 511 l 575 485 q 711 416 661 469 q 761 271 761 363 q 717 120 761 181 q 596 30 674 60 q 415 0 518 0 l 125 0 m 240 524 l 375 524 q 543 564 492 524 q 594 674 594 604 q 541 786 594 753 q 381 819 488 819 l 240 819 l 240 524 m 240 92 l 399 92 q 582 135 517 92 q 647 271 647 179 q 583 395 647 356 q 399 435 518 435 l 240 435 l 240 92 m 399 992 q 342 1013 365 992 q 319 1067 319 1033 q 342 1119 319 1099 q 399 1140 365 1140 q 455 1119 432 1140 q 478 1067 478 1099 q 455 1013 478 1033 q 399 992 432 992 z "},\u1E06:{ha:817,x_min:125,x_max:761,o:"m 125 0 l 125 911 l 396 911 q 559 889 489 911 q 669 818 629 867 q 708 689 708 769 q 674 565 708 618 q 575 490 640 511 l 575 485 q 711 416 661 469 q 761 271 761 363 q 717 120 761 181 q 596 30 674 60 q 415 0 518 0 l 125 0 m 240 524 l 375 524 q 543 564 492 524 q 594 674 594 604 q 541 786 594 753 q 381 819 488 819 l 240 819 l 240 524 m 240 92 l 399 92 q 582 135 517 92 q 647 271 647 179 q 583 395 647 356 q 399 435 518 435 l 240 435 l 240 92 z "},\u00C7:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 m 357 -314 l 346 -258 q 465 -235 433 -251 q 497 -189 497 -219 q 474 -146 497 -161 q 390 -122 450 -131 l 451 4 l 525 4 l 485 -89 q 560 -122 533 -100 q 586 -187 586 -144 q 527 -278 586 -247 q 357 -314 468 -308 z "},\u0106:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 m 353 981 l 536 1168 l 676 1168 l 682 1156 l 456 981 l 353 981 z "},\u0108:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 m 215 981 l 406 1168 l 514 1168 l 704 981 l 607 981 l 463 1093 l 457 1093 l 313 981 l 215 981 z "},\u010A:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 m 460 992 q 403 1013 426 992 q 381 1067 381 1033 q 403 1119 381 1099 q 460 1140 426 1140 q 516 1119 493 1140 q 539 1067 539 1099 q 516 1013 539 1033 q 460 992 493 992 z "},\u010C:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 m 406 983 l 215 1168 l 313 1168 l 457 1060 l 463 1060 l 607 1168 l 704 1168 l 514 983 l 406 983 z "},"\u023B":{ha:793,x_min:72,x_max:747,o:"m 300 -71 l 244 -57 l 274 35 q 127 197 182 89 q 72 456 72 304 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 554 919 517 928 l 574 981 l 629 967 l 608 901 q 674 864 644 886 q 726 815 704 842 l 664 744 q 578 806 626 785 l 358 113 q 479 85 411 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 q 396 -10 432 -17 q 325 10 360 -3 l 300 -71 m 192 458 q 222 272 192 353 q 308 144 253 192 l 524 822 q 478 826 501 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 z "},\u1E0A:{ha:854,x_min:125,x_max:783,o:"m 125 0 l 125 911 l 353 911 q 674 794 564 911 q 783 460 783 676 q 674 121 783 242 q 358 0 565 0 l 125 0 m 240 94 l 344 94 q 584 191 504 94 q 664 460 664 288 q 584 724 664 632 q 344 817 504 817 l 240 817 l 240 94 m 432 992 q 376 1013 399 992 q 353 1067 353 1033 q 376 1119 353 1099 q 432 1140 399 1140 q 488 1119 465 1140 q 511 1067 511 1099 q 488 1013 511 1033 q 432 992 465 992 z "},\u010E:{ha:854,x_min:125,x_max:783,o:"m 125 0 l 125 911 l 353 911 q 674 794 564 911 q 783 460 783 676 q 674 121 783 242 q 358 0 565 0 l 125 0 m 240 94 l 344 94 q 584 191 504 94 q 664 460 664 288 q 584 724 664 632 q 344 817 504 817 l 240 817 l 240 94 m 378 983 l 188 1168 l 285 1168 l 429 1060 l 435 1060 l 579 1168 l 676 1168 l 486 983 l 378 983 z "},\u1E0C:{ha:854,x_min:125,x_max:783,o:"m 125 0 l 125 911 l 353 911 q 674 794 564 911 q 783 460 783 676 q 674 121 783 242 q 358 0 565 0 l 125 0 m 240 94 l 344 94 q 584 191 504 94 q 664 460 664 288 q 584 724 664 632 q 344 817 504 817 l 240 817 l 240 94 z "},\u1E0E:{ha:854,x_min:125,x_max:783,o:"m 125 0 l 125 911 l 353 911 q 674 794 564 911 q 783 460 783 676 q 674 121 783 242 q 358 0 565 0 l 125 0 m 240 94 l 344 94 q 584 191 504 94 q 664 460 664 288 q 584 724 664 632 q 344 817 504 817 l 240 817 l 240 94 z "},\u1E10:{ha:854,x_min:125,x_max:783,o:"m 125 0 l 125 911 l 353 911 q 674 794 564 911 q 783 460 783 676 q 674 121 783 242 q 358 0 565 0 l 125 0 m 240 94 l 344 94 q 584 191 504 94 q 664 460 664 288 q 584 724 664 632 q 344 817 504 817 l 240 817 l 240 94 m 256 -314 l 244 -258 q 364 -235 332 -251 q 396 -189 396 -219 q 372 -146 396 -161 q 289 -122 349 -131 l 350 4 l 424 4 l 383 -89 q 458 -122 432 -100 q 485 -187 485 -144 q 426 -278 485 -247 q 256 -314 367 -308 z "},\u0110:{ha:882,x_min:38,x_max:817,o:"m 158 0 l 158 435 l 38 435 l 38 518 l 158 525 l 158 911 l 386 911 q 707 794 597 911 q 817 460 817 676 q 708 121 817 242 q 392 0 599 0 l 158 0 m 274 94 l 378 94 q 617 191 538 94 q 697 460 697 288 q 617 724 697 632 q 378 817 538 817 l 274 817 l 274 525 l 481 525 l 481 435 l 274 435 l 274 94 z "},\u018A:{ha:1082,x_min:60,x_max:1001,o:"m 490 94 l 572 94 q 803 193 724 94 q 882 469 882 292 q 800 733 882 640 q 536 826 718 826 l 492 826 l 490 826 l 490 94 m 375 0 l 375 817 q 215 735 265 794 q 164 599 164 676 q 190 494 164 535 q 271 424 217 453 l 221 344 q 103 439 147 379 q 60 596 60 499 q 108 767 60 693 q 262 885 157 842 q 533 928 367 928 q 888 808 774 928 q 1001 469 1001 689 q 891 123 1001 246 q 575 0 781 0 l 375 0 z "},\u00C8:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 407 981 l 181 1156 l 186 1168 l 326 1168 l 510 981 l 407 981 z "},\u00C9:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 296 981 l 479 1168 l 619 1168 l 625 1156 l 399 981 l 296 981 z "},\u00CA:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 158 981 l 349 1168 l 457 1168 l 647 981 l 550 981 l 406 1093 l 400 1093 l 256 981 l 158 981 z "},\u1EBC:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 507 985 q 440 999 468 985 q 390 1034 411 1014 q 347 1069 368 1054 q 301 1083 326 1083 q 257 1060 275 1083 q 235 992 239 1036 l 157 997 q 199 1122 161 1076 q 299 1168 236 1168 q 366 1153 338 1168 q 416 1119 394 1139 q 458 1084 438 1099 q 504 1069 479 1069 q 571 1161 560 1069 l 649 1156 q 607 1030 644 1075 q 507 985 569 985 z "},\u00CB:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 260 993 q 211 1013 231 993 q 192 1061 192 1032 q 211 1110 192 1092 q 260 1129 231 1129 q 309 1110 290 1129 q 328 1061 328 1092 q 309 1013 328 1032 q 260 993 290 993 m 546 993 q 497 1013 515 993 q 478 1061 478 1032 q 497 1110 478 1092 q 546 1129 515 1129 q 594 1110 575 1129 q 614 1061 614 1092 q 594 1013 614 1032 q 546 993 575 993 z "},\u0112:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 215 1021 l 215 1100 l 590 1100 l 590 1021 l 215 1021 z "},\u0114:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 403 981 q 257 1034 306 981 q 200 1160 208 1088 l 269 1171 q 310 1088 278 1122 q 403 1054 343 1054 q 495 1088 463 1054 q 536 1171 528 1122 l 606 1160 q 549 1034 597 1088 q 403 981 500 981 z "},\u0116:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 403 992 q 347 1013 369 992 q 324 1067 324 1033 q 347 1119 324 1099 q 403 1140 369 1140 q 459 1119 436 1140 q 482 1067 482 1099 q 459 1013 482 1033 q 403 992 436 992 z "},\u011A:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 349 983 l 158 1168 l 256 1168 l 400 1060 l 406 1060 l 550 1168 l 647 1168 l 457 983 l 349 983 z "},\u0204:{ha:732,x_min:68,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 254 982 l 68 1156 l 75 1168 l 186 1168 l 335 982 l 254 982 m 514 982 l 328 1156 l 335 1168 l 447 1168 l 594 982 l 514 982 z "},\u0118:{ha:732,x_min:125,x_max:697,o:"m 572 -304 q 469 -272 513 -304 q 426 -176 426 -240 q 460 -72 426 -118 q 538 0 494 -26 l 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 656 0 q 597 -22 628 0 q 543 -78 565 -44 q 521 -149 521 -112 q 543 -201 521 -185 q 594 -218 565 -218 q 665 -194 633 -218 l 697 -260 q 642 -291 675 -278 q 572 -304 608 -304 z "},\u1EB8:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 z "},\u1EBA:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 358 974 l 346 1026 q 401 1051 379 1036 q 424 1092 424 1065 q 308 1156 424 1151 l 321 1224 q 462 1191 411 1221 q 513 1104 513 1161 q 466 1014 513 1043 q 358 974 419 985 z "},\u1EBE:{ha:732,x_min:125,x_max:747,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 186 981 l 353 1140 l 453 1140 l 619 981 l 526 981 l 406 1071 l 400 1071 l 279 981 l 186 981 m 531 1089 l 640 1243 l 740 1243 l 747 1231 l 603 1089 l 531 1089 z "},\u1EC0:{ha:732,x_min:58,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 186 981 l 353 1140 l 453 1140 l 619 981 l 526 981 l 406 1071 l 400 1071 l 279 981 l 186 981 m 203 1089 l 58 1231 l 65 1243 l 165 1243 l 275 1089 l 203 1089 z "},\u1EC2:{ha:732,x_min:125,x_max:701,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 574 1075 l 561 1121 q 603 1140 586 1128 q 621 1174 621 1151 q 599 1213 621 1201 q 525 1228 576 1225 l 535 1286 q 701 1185 701 1279 q 664 1109 701 1135 q 574 1075 626 1083 m 186 983 l 353 1142 l 453 1142 l 619 983 l 526 983 l 406 1074 l 400 1074 l 279 983 l 186 983 z "},\u1EC4:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 186 981 l 353 1135 l 453 1135 l 619 981 l 526 981 l 406 1067 l 400 1067 l 279 981 l 186 981 m 499 1171 q 422 1188 451 1171 q 367 1223 392 1206 q 311 1240 343 1240 q 276 1224 288 1240 q 258 1175 264 1207 l 193 1182 q 224 1272 199 1235 q 307 1310 250 1310 q 385 1292 356 1310 q 440 1258 415 1275 q 494 1240 464 1240 q 530 1257 518 1240 q 547 1304 542 1274 l 613 1299 q 581 1208 607 1244 q 499 1171 556 1171 z "},\u1EC6:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 158 981 l 349 1168 l 457 1168 l 647 981 l 550 981 l 406 1093 l 400 1093 l 256 981 l 158 981 z "},\u1E16:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 215 1021 l 215 1100 l 590 1100 l 590 1021 l 215 1021 m 318 1160 l 447 1318 l 557 1318 l 564 1306 l 400 1160 l 318 1160 z "},\u018E:{ha:732,x_min:68,x_max:607,o:"m 68 0 l 68 99 l 492 99 l 492 429 l 146 429 l 146 528 l 492 528 l 492 814 l 82 814 l 82 911 l 607 911 l 607 0 l 68 0 z "},\u0190:{ha:754,x_min:58,x_max:711,o:"m 404 -17 q 227 15 306 -17 q 103 108 149 47 q 58 258 58 169 q 114 410 58 353 q 247 483 169 467 l 247 489 q 145 568 183 515 q 107 697 107 621 q 147 824 107 772 q 256 901 188 875 q 407 928 324 928 q 553 897 485 928 q 669 819 622 867 l 614 746 q 523 805 575 783 q 410 826 471 826 q 274 790 328 826 q 221 681 221 753 q 273 564 221 604 q 439 524 325 524 l 521 524 l 521 435 l 418 435 q 237 394 301 435 q 172 264 172 353 q 205 167 172 207 q 292 106 238 126 q 413 85 346 85 q 542 106 486 85 q 651 179 597 128 l 711 110 q 578 13 649 43 q 404 -17 507 -17 z "},\u1E1E:{ha:686,x_min:125,x_max:650,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 506 l 588 506 l 588 408 l 240 408 l 240 0 l 125 0 m 397 992 q 341 1013 364 992 q 318 1067 318 1033 q 341 1119 318 1099 q 397 1140 364 1140 q 453 1119 431 1140 q 476 1067 476 1099 q 453 1013 476 1033 q 397 992 431 992 z "},\u01F4:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 381 981 l 564 1168 l 704 1168 l 710 1156 l 483 981 l 381 981 z "},\u011C:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 243 981 l 433 1168 l 542 1168 l 732 981 l 635 981 l 490 1093 l 485 1093 l 340 981 l 243 981 z "},\u1E20:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 300 1021 l 300 1100 l 675 1100 l 675 1021 l 300 1021 z "},\u011E:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 488 981 q 342 1034 390 981 q 285 1160 293 1088 l 354 1171 q 395 1088 363 1122 q 488 1054 428 1054 q 580 1088 547 1054 q 621 1171 613 1122 l 690 1160 q 633 1034 682 1088 q 488 981 585 981 z "},\u0120:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 488 992 q 431 1013 454 992 q 408 1067 408 1033 q 431 1119 408 1099 q 488 1140 454 1140 q 544 1119 521 1140 q 567 1067 567 1099 q 544 1013 567 1033 q 488 992 521 992 z "},\u01E6:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 433 983 l 243 1168 l 340 1168 l 485 1060 l 490 1060 l 635 1168 l 732 1168 l 542 983 l 433 983 z "},\u0122:{ha:857,x_min:72,x_max:764,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 m 367 -314 l 356 -258 q 475 -235 443 -251 q 507 -192 507 -219 q 482 -151 507 -164 q 408 -133 457 -137 l 433 -81 q 560 -115 524 -90 q 596 -187 596 -140 q 537 -278 596 -247 q 367 -314 478 -308 z "},\u01E4:{ha:917,x_min:72,x_max:882,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 649 893 585 928 q 753 815 714 858 l 689 743 q 608 803 654 779 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 186 192 286 q 494 86 349 86 q 588 99 543 86 q 658 139 632 113 l 658 267 l 465 267 l 465 350 l 658 357 l 658 472 l 765 472 l 765 357 l 882 357 l 882 267 l 765 267 l 765 89 q 648 13 721 43 q 483 -17 575 -17 z "},\u0193:{ha:857,x_min:72,x_max:839,o:"m 483 -17 q 271 40 364 -17 q 125 201 178 96 q 72 456 72 307 q 126 708 72 603 q 275 871 181 814 q 490 928 369 928 q 621 904 558 928 q 603 947 607 929 q 599 982 599 965 q 641 1076 599 1039 q 747 1114 683 1114 q 799 1108 776 1114 q 839 1092 821 1103 l 815 1011 q 765 1024 793 1024 q 713 1003 732 1024 q 694 950 694 982 q 710 897 694 918 q 753 839 726 875 l 689 763 q 608 808 654 789 q 493 826 563 826 q 333 781 401 826 q 228 654 265 736 q 192 458 192 572 q 270 185 192 286 q 494 85 349 85 q 588 99 543 85 q 658 139 632 114 l 658 376 l 465 376 l 465 472 l 764 472 l 764 89 q 648 13 721 43 q 483 -17 575 -17 z "},\u0124:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 m 207 981 l 397 1168 l 506 1168 l 696 981 l 599 981 l 454 1093 l 449 1093 l 304 981 l 207 981 z "},\u1E26:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 m 308 993 q 260 1013 279 993 q 240 1061 240 1032 q 260 1110 240 1092 q 308 1129 279 1129 q 358 1110 339 1129 q 376 1061 376 1092 q 358 1013 376 1032 q 308 993 339 993 m 594 993 q 545 1013 564 993 q 526 1061 526 1032 q 545 1110 526 1092 q 594 1129 564 1129 q 643 1110 624 1129 q 663 1061 663 1092 q 643 1013 663 1032 q 594 993 624 993 z "},\u1E22:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 m 451 992 q 395 1013 418 992 q 372 1067 372 1033 q 395 1119 372 1099 q 451 1140 418 1140 q 508 1119 485 1140 q 531 1067 531 1099 q 508 1013 531 1033 q 451 992 485 992 z "},\u021E:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 m 397 983 l 207 1168 l 304 1168 l 449 1060 l 454 1060 l 599 1168 l 696 1168 l 506 983 l 397 983 z "},\u1E24:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 z "},\u1E28:{ha:906,x_min:51,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 m 63 -314 l 51 -258 q 171 -235 139 -251 q 203 -189 203 -219 q 179 -146 203 -161 q 96 -122 156 -131 l 157 4 l 231 4 l 190 -89 q 265 -122 239 -100 q 292 -187 292 -144 q 233 -278 292 -247 q 63 -314 174 -308 z "},\u1E2A:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 z "},\u0126:{ha:961,x_min:31,x_max:926,o:"m 153 0 l 153 672 l 31 672 l 31 754 l 153 763 l 153 911 l 268 911 l 268 763 l 692 763 l 692 911 l 808 911 l 808 763 l 926 763 l 926 672 l 808 672 l 808 0 l 692 0 l 692 429 l 268 429 l 268 0 l 153 0 m 268 529 l 692 529 l 692 672 l 268 672 l 268 529 z "},\u00CC:{ha:365,x_min:-39,x_max:290,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 188 981 l -39 1156 l -33 1168 l 107 1168 l 290 981 l 188 981 z "},\u00CD:{ha:365,x_min:76,x_max:406,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 76 981 l 260 1168 l 400 1168 l 406 1156 l 179 981 l 76 981 z "},\u00CE:{ha:365,x_min:-61,x_max:428,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m -61 981 l 129 1168 l 238 1168 l 428 981 l 331 981 l 186 1093 l 181 1093 l 36 981 l -61 981 z "},\u0128:{ha:365,x_min:-62,x_max:429,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 288 985 q 220 999 249 985 q 170 1034 192 1014 q 128 1069 149 1054 q 82 1083 107 1083 q 38 1060 56 1083 q 15 992 19 1036 l -62 997 q -21 1122 -58 1076 q 79 1168 17 1168 q 147 1153 118 1168 q 197 1119 175 1139 q 239 1084 218 1099 q 285 1069 260 1069 q 351 1161 340 1069 l 429 1156 q 388 1030 425 1075 q 288 985 350 985 z "},\u00CF:{ha:365,x_min:-28,x_max:394,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 40 993 q -8 1013 11 993 q -28 1061 -28 1032 q -8 1110 -28 1092 q 40 1129 11 1129 q 90 1110 71 1129 q 108 1061 108 1092 q 90 1013 108 1032 q 40 993 71 993 m 326 993 q 277 1013 296 993 q 258 1061 258 1032 q 277 1110 258 1092 q 326 1129 296 1129 q 375 1110 356 1129 q 394 1061 394 1092 q 375 1013 394 1032 q 326 993 356 993 z "},\u012A:{ha:365,x_min:-4,x_max:371,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m -4 1021 l -4 1100 l 371 1100 l 371 1021 l -4 1021 z "},\u012C:{ha:365,x_min:-19,x_max:386,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 183 981 q 38 1034 86 981 q -19 1160 -11 1088 l 50 1171 q 91 1088 58 1122 q 183 1054 124 1054 q 276 1088 243 1054 q 317 1171 308 1122 l 386 1160 q 329 1034 378 1088 q 183 981 281 981 z "},\u0130:{ha:365,x_min:104,x_max:263,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 183 992 q 127 1013 150 992 q 104 1067 104 1033 q 127 1119 104 1099 q 183 1140 150 1140 q 240 1119 217 1140 q 263 1067 263 1099 q 240 1013 263 1033 q 183 992 217 992 z "},\u01CF:{ha:365,x_min:-61,x_max:428,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 129 983 l -61 1168 l 36 1168 l 181 1060 l 186 1060 l 331 1168 l 428 1168 l 238 983 l 129 983 z "},\u0208:{ha:365,x_min:-151,x_max:375,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 35 982 l -151 1156 l -144 1168 l -33 1168 l 115 982 l 35 982 m 294 982 l 108 1156 l 115 1168 l 228 1168 l 375 982 l 294 982 z "},\u012E:{ha:365,x_min:46,x_max:318,o:"m 193 -304 q 90 -272 133 -304 q 46 -176 46 -240 q 78 -76 46 -121 q 149 0 111 -31 l 125 0 l 125 911 l 240 911 l 240 0 q 169 -70 197 -32 q 142 -149 142 -108 q 163 -201 142 -185 q 215 -218 185 -218 q 286 -194 254 -218 l 318 -260 q 263 -291 296 -278 q 193 -304 229 -304 z "},\u1EC8:{ha:365,x_min:89,x_max:293,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 139 974 l 126 1026 q 182 1051 160 1036 q 204 1092 204 1065 q 89 1156 204 1151 l 101 1224 q 242 1191 192 1221 q 293 1104 293 1161 q 247 1014 293 1043 q 139 974 200 985 z "},\u1ECA:{ha:365,x_min:107,x_max:260,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 z "},\u0197:{ha:421,x_min:31,x_max:388,o:"m 153 0 l 153 435 l 31 435 l 31 518 l 153 525 l 153 911 l 268 911 l 268 525 l 388 525 l 388 435 l 268 435 l 268 0 l 153 0 z "},\u0132:{ha:731,x_min:125,x_max:606,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 419 -229 q 363 -224 389 -229 q 319 -212 338 -218 l 342 -121 q 372 -129 356 -125 q 406 -133 388 -133 q 474 -97 457 -133 q 490 0 490 -61 l 490 911 l 606 911 l 606 -4 q 563 -168 606 -107 q 419 -229 519 -229 z "},\u0134:{ha:667,x_min:46,x_max:728,o:"m 288 -17 q 46 131 121 -17 l 124 182 q 281 85 181 85 q 392 131 356 85 q 429 282 429 176 l 429 911 l 546 911 l 546 271 q 519 126 546 192 q 436 22 493 61 q 288 -17 379 -17 m 239 981 l 429 1168 l 538 1168 l 728 981 l 631 981 l 486 1093 l 481 1093 l 336 981 l 239 981 z "},"\u0248":{ha:693,x_min:46,x_max:661,o:"m 288 -17 q 46 131 121 -17 l 124 182 q 281 85 181 85 q 392 131 356 85 q 429 282 429 176 l 429 456 l 239 456 l 239 539 l 371 546 l 429 546 l 429 911 l 546 911 l 546 546 l 661 546 l 661 456 l 546 456 l 546 271 q 519 126 546 192 q 436 22 493 61 q 288 -17 379 -17 z "},\u0136:{ha:804,x_min:125,x_max:799,o:"m 125 0 l 125 911 l 240 911 l 240 454 l 244 454 l 624 911 l 754 911 l 469 564 l 799 0 l 669 0 l 397 474 l 240 289 l 240 0 l 125 0 m 335 -314 l 324 -258 q 443 -235 411 -251 q 475 -192 475 -219 q 450 -151 475 -164 q 376 -133 425 -137 l 401 -81 q 528 -115 492 -90 q 564 -187 564 -140 q 505 -278 564 -247 q 335 -314 446 -308 z "},\u1E32:{ha:804,x_min:125,x_max:799,o:"m 125 0 l 125 911 l 240 911 l 240 454 l 244 454 l 624 911 l 754 911 l 469 564 l 799 0 l 669 0 l 397 474 l 240 289 l 240 0 l 125 0 z "},\u1E34:{ha:804,x_min:125,x_max:799,o:"m 125 0 l 125 911 l 240 911 l 240 454 l 244 454 l 624 911 l 754 911 l 469 564 l 799 0 l 669 0 l 397 474 l 240 289 l 240 0 l 125 0 z "},\u0139:{ha:675,x_min:78,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 m 78 981 l 261 1168 l 401 1168 l 407 1156 l 181 981 l 78 981 z "},\u013D:{ha:675,x_min:125,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 m 464 714 l 458 1008 l 540 1008 l 539 929 l 519 714 l 464 714 z "},\u013B:{ha:675,x_min:125,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 m 281 -314 l 269 -258 q 389 -235 357 -251 q 421 -192 421 -219 q 396 -151 421 -164 q 322 -133 371 -137 l 347 -81 q 474 -115 438 -90 q 510 -187 510 -140 q 451 -278 510 -247 q 281 -314 392 -308 z "},\u1E36:{ha:675,x_min:125,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 z "},\u1E38:{ha:675,x_min:-3,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 m -3 1021 l -3 1100 l 372 1100 l 372 1021 l -3 1021 z "},\u1E3A:{ha:675,x_min:125,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 z "},\u0141:{ha:694,x_min:-10,x_max:663,o:"m 149 0 l 149 340 l 35 289 l -10 376 l 149 444 l 149 911 l 264 911 l 264 496 l 521 610 l 564 522 l 264 393 l 264 99 l 663 99 l 663 0 l 149 0 z "},"\u023D":{ha:699,x_min:31,x_max:667,o:"m 153 0 l 153 449 l 31 449 l 31 532 l 153 538 l 153 911 l 268 911 l 268 538 l 522 538 l 522 449 l 268 449 l 268 99 l 667 99 l 667 0 l 153 0 z "},"\u2C60":{ha:699,x_min:31,x_max:667,o:"m 153 0 l 153 374 l 31 374 l 31 439 l 153 446 l 153 540 l 31 540 l 31 606 l 153 613 l 153 911 l 268 911 l 268 613 l 522 613 l 522 540 l 268 540 l 268 446 l 522 446 l 522 374 l 268 374 l 268 99 l 667 99 l 667 0 l 153 0 z "},"\u2C62":{ha:772,x_min:18,x_max:736,o:"m 222 0 l 222 500 q 192 508 207 506 q 160 511 176 511 q 113 482 129 511 q 94 404 97 453 l 18 417 q 53 543 22 492 q 151 594 83 594 q 188 592 171 594 q 222 585 206 589 l 222 911 l 338 911 l 338 535 q 413 495 376 513 q 492 478 450 478 q 538 508 522 478 q 556 585 553 539 l 632 572 q 598 447 628 499 q 500 394 568 394 q 413 409 453 394 q 338 442 374 424 l 338 99 l 736 99 l 736 0 l 222 0 z "},"\uA7AD":{ha:743,x_min:-3,x_max:707,o:"m 164 464 l 193 464 l 193 472 q 174 537 193 513 q 124 561 156 561 q 89 548 100 561 q 78 517 78 535 q 99 479 78 494 q 164 464 119 464 m 193 0 l 193 374 l 178 374 q 41 413 85 374 q -3 513 -3 453 q 30 594 -3 563 q 113 626 63 626 q 158 619 138 626 q 193 597 178 611 l 193 911 l 308 911 l 308 464 l 532 464 l 532 374 l 308 374 l 308 99 l 707 99 l 707 0 l 193 0 z "},\u013F:{ha:675,x_min:125,x_max:639,o:"m 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 0 l 125 0 m 524 365 q 465 390 489 365 q 440 451 440 414 q 465 516 440 492 q 524 540 489 540 q 581 516 557 540 q 606 451 606 492 q 581 390 606 414 q 524 365 557 365 z "},\u1E3E:{ha:1010,x_min:125,x_max:885,o:"m 125 0 l 125 911 l 271 911 l 443 424 q 474 331 458 376 q 504 235 489 286 l 510 235 q 538 331 525 286 q 568 424 551 376 l 740 911 l 885 911 l 885 0 l 776 0 l 776 501 q 779 592 776 542 q 786 691 782 642 q 793 781 790 740 l 788 781 l 717 561 l 546 90 l 461 90 l 290 561 l 219 781 l 214 781 q 222 691 218 740 q 228 592 226 642 q 231 501 231 542 l 231 0 l 125 0 m 400 981 l 583 1168 l 724 1168 l 729 1156 l 503 981 l 400 981 z "},\u1E40:{ha:1010,x_min:125,x_max:885,o:"m 125 0 l 125 911 l 271 911 l 443 424 q 474 331 458 376 q 504 235 489 286 l 510 235 q 538 331 525 286 q 568 424 551 376 l 740 911 l 885 911 l 885 0 l 776 0 l 776 501 q 779 592 776 542 q 786 691 782 642 q 793 781 790 740 l 788 781 l 717 561 l 546 90 l 461 90 l 290 561 l 219 781 l 214 781 q 222 691 218 740 q 228 592 226 642 q 231 501 231 542 l 231 0 l 125 0 m 507 992 q 451 1013 474 992 q 428 1067 428 1033 q 451 1119 428 1099 q 507 1140 474 1140 q 563 1119 540 1140 q 586 1067 586 1099 q 563 1013 586 1033 q 507 992 540 992 z "},\u1E42:{ha:1010,x_min:125,x_max:885,o:"m 125 0 l 125 911 l 271 911 l 443 424 q 474 331 458 376 q 504 235 489 286 l 510 235 q 538 331 525 286 q 568 424 551 376 l 740 911 l 885 911 l 885 0 l 776 0 l 776 501 q 779 592 776 542 q 786 691 782 642 q 793 781 790 740 l 788 781 l 717 561 l 546 90 l 461 90 l 290 561 l 219 781 l 214 781 q 222 691 218 740 q 228 592 226 642 q 231 501 231 542 l 231 0 l 125 0 z "},\u01F8:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 m 468 981 l 242 1156 l 247 1168 l 388 1168 l 571 981 l 468 981 z "},\u0143:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 m 357 981 l 540 1168 l 681 1168 l 686 1156 l 460 981 l 357 981 z "},\u0147:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 m 410 983 l 219 1168 l 317 1168 l 461 1060 l 467 1060 l 611 1168 l 708 1168 l 518 983 l 410 983 z "},\u00D1:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 m 568 985 q 501 999 529 985 q 451 1034 472 1014 q 408 1069 429 1054 q 363 1083 388 1083 q 318 1060 336 1083 q 296 992 300 1036 l 218 997 q 260 1122 222 1076 q 360 1168 297 1168 q 427 1153 399 1168 q 477 1119 456 1139 q 519 1084 499 1099 q 565 1069 540 1069 q 632 1161 621 1069 l 710 1156 q 668 1030 706 1075 q 568 985 631 985 z "},\u1E44:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 m 464 992 q 408 1013 431 992 q 385 1067 385 1033 q 408 1119 385 1099 q 464 1140 431 1140 q 520 1119 497 1140 q 543 1067 543 1099 q 520 1013 543 1033 q 464 992 497 992 z "},\u0145:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 m 339 -314 l 328 -258 q 447 -235 415 -251 q 479 -192 479 -219 q 454 -151 479 -164 q 381 -133 429 -137 l 406 -81 q 532 -115 496 -90 q 568 -187 568 -140 q 509 -278 568 -247 q 339 -314 450 -308 z "},\u1E46:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 z "},\u1E48:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 z "},\u014A:{ha:882,x_min:125,x_max:810,o:"m 564 -17 q 506 -11 538 -17 q 456 4 475 -6 l 483 107 q 553 93 511 93 q 622 126 590 93 q 672 240 653 158 q 690 465 690 321 q 662 681 690 603 q 583 793 633 760 q 465 826 533 826 q 388 809 429 826 q 307 761 346 792 q 240 690 268 731 l 240 0 l 125 0 l 125 911 l 238 911 l 238 799 q 354 891 286 854 q 494 928 422 928 q 656 883 585 928 q 769 738 728 839 q 810 465 810 636 q 779 185 810 290 q 694 31 749 79 q 564 -17 639 -17 z "},"\u0220":{ha:911,x_min:125,x_max:790,o:"m 675 -212 l 675 510 q 651 699 675 631 q 580 797 626 768 q 465 826 533 826 q 388 809 429 826 q 307 761 346 792 q 240 690 268 731 l 240 0 l 125 0 l 125 911 l 238 911 l 238 799 q 354 891 286 854 q 494 928 422 928 q 713 834 635 928 q 790 519 790 740 l 790 -212 l 675 -212 z "},\u00D2:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 465 981 l 239 1156 l 244 1168 l 385 1168 l 568 981 l 465 981 z "},\u00D3:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 354 981 l 538 1168 l 678 1168 l 683 1156 l 457 981 l 354 981 z "},\u00D4:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 217 981 l 407 1168 l 515 1168 l 706 981 l 608 981 l 464 1093 l 458 1093 l 314 981 l 217 981 z "},\u00D5:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 565 985 q 498 999 526 985 q 448 1034 469 1014 q 406 1069 426 1054 q 360 1083 385 1083 q 315 1060 333 1083 q 293 992 297 1036 l 215 997 q 257 1122 219 1076 q 357 1168 294 1168 q 424 1153 396 1168 q 474 1119 453 1139 q 517 1084 496 1099 q 563 1069 538 1069 q 629 1161 618 1069 l 707 1156 q 665 1030 703 1075 q 565 985 628 985 z "},\u00D6:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 318 993 q 269 1013 289 993 q 250 1061 250 1032 q 269 1110 250 1092 q 318 1129 289 1129 q 367 1110 349 1129 q 386 1061 386 1092 q 367 1013 386 1032 q 318 993 349 993 m 604 993 q 555 1013 574 993 q 536 1061 536 1032 q 555 1110 536 1092 q 604 1129 574 1129 q 653 1110 633 1129 q 672 1061 672 1092 q 653 1013 672 1032 q 604 993 633 993 z "},\u014C:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 274 1021 l 274 1100 l 649 1100 l 649 1021 l 274 1021 z "},\u014E:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 461 981 q 315 1034 364 981 q 258 1160 267 1088 l 328 1171 q 369 1088 336 1122 q 461 1054 401 1054 q 553 1088 521 1054 q 594 1171 586 1122 l 664 1160 q 607 1034 656 1088 q 461 981 558 981 z "},\u0150:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 269 981 l 417 1168 l 529 1168 l 536 1156 l 350 981 l 269 981 m 529 981 l 678 1168 l 789 1168 l 796 1156 l 610 981 l 529 981 z "},\u01D1:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 407 983 l 217 1168 l 314 1168 l 458 1060 l 464 1060 l 608 1168 l 706 1168 l 515 983 l 407 983 z "},\u020C:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 313 982 l 126 1156 l 133 1168 l 244 1168 l 393 982 l 313 982 m 572 982 l 386 1156 l 393 1168 l 506 1168 l 653 982 l 572 982 z "},\u01EA:{ha:922,x_min:72,x_max:851,o:"m 481 -304 q 378 -272 421 -304 q 335 -176 335 -240 q 358 -93 335 -137 q 428 -15 381 -49 q 242 53 322 -7 q 117 217 163 113 q 72 460 72 321 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 814 234 851 328 q 713 82 776 140 q 572 -1 650 24 q 460 -72 492 -28 q 429 -149 429 -117 q 451 -201 429 -185 q 503 -218 474 -218 q 574 -194 542 -218 l 606 -260 q 550 -291 583 -278 q 481 -304 517 -304 m 461 83 q 603 130 543 83 q 697 261 664 176 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 261 192 346 q 319 130 258 176 q 461 83 381 83 z "},\u1ECC:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 z "},\u1ECE:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 417 974 l 404 1026 q 460 1051 438 1036 q 482 1092 482 1065 q 367 1156 482 1151 l 379 1224 q 520 1191 469 1221 q 571 1104 571 1161 q 524 1014 571 1043 q 417 974 478 985 z "},\u1ED0:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 244 981 l 411 1140 l 511 1140 l 678 981 l 585 981 l 464 1071 l 458 1071 l 338 981 l 244 981 m 589 1089 l 699 1243 l 799 1243 l 806 1231 l 661 1089 l 589 1089 z "},\u1ED2:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 244 981 l 411 1140 l 511 1140 l 678 981 l 585 981 l 464 1071 l 458 1071 l 338 981 l 244 981 m 261 1089 l 117 1231 l 124 1243 l 224 1243 l 333 1089 l 261 1089 z "},\u1ED4:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 632 1075 l 619 1121 q 662 1140 644 1128 q 679 1174 679 1151 q 657 1213 679 1201 q 583 1228 635 1225 l 593 1286 q 760 1185 760 1279 q 722 1109 760 1135 q 632 1075 685 1083 m 244 983 l 411 1142 l 511 1142 l 678 983 l 585 983 l 464 1074 l 458 1074 l 338 983 l 244 983 z "},\u1ED6:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 244 981 l 411 1135 l 511 1135 l 678 981 l 585 981 l 464 1067 l 458 1067 l 338 981 l 244 981 m 557 1171 q 480 1188 510 1171 q 426 1223 450 1206 q 369 1240 401 1240 q 334 1224 346 1240 q 317 1175 322 1207 l 251 1182 q 283 1272 257 1235 q 365 1310 308 1310 q 444 1292 414 1310 q 498 1258 474 1275 q 553 1240 522 1240 q 588 1257 576 1240 q 606 1304 600 1274 l 671 1299 q 640 1208 665 1244 q 557 1171 614 1171 z "},\u1ED8:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 217 981 l 407 1168 l 515 1168 l 706 981 l 608 981 l 464 1093 l 458 1093 l 314 981 l 217 981 z "},\u1E52:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 274 1021 l 274 1100 l 649 1100 l 649 1021 l 274 1021 m 376 1160 l 506 1318 l 615 1318 l 622 1306 l 458 1160 l 376 1160 z "},\u00D8:{ha:922,x_min:67,x_max:864,o:"m 136 -44 l 67 11 l 164 139 q 99 281 122 200 q 76 460 76 361 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 706 844 606 928 l 792 957 l 864 900 l 768 775 q 833 636 810 715 q 856 460 856 557 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 q 225 71 324 -17 l 136 -44 m 196 460 q 240 238 196 329 l 638 756 q 465 826 569 826 q 269 728 343 826 q 196 460 196 629 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 724 579 735 525 q 692 676 713 633 l 293 158 q 465 85 363 85 z "},\u01FE:{ha:922,x_min:67,x_max:864,o:"m 136 -44 l 67 11 l 164 139 q 99 281 122 200 q 76 460 76 361 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 706 844 606 928 l 792 957 l 864 900 l 768 775 q 833 636 810 715 q 856 460 856 557 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 q 225 71 324 -17 l 136 -44 m 196 460 q 240 238 196 329 l 638 756 q 465 826 569 826 q 269 728 343 826 q 196 460 196 629 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 724 579 735 525 q 692 676 713 633 l 293 158 q 465 85 363 85 m 351 981 l 535 1168 l 675 1168 l 681 1156 l 454 981 l 351 981 z "},\u0152:{ha:1176,x_min:72,x_max:1108,o:"m 513 0 q 189 121 306 0 q 72 460 72 242 q 190 794 72 676 q 518 911 307 911 l 1094 911 l 1094 814 l 708 814 l 708 528 l 1031 528 l 1031 429 l 708 429 l 708 99 l 1108 99 l 1108 0 l 513 0 m 526 94 l 593 94 l 593 817 l 526 817 q 277 725 363 817 q 192 460 192 633 q 277 190 192 286 q 526 94 363 94 z "},"\u0245":{ha:715,x_min:0,x_max:715,o:"m 0 0 l 290 911 l 424 911 l 715 0 l 593 0 l 446 493 q 403 644 422 574 q 357 794 383 714 l 351 794 q 307 644 326 714 q 264 493 288 574 l 118 0 l 0 0 z "},\u0186:{ha:793,x_min:44,x_max:721,o:"m 338 -17 q 173 17 244 -17 q 44 115 101 51 l 108 183 q 335 85 197 85 q 530 180 458 85 q 601 464 601 275 q 528 733 601 639 q 336 826 456 826 q 129 743 210 826 l 69 815 q 185 896 115 864 q 342 928 254 928 q 536 874 450 928 q 672 715 622 819 q 721 456 721 610 q 672 196 721 301 q 535 37 622 90 q 338 -17 449 -17 z "},"\uA74E":{ha:1471,x_min:72,x_max:1399,o:"m 426 -17 q 242 42 322 -17 q 117 207 163 100 q 72 460 72 314 q 117 710 72 606 q 242 872 163 815 q 426 928 322 928 q 606 872 524 928 q 735 686 688 817 q 865 872 783 817 q 1043 928 947 928 q 1227 872 1147 928 q 1353 710 1307 815 q 1399 460 1399 606 q 1353 207 1399 314 q 1227 42 1307 100 q 1043 -17 1147 -17 q 865 40 947 -17 q 736 226 783 96 q 606 40 689 96 q 426 -17 524 -17 m 438 85 q 565 131 511 85 q 649 262 619 178 q 679 460 679 346 q 613 728 679 629 q 438 826 547 826 q 258 728 325 826 q 192 460 192 629 q 222 262 192 346 q 308 131 253 178 q 438 85 363 85 m 1033 85 q 1164 131 1108 85 q 1249 262 1219 178 q 1279 460 1279 346 q 1213 728 1279 629 q 1033 826 1146 826 q 858 728 924 826 q 792 460 792 629 q 822 262 792 346 q 906 131 851 178 q 1033 85 961 85 z "},\u0222:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 260 18 349 -17 q 122 119 172 53 q 72 279 72 185 q 133 447 72 382 q 289 540 194 513 q 169 642 204 575 q 133 807 133 710 l 133 911 l 250 911 l 250 819 q 278 677 250 729 q 353 603 306 625 q 461 581 401 581 q 571 603 522 581 q 649 677 619 625 q 678 819 678 729 l 678 911 l 789 911 l 789 807 q 753 642 789 710 q 633 540 718 575 q 790 447 728 513 q 851 279 851 382 q 801 119 851 185 q 663 18 751 53 q 461 -17 575 -17 m 461 85 q 654 135 578 85 q 731 286 731 186 q 654 435 731 385 q 461 485 578 485 q 268 435 344 485 q 192 286 192 385 q 268 135 192 186 q 461 85 344 85 z "},\u01A0:{ha:922,x_min:76,x_max:861,o:"m 465 -17 q 263 42 351 -17 q 126 207 175 100 q 76 460 76 314 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 646 885 564 928 q 758 999 758 907 q 753 1041 758 1019 q 739 1079 747 1063 l 829 1118 q 852 1067 843 1096 q 861 1007 861 1039 q 822 897 861 938 q 713 838 782 856 q 817 682 779 778 q 856 460 856 586 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 661 728 735 629 q 465 826 588 826 q 269 728 343 826 q 196 460 196 629 q 229 262 196 346 q 324 131 263 178 q 465 85 385 85 z "},\u1EDA:{ha:922,x_min:76,x_max:861,o:"m 465 -17 q 263 42 351 -17 q 126 207 175 100 q 76 460 76 314 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 646 885 564 928 q 758 999 758 907 q 753 1041 758 1019 q 739 1079 747 1063 l 829 1118 q 852 1067 843 1096 q 861 1007 861 1039 q 822 897 861 938 q 713 838 782 856 q 817 682 779 778 q 856 460 856 586 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 661 728 735 629 q 465 826 588 826 q 269 728 343 826 q 196 460 196 629 q 229 262 196 346 q 324 131 263 178 q 465 85 385 85 m 358 981 l 542 1168 l 682 1168 l 688 1156 l 461 981 l 358 981 z "},\u1EDC:{ha:922,x_min:76,x_max:861,o:"m 465 -17 q 263 42 351 -17 q 126 207 175 100 q 76 460 76 314 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 646 885 564 928 q 758 999 758 907 q 753 1041 758 1019 q 739 1079 747 1063 l 829 1118 q 852 1067 843 1096 q 861 1007 861 1039 q 822 897 861 938 q 713 838 782 856 q 817 682 779 778 q 856 460 856 586 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 661 728 735 629 q 465 826 588 826 q 269 728 343 826 q 196 460 196 629 q 229 262 196 346 q 324 131 263 178 q 465 85 385 85 m 469 981 l 243 1156 l 249 1168 l 389 1168 l 572 981 l 469 981 z "},\u1EDE:{ha:922,x_min:76,x_max:861,o:"m 465 -17 q 263 42 351 -17 q 126 207 175 100 q 76 460 76 314 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 646 885 564 928 q 758 999 758 907 q 753 1041 758 1019 q 739 1079 747 1063 l 829 1118 q 852 1067 843 1096 q 861 1007 861 1039 q 822 897 861 938 q 713 838 782 856 q 817 682 779 778 q 856 460 856 586 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 661 728 735 629 q 465 826 588 826 q 269 728 343 826 q 196 460 196 629 q 229 262 196 346 q 324 131 263 178 q 465 85 385 85 m 421 974 l 408 1026 q 464 1051 442 1036 q 486 1092 486 1065 q 371 1156 486 1151 l 383 1224 q 524 1191 474 1221 q 575 1104 575 1161 q 528 1014 575 1043 q 421 974 482 985 z "},\u1EE0:{ha:922,x_min:76,x_max:861,o:"m 465 -17 q 263 42 351 -17 q 126 207 175 100 q 76 460 76 314 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 646 885 564 928 q 758 999 758 907 q 753 1041 758 1019 q 739 1079 747 1063 l 829 1118 q 852 1067 843 1096 q 861 1007 861 1039 q 822 897 861 938 q 713 838 782 856 q 817 682 779 778 q 856 460 856 586 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 661 728 735 629 q 465 826 588 826 q 269 728 343 826 q 196 460 196 629 q 229 262 196 346 q 324 131 263 178 q 465 85 385 85 m 558 985 q 491 999 519 985 q 441 1034 463 1014 q 399 1069 419 1054 q 353 1083 378 1083 q 308 1060 326 1083 q 286 992 290 1036 l 208 997 q 250 1122 213 1076 q 350 1168 288 1168 q 417 1153 389 1168 q 467 1119 446 1139 q 510 1084 489 1099 q 556 1069 531 1069 q 622 1161 611 1069 l 700 1156 q 658 1030 696 1075 q 558 985 621 985 z "},\u1EE2:{ha:922,x_min:76,x_max:861,o:"m 465 -17 q 263 42 351 -17 q 126 207 175 100 q 76 460 76 314 q 126 710 76 606 q 263 872 175 815 q 465 928 351 928 q 646 885 564 928 q 758 999 758 907 q 753 1041 758 1019 q 739 1079 747 1063 l 829 1118 q 852 1067 843 1096 q 861 1007 861 1039 q 822 897 861 938 q 713 838 782 856 q 817 682 779 778 q 856 460 856 586 q 806 207 856 314 q 668 42 756 100 q 465 -17 581 -17 m 465 85 q 608 131 547 85 q 701 262 668 178 q 735 460 735 346 q 661 728 735 629 q 465 826 588 826 q 269 728 343 826 q 196 460 196 629 q 229 262 196 346 q 324 131 263 178 q 465 85 385 85 z "},\u1E56:{ha:786,x_min:125,x_max:726,o:"m 125 0 l 125 911 l 385 911 q 564 886 488 911 q 683 802 640 861 q 726 643 726 743 q 633 431 726 500 q 390 361 540 361 l 240 361 l 240 0 l 125 0 m 240 456 l 376 456 q 553 501 496 456 q 611 643 611 546 q 551 780 611 742 q 371 818 490 818 l 240 818 l 240 456 m 418 992 q 362 1013 385 992 q 339 1067 339 1033 q 362 1119 339 1099 q 418 1140 385 1140 q 474 1119 451 1140 q 497 1067 497 1099 q 474 1013 497 1033 q 418 992 451 992 z "},\u0154:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 m 303 981 l 486 1168 l 626 1168 l 632 1156 l 406 981 l 303 981 z "},\u0158:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 m 356 983 l 165 1168 l 263 1168 l 407 1060 l 413 1060 l 557 1168 l 654 1168 l 464 983 l 356 983 z "},\u1E58:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 m 410 992 q 353 1013 376 992 q 331 1067 331 1033 q 353 1119 331 1099 q 410 1140 376 1140 q 466 1119 443 1140 q 489 1067 489 1099 q 466 1013 489 1033 q 410 992 443 992 z "},\u0156:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 m 310 -314 l 299 -258 q 418 -235 386 -251 q 450 -192 450 -219 q 425 -151 450 -164 q 351 -133 400 -137 l 376 -81 q 503 -115 467 -90 q 539 -187 539 -140 q 480 -278 539 -247 q 310 -314 421 -308 z "},\u1E5A:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 z "},\u1E5C:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 m 222 1021 l 222 1100 l 597 1100 l 597 1021 l 222 1021 z "},\u1E5E:{ha:790,x_min:125,x_max:756,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 674 485 729 550 q 524 397 618 421 l 756 0 l 625 0 l 406 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 z "},\u015A:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 282 981 l 465 1168 l 606 1168 l 611 1156 l 385 981 l 282 981 z "},\u015C:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 144 981 l 335 1168 l 443 1168 l 633 981 l 536 981 l 392 1093 l 386 1093 l 242 981 l 144 981 z "},\u1E60:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 389 992 q 333 1013 356 992 q 310 1067 310 1033 q 333 1119 310 1099 q 389 1140 356 1140 q 445 1119 422 1140 q 468 1067 468 1099 q 445 1013 468 1033 q 389 992 422 992 z "},\u0160:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 335 983 l 144 1168 l 242 1168 l 386 1060 l 392 1060 l 536 1168 l 633 1168 l 443 983 l 335 983 z "},\u015E:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 258 -314 l 247 -258 q 367 -235 335 -251 q 399 -189 399 -219 q 375 -146 399 -161 q 292 -122 351 -131 l 353 4 l 426 4 l 386 -89 q 461 -122 435 -100 q 488 -187 488 -144 q 428 -278 488 -247 q 258 -314 369 -308 z "},\u0218:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 258 -314 l 247 -258 q 367 -235 335 -251 q 399 -192 399 -219 q 374 -151 399 -164 q 300 -133 349 -137 l 325 -81 q 451 -115 415 -90 q 488 -187 488 -140 q 428 -278 488 -247 q 258 -314 369 -308 z "},\u1E62:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 z "},\u1E66:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 m 339 988 l 156 1146 l 251 1146 l 386 1060 l 392 1060 l 526 1146 l 622 1146 l 439 988 l 339 988 m 389 1160 q 338 1179 358 1160 q 317 1231 317 1199 q 338 1281 317 1261 q 389 1300 358 1300 q 440 1281 419 1300 q 461 1231 461 1261 q 440 1179 461 1199 q 389 1160 419 1160 z "},"\u1E9E":{ha:926,x_min:126,x_max:867,o:"m 603 -17 q 458 13 522 -17 q 351 93 394 42 l 418 161 q 497 100 456 119 q 590 81 538 81 q 706 125 665 81 q 747 238 747 169 q 724 318 747 281 q 644 384 701 356 q 479 431 586 413 l 472 506 l 663 718 q 594 799 640 765 q 478 832 549 832 q 306 765 368 832 q 243 558 243 699 l 243 0 l 126 0 l 126 579 q 222 835 126 742 q 482 928 318 928 q 673 869 597 928 q 783 714 749 811 l 592 503 q 801 405 736 474 q 867 238 867 336 q 834 108 867 165 q 742 17 801 50 q 603 -17 683 -17 z "},\u0164:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 m 317 983 l 126 1168 l 224 1168 l 368 1060 l 374 1060 l 518 1168 l 615 1168 l 425 983 l 317 983 z "},\u1E6A:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 m 371 992 q 315 1013 338 992 q 292 1067 292 1033 q 315 1119 292 1099 q 371 1140 338 1140 q 427 1119 404 1140 q 450 1067 450 1099 q 427 1013 450 1033 q 371 992 404 992 z "},\u0162:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 m 243 -314 l 232 -258 q 351 -235 319 -251 q 383 -189 383 -219 q 360 -146 383 -161 q 276 -122 336 -131 l 338 4 l 411 4 l 371 -89 q 446 -122 419 -100 q 472 -187 472 -144 q 413 -278 472 -247 q 243 -314 354 -308 z "},\u021A:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 m 250 -314 l 239 -258 q 358 -235 326 -251 q 390 -192 390 -219 q 365 -151 390 -164 q 292 -133 340 -137 l 317 -81 q 443 -115 407 -90 q 479 -187 479 -140 q 420 -278 479 -247 q 250 -314 361 -308 z "},\u1E6C:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 z "},\u1E6E:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 z "},\u0166:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 421 l 143 421 l 143 506 l 265 511 l 314 511 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 511 l 601 511 l 601 421 l 431 421 l 431 0 l 314 0 z "},"\u023E":{ha:744,x_min:39,x_max:764,o:"m 89 -43 l 42 -14 l 314 385 l 314 814 l 39 814 l 39 911 l 674 911 l 717 975 l 764 946 l 706 860 l 706 814 l 674 814 l 431 457 l 431 0 l 314 0 l 314 286 l 89 -43 m 431 814 l 431 556 l 607 814 l 431 814 z "},\u00D9:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 451 981 l 225 1156 l 231 1168 l 371 1168 l 554 981 l 451 981 z "},\u00DA:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 340 981 l 524 1168 l 664 1168 l 669 1156 l 443 981 l 340 981 z "},\u00DB:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 203 981 l 393 1168 l 501 1168 l 692 981 l 594 981 l 450 1093 l 444 1093 l 300 981 l 203 981 z "},\u0168:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 551 985 q 484 999 513 985 q 434 1034 456 1014 q 392 1069 413 1054 q 346 1083 371 1083 q 301 1060 319 1083 q 279 992 283 1036 l 201 997 q 243 1122 206 1076 q 343 1168 281 1168 q 410 1153 382 1168 q 460 1119 439 1139 q 503 1084 482 1099 q 549 1069 524 1069 q 615 1161 604 1069 l 693 1156 q 651 1030 689 1075 q 551 985 614 985 z "},\u00DC:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 304 993 q 256 1013 275 993 q 236 1061 236 1032 q 256 1110 236 1092 q 304 1129 275 1129 q 353 1110 335 1129 q 372 1061 372 1092 q 353 1013 372 1032 q 304 993 335 993 m 590 993 q 541 1013 560 993 q 522 1061 522 1032 q 541 1110 522 1092 q 590 1129 560 1129 q 639 1110 619 1129 q 658 1061 658 1092 q 639 1013 658 1032 q 590 993 619 993 z "},\u016A:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 260 1021 l 260 1100 l 635 1100 l 635 1021 l 260 1021 z "},\u016C:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 447 981 q 301 1034 350 981 q 244 1160 253 1088 l 314 1171 q 355 1088 322 1122 q 447 1054 388 1054 q 540 1088 507 1054 q 581 1171 572 1122 l 650 1160 q 593 1034 642 1088 q 447 981 544 981 z "},\u016E:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 447 971 q 335 1004 378 971 q 293 1096 293 1038 q 335 1188 293 1154 q 447 1222 378 1222 q 559 1188 517 1222 q 601 1096 601 1154 q 559 1004 601 1038 q 447 971 517 971 m 447 1021 q 504 1040 482 1021 q 526 1096 526 1060 q 504 1153 526 1133 q 447 1172 482 1172 q 390 1153 413 1172 q 368 1096 368 1133 q 390 1040 368 1060 q 447 1021 413 1021 z "},\u0170:{ha:896,x_min:121,x_max:782,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 256 981 l 403 1168 l 515 1168 l 522 1156 l 336 981 l 256 981 m 515 981 l 664 1168 l 775 1168 l 782 1156 l 596 981 l 515 981 z "},\u01D3:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 393 983 l 203 1168 l 300 1168 l 444 1060 l 450 1060 l 594 1168 l 692 1168 l 501 983 l 393 983 z "},\u0172:{ha:896,x_min:121,x_max:775,o:"m 467 -304 q 364 -272 407 -304 q 321 -176 321 -240 q 346 -86 321 -128 q 404 -15 371 -44 q 258 34 322 -7 q 158 158 194 75 q 121 376 121 242 l 121 911 l 236 911 l 236 374 q 265 200 236 264 q 341 110 293 136 q 449 83 389 83 q 558 110 510 83 q 635 200 607 136 q 664 374 664 264 l 664 911 l 775 911 l 775 376 q 710 107 775 197 q 525 -12 646 17 q 447 -65 478 -24 q 415 -149 415 -107 q 438 -201 415 -185 q 489 -218 460 -218 q 560 -194 528 -218 l 592 -260 q 536 -291 569 -278 q 467 -304 503 -304 z "},\u01D5:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 304 993 q 258 1012 276 993 q 239 1060 239 1031 q 258 1107 239 1089 q 304 1125 276 1125 q 352 1107 333 1125 q 371 1060 371 1089 q 352 1012 371 1031 q 304 993 333 993 m 590 993 q 542 1012 561 993 q 524 1060 524 1031 q 542 1107 524 1089 q 590 1125 561 1125 q 637 1107 618 1125 q 656 1060 656 1089 q 637 1012 656 1031 q 590 993 618 993 m 261 1196 l 261 1264 l 633 1264 l 633 1196 l 261 1196 z "},\u01D7:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 304 993 q 258 1012 276 993 q 239 1060 239 1031 q 258 1107 239 1089 q 304 1125 276 1125 q 352 1107 333 1125 q 371 1060 371 1089 q 352 1012 371 1031 q 304 993 333 993 m 590 993 q 542 1012 561 993 q 524 1060 524 1031 q 542 1107 524 1089 q 590 1125 561 1125 q 637 1107 618 1125 q 656 1060 656 1089 q 637 1012 656 1031 q 590 993 618 993 m 371 1160 l 492 1318 l 601 1318 l 608 1306 l 454 1160 l 371 1160 z "},\u01D9:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 304 993 q 258 1012 276 993 q 239 1060 239 1031 q 258 1107 239 1089 q 304 1125 276 1125 q 352 1107 333 1125 q 371 1060 371 1089 q 352 1012 371 1031 q 304 993 333 993 m 590 993 q 542 1012 561 993 q 524 1060 524 1031 q 542 1107 524 1089 q 590 1125 561 1125 q 637 1107 618 1125 q 656 1060 656 1089 q 637 1012 656 1031 q 590 993 618 993 m 397 1167 l 231 1314 l 321 1314 l 444 1235 l 450 1235 l 574 1314 l 664 1314 l 497 1167 l 397 1167 z "},\u01DB:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 304 993 q 258 1012 276 993 q 239 1060 239 1031 q 258 1107 239 1089 q 304 1125 276 1125 q 352 1107 333 1125 q 371 1060 371 1089 q 352 1012 371 1031 q 304 993 333 993 m 590 993 q 542 1012 561 993 q 524 1060 524 1031 q 542 1107 524 1089 q 590 1125 561 1125 q 637 1107 618 1125 q 656 1060 656 1089 q 637 1012 656 1031 q 590 993 618 993 m 440 1160 l 286 1306 l 293 1318 l 403 1318 l 524 1160 l 440 1160 z "},\u1E72:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 z "},\u1EE4:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 z "},"\u0244":{ha:951,x_min:26,x_max:922,o:"m 476 -17 q 309 20 383 -17 q 192 142 235 57 q 149 371 149 226 l 149 456 l 26 456 l 26 539 l 149 546 l 149 911 l 264 911 l 264 546 l 692 546 l 692 911 l 803 911 l 803 546 l 922 546 l 922 456 l 803 456 l 803 371 q 760 142 803 226 q 643 20 717 57 q 476 -17 569 -17 m 264 368 q 292 199 264 261 q 369 110 321 136 q 476 85 417 85 q 586 110 538 85 q 663 199 635 136 q 692 368 692 261 l 692 456 l 264 456 l 264 368 z "},\u1EE6:{ha:896,x_min:121,x_max:775,o:"m 449 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 775 911 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 m 403 974 l 390 1026 q 446 1051 424 1036 q 468 1092 468 1065 q 353 1156 468 1151 l 365 1224 q 506 1191 456 1221 q 557 1104 557 1161 q 510 1014 557 1043 q 403 974 464 985 z "},\u01AF:{ha:915,x_min:121,x_max:936,o:"m 775 861 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 710 911 q 801 943 767 918 q 835 1026 835 968 q 814 1107 835 1069 l 904 1146 q 928 1095 919 1124 q 936 1035 936 1067 q 890 915 936 954 q 775 861 843 876 z "},\u1EE8:{ha:915,x_min:121,x_max:936,o:"m 775 861 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 710 911 q 801 943 767 918 q 835 1026 835 968 q 814 1107 835 1069 l 904 1146 q 928 1095 919 1124 q 936 1035 936 1067 q 890 915 936 954 q 775 861 843 876 m 342 981 l 525 1168 l 665 1168 l 671 1156 l 444 981 l 342 981 z "},\u1EEA:{ha:915,x_min:121,x_max:936,o:"m 775 861 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 710 911 q 801 943 767 918 q 835 1026 835 968 q 814 1107 835 1069 l 904 1146 q 928 1095 919 1124 q 936 1035 936 1067 q 890 915 936 954 q 775 861 843 876 m 453 981 l 226 1156 l 232 1168 l 372 1168 l 556 981 l 453 981 z "},\u1EEC:{ha:915,x_min:121,x_max:936,o:"m 775 861 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 710 911 q 801 943 767 918 q 835 1026 835 968 q 814 1107 835 1069 l 904 1146 q 928 1095 919 1124 q 936 1035 936 1067 q 890 915 936 954 q 775 861 843 876 m 404 974 l 392 1026 q 447 1051 425 1036 q 469 1092 469 1065 q 354 1156 469 1151 l 367 1224 q 508 1191 457 1221 q 558 1104 558 1161 q 512 1014 558 1043 q 404 974 465 985 z "},\u1EEE:{ha:915,x_min:121,x_max:936,o:"m 775 861 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 710 911 q 801 943 767 918 q 835 1026 835 968 q 814 1107 835 1069 l 904 1146 q 928 1095 919 1124 q 936 1035 936 1067 q 890 915 936 954 q 775 861 843 876 m 553 985 q 485 999 514 985 q 435 1034 457 1014 q 393 1069 414 1054 q 347 1083 372 1083 q 303 1060 321 1083 q 281 992 285 1036 l 203 997 q 244 1122 207 1076 q 344 1168 282 1168 q 412 1153 383 1168 q 462 1119 440 1139 q 504 1084 483 1099 q 550 1069 525 1069 q 617 1161 606 1069 l 694 1156 q 653 1030 690 1075 q 553 985 615 985 z "},\u1EF0:{ha:915,x_min:121,x_max:936,o:"m 775 861 l 775 371 q 732 142 775 226 q 615 20 689 57 q 449 -17 542 -17 q 281 20 356 -17 q 164 142 207 57 q 121 371 121 226 l 121 911 l 236 911 l 236 368 q 265 199 236 261 q 341 110 293 136 q 449 85 389 85 q 558 110 510 85 q 635 199 607 136 q 664 368 664 261 l 664 911 l 710 911 q 801 943 767 918 q 835 1026 835 968 q 814 1107 835 1069 l 904 1146 q 928 1095 919 1124 q 936 1035 936 1067 q 890 915 936 954 q 775 861 843 876 z "},\u1E7E:{ha:715,x_min:0,x_max:715,o:"m 286 0 l 0 911 l 124 911 l 264 419 q 308 269 288 338 q 353 118 329 200 l 358 118 q 401 269 382 200 q 446 419 421 338 l 597 911 l 715 911 l 421 0 l 286 0 z "},\u1E80:{ha:1092,x_min:32,x_max:1060,o:"m 221 0 l 32 911 l 156 911 l 249 415 q 275 268 263 342 q 299 117 288 194 l 304 117 q 335 269 319 194 q 367 415 350 343 l 490 911 l 607 911 l 726 415 q 760 269 743 343 q 792 117 776 194 l 797 117 q 820 269 808 194 q 846 415 832 343 l 942 911 l 1060 911 l 869 0 l 721 0 l 590 547 q 569 651 579 600 q 549 761 560 701 l 543 761 q 524 651 535 701 q 503 547 514 600 l 369 0 l 221 0 m 550 981 l 324 1156 l 329 1168 l 469 1168 l 653 981 l 550 981 z "},\u1E82:{ha:1092,x_min:32,x_max:1060,o:"m 221 0 l 32 911 l 156 911 l 249 415 q 275 268 263 342 q 299 117 288 194 l 304 117 q 335 269 319 194 q 367 415 350 343 l 490 911 l 607 911 l 726 415 q 760 269 743 343 q 792 117 776 194 l 797 117 q 820 269 808 194 q 846 415 832 343 l 942 911 l 1060 911 l 869 0 l 721 0 l 590 547 q 569 651 579 600 q 549 761 560 701 l 543 761 q 524 651 535 701 q 503 547 514 600 l 369 0 l 221 0 m 439 981 l 622 1168 l 763 1168 l 768 1156 l 542 981 l 439 981 z "},\u0174:{ha:1092,x_min:32,x_max:1060,o:"m 221 0 l 32 911 l 156 911 l 249 415 q 275 268 263 342 q 299 117 288 194 l 304 117 q 335 269 319 194 q 367 415 350 343 l 490 911 l 607 911 l 726 415 q 760 269 743 343 q 792 117 776 194 l 797 117 q 820 269 808 194 q 846 415 832 343 l 942 911 l 1060 911 l 869 0 l 721 0 l 590 547 q 569 651 579 600 q 549 761 560 701 l 543 761 q 524 651 535 701 q 503 547 514 600 l 369 0 l 221 0 m 301 981 l 492 1168 l 600 1168 l 790 981 l 693 981 l 549 1093 l 543 1093 l 399 981 l 301 981 z "},\u1E84:{ha:1092,x_min:32,x_max:1060,o:"m 221 0 l 32 911 l 156 911 l 249 415 q 275 268 263 342 q 299 117 288 194 l 304 117 q 335 269 319 194 q 367 415 350 343 l 490 911 l 607 911 l 726 415 q 760 269 743 343 q 792 117 776 194 l 797 117 q 820 269 808 194 q 846 415 832 343 l 942 911 l 1060 911 l 869 0 l 721 0 l 590 547 q 569 651 579 600 q 549 761 560 701 l 543 761 q 524 651 535 701 q 503 547 514 600 l 369 0 l 221 0 m 403 993 q 354 1013 374 993 q 335 1061 335 1032 q 354 1110 335 1092 q 403 1129 374 1129 q 452 1110 433 1129 q 471 1061 471 1092 q 452 1013 471 1032 q 403 993 433 993 m 689 993 q 640 1013 658 993 q 621 1061 621 1032 q 640 1110 621 1092 q 689 1129 658 1129 q 738 1110 718 1129 q 757 1061 757 1092 q 738 1013 757 1032 q 689 993 718 993 z "},\u1EF2:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 335 981 l 108 1156 l 114 1168 l 254 1168 l 438 981 l 335 981 z "},\u00DD:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 224 981 l 407 1168 l 547 1168 l 553 1156 l 326 981 l 224 981 z "},\u0176:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 86 981 l 276 1168 l 385 1168 l 575 981 l 478 981 l 333 1093 l 328 1093 l 183 981 l 86 981 z "},\u1EF8:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 435 985 q 367 999 396 985 q 317 1034 339 1014 q 275 1069 296 1054 q 229 1083 254 1083 q 185 1060 203 1083 q 163 992 167 1036 l 85 997 q 126 1122 89 1076 q 226 1168 164 1168 q 294 1153 265 1168 q 344 1119 322 1139 q 386 1084 365 1099 q 432 1069 407 1069 q 499 1161 488 1069 l 576 1156 q 535 1030 572 1075 q 435 985 497 985 z "},\u0178:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 188 993 q 139 1013 158 993 q 119 1061 119 1032 q 139 1110 119 1092 q 188 1129 158 1129 q 237 1110 218 1129 q 256 1061 256 1092 q 237 1013 256 1032 q 188 993 218 993 m 474 993 q 424 1013 443 993 q 406 1061 406 1032 q 424 1110 406 1092 q 474 1129 443 1129 q 522 1110 503 1129 q 542 1061 542 1092 q 522 1013 542 1032 q 474 993 503 993 z "},\u1E8E:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 331 992 q 274 1013 297 992 q 251 1067 251 1033 q 274 1119 251 1099 q 331 1140 297 1140 q 387 1119 364 1140 q 410 1067 410 1099 q 387 1013 410 1033 q 331 992 364 992 z "},\u1EF4:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 z "},\u1EF6:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 286 974 l 274 1026 q 329 1051 307 1036 q 351 1092 351 1065 q 236 1156 351 1151 l 249 1224 q 390 1191 339 1221 q 440 1104 440 1161 q 394 1014 440 1043 q 286 974 347 985 z "},\u0179:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 m 282 981 l 465 1168 l 606 1168 l 611 1156 l 385 981 l 282 981 z "},\u1E90:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 m 144 981 l 335 1168 l 443 1168 l 633 981 l 536 981 l 392 1093 l 386 1093 l 242 981 l 144 981 z "},\u017B:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 m 389 992 q 333 1013 356 992 q 310 1067 310 1033 q 333 1119 310 1099 q 389 1140 356 1140 q 445 1119 422 1140 q 468 1067 468 1099 q 445 1013 468 1033 q 389 992 422 992 z "},\u017D:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 m 335 983 l 144 1168 l 242 1168 l 386 1060 l 392 1060 l 536 1168 l 633 1168 l 443 983 l 335 983 z "},\u1E92:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 z "},\u1E94:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 z "},\u00D0:{ha:888,x_min:38,x_max:817,o:"m 158 0 l 158 435 l 38 435 l 38 518 l 158 525 l 158 911 l 386 911 q 707 794 597 911 q 817 460 817 676 q 708 121 817 242 q 392 0 599 0 l 158 0 m 274 94 l 378 94 q 617 191 538 94 q 697 460 697 288 q 617 724 697 632 q 378 817 538 817 l 274 817 l 274 525 l 481 525 l 481 435 l 274 435 l 274 94 z "},\u00DE:{ha:810,x_min:125,x_max:740,o:"m 125 0 l 125 911 l 240 911 l 240 758 l 404 758 q 581 733 506 758 q 698 649 656 707 q 740 490 740 590 q 647 277 740 346 q 404 208 554 208 l 240 208 l 240 0 l 125 0 m 240 303 l 390 303 q 567 348 510 303 q 625 490 625 393 q 567 626 625 589 q 390 664 508 664 l 240 664 l 240 303 z "},\u01F7:{ha:786,x_min:125,x_max:726,o:"m 125 -212 l 125 911 l 238 911 l 238 799 q 349 890 286 851 q 485 928 413 928 q 659 860 592 928 q 726 636 726 793 q 681 421 726 529 q 528 206 635 313 q 240 -3 422 99 l 240 -212 l 125 -212 m 240 103 q 465 283 385 194 q 578 459 546 372 q 611 628 611 546 q 567 783 611 739 q 456 826 524 826 q 342 787 403 826 q 240 690 282 747 l 240 103 z "},\u021C:{ha:690,x_min:35,x_max:633,o:"m 150 -229 l 106 -144 q 348 -14 258 -78 q 477 111 438 50 q 517 229 517 172 q 476 335 517 297 q 367 372 435 372 q 291 364 328 372 q 206 328 254 356 l 164 399 q 351 519 288 469 q 438 610 415 568 q 461 697 461 653 q 426 792 461 758 q 332 826 390 826 q 211 796 264 826 q 93 704 158 765 l 35 771 q 183 889 111 850 q 353 928 254 928 q 517 873 456 928 q 578 726 578 818 q 531 580 578 643 q 390 454 485 517 q 566 404 499 460 q 633 243 633 349 q 518 -12 633 100 q 150 -229 403 -125 z "},\u01B7:{ha:764,x_min:53,x_max:708,o:"m 390 -17 q 203 13 285 -17 q 53 118 122 43 l 117 190 q 240 108 175 131 q 379 85 304 85 q 532 131 469 85 q 594 267 594 178 q 538 395 594 350 q 396 440 482 440 q 332 436 356 440 q 281 421 308 432 l 235 490 l 540 814 l 110 814 l 110 911 l 690 911 l 690 839 l 394 518 q 562 496 492 525 q 670 408 632 467 q 708 271 708 350 q 665 115 708 179 q 549 17 621 50 q 390 -17 476 -17 z "},\u01EE:{ha:764,x_min:53,x_max:708,o:"m 390 -17 q 203 13 285 -17 q 53 118 122 43 l 117 190 q 240 108 175 131 q 379 85 304 85 q 532 131 469 85 q 594 267 594 178 q 538 395 594 350 q 396 440 482 440 q 332 436 356 440 q 281 421 308 432 l 235 490 l 540 814 l 110 814 l 110 911 l 690 911 l 690 839 l 394 518 q 562 496 492 525 q 670 408 632 467 q 708 271 708 350 q 665 115 708 179 q 549 17 621 50 q 390 -17 476 -17 m 343 983 l 153 1168 l 250 1168 l 394 1060 l 400 1060 l 544 1168 l 642 1168 l 451 983 l 343 983 z "},\u018F:{ha:900,x_min:81,x_max:828,o:"m 454 -17 q 182 101 283 -17 q 81 442 81 218 q 81 465 81 453 q 83 486 82 476 l 714 486 q 638 743 708 654 q 447 832 568 832 q 306 805 367 832 q 196 733 244 778 l 135 803 q 269 892 192 857 q 451 928 347 928 q 726 807 625 928 q 828 458 828 686 q 726 103 828 224 q 454 -17 624 -17 m 454 79 q 633 159 565 79 q 713 399 701 239 l 197 399 q 272 161 200 243 q 454 79 343 79 z "},"\uA779":{ha:922,x_min:39,x_max:851,o:"m 464 -17 q 265 37 351 -17 q 128 188 178 90 q 79 419 79 286 q 136 664 79 563 q 274 811 193 765 l 274 817 l 39 817 l 39 911 l 399 911 q 733 795 614 911 q 851 450 851 679 q 802 202 851 307 q 665 40 753 97 q 464 -17 578 -17 m 467 85 q 606 131 547 85 q 698 263 665 178 q 731 460 731 347 q 654 720 731 628 q 454 813 578 813 q 322 761 379 813 q 232 624 264 710 q 200 435 200 539 q 273 178 200 272 q 467 85 346 85 z "},"\uA77B":{ha:786,x_min:125,x_max:731,o:"m 125 -212 l 125 911 l 238 911 l 238 800 q 348 891 285 854 q 482 928 411 928 q 664 854 597 928 q 731 607 731 781 l 731 524 l 614 510 l 614 593 q 572 776 614 725 q 451 826 529 826 q 340 788 400 826 q 240 693 281 750 l 240 99 l 628 99 l 628 0 l 240 0 l 240 -212 l 125 -212 z "},"\uA77D":{ha:838,x_min:43,x_max:806,o:"m 425 -229 q 246 -204 325 -229 q 121 -126 167 -179 q 75 13 75 -72 q 137 169 75 103 q 300 282 199 236 l 300 288 q 172 397 225 332 q 119 567 119 461 q 168 718 119 656 q 290 811 217 781 l 290 817 l 43 817 l 43 911 l 779 911 l 779 814 l 543 814 q 371 781 439 814 q 269 697 303 749 q 236 585 236 644 q 302 428 236 490 q 515 313 368 367 q 681 243 617 276 q 775 164 744 210 q 806 43 806 118 q 762 -95 806 -33 q 633 -193 718 -157 q 425 -229 549 -229 m 435 -133 q 625 -83 563 -133 q 688 35 688 -33 q 663 112 688 82 q 594 163 638 142 q 493 202 550 183 q 372 246 436 221 q 229 146 276 199 q 182 26 182 93 q 251 -93 182 -53 q 435 -133 321 -133 z "},"\uA77E":{ha:838,x_min:32,x_max:794,o:"m 413 928 q 592 903 514 928 q 717 824 671 878 q 763 686 763 771 q 701 530 763 597 q 538 417 639 463 l 538 411 q 665 303 613 368 q 718 132 718 239 q 669 -19 718 43 q 547 -112 621 -82 l 547 -118 l 794 -118 l 794 -212 l 58 -212 l 58 -115 l 294 -115 q 467 -83 399 -115 q 568 2 535 -50 q 601 114 601 54 q 535 270 601 208 q 322 386 469 332 q 157 457 221 424 q 63 536 93 490 q 32 656 32 582 q 76 794 32 733 q 205 892 119 856 q 413 928 290 928 m 403 832 q 213 782 276 832 q 150 664 150 732 q 175 587 150 617 q 244 536 200 557 q 344 497 288 515 q 465 453 401 478 q 608 553 561 500 q 656 672 656 606 q 587 792 656 751 q 403 832 518 832 z "},"\uA780":{ha:675,x_min:36,x_max:550,o:"m 550 911 l 550 0 l 435 0 l 435 813 l 36 813 l 36 911 l 550 911 z "},"\uA782":{ha:790,x_min:125,x_max:758,o:"m 240 690 l 240 263 q 452 411 374 340 q 565 549 531 482 q 599 679 599 615 q 561 789 599 751 q 458 826 524 826 q 347 795 406 826 q 240 690 289 764 m 125 -212 l 125 911 l 238 911 l 238 799 q 351 897 290 865 q 485 928 413 928 q 653 869 590 928 q 715 699 715 810 q 622 453 715 567 q 335 219 529 339 q 447 115 371 149 q 632 81 524 81 q 691 84 665 81 q 736 93 717 88 l 758 6 q 700 -10 736 -3 q 621 -17 664 -17 q 386 33 483 -17 q 240 186 289 82 l 240 -212 l 125 -212 z "},"\uA75A":{ha:656,x_min:60,x_max:621,o:"m 472 -17 q 208 48 313 -17 q 64 249 104 113 q 303 402 217 329 q 426 544 390 475 q 463 679 463 613 q 424 789 463 751 q 315 826 385 826 q 210 804 257 826 q 119 738 164 782 l 60 800 q 183 894 118 861 q 333 928 249 928 q 510 869 443 928 q 578 699 578 810 q 486 448 578 565 q 192 215 394 331 q 479 81 264 81 q 547 85 518 81 q 599 94 576 89 l 621 8 q 559 -9 599 -1 q 472 -17 519 -17 z "},"\uA784":{ha:786,x_min:125,x_max:731,o:"m 125 -212 l 125 911 l 238 911 l 238 800 q 348 891 285 854 q 482 928 411 928 q 664 854 597 928 q 731 607 731 781 l 731 524 l 614 510 l 614 593 q 572 776 614 725 q 451 826 529 826 q 340 788 400 826 q 240 693 281 750 l 240 -212 l 125 -212 z "},"\uA786":{ha:744,x_min:39,x_max:706,o:"m 425 -17 q 242 28 321 -17 q 117 159 163 74 q 72 363 72 244 q 113 563 72 472 q 215 717 154 653 q 336 811 276 782 l 336 817 l 39 817 l 39 911 l 706 911 l 706 814 l 567 814 q 411 774 481 814 q 292 667 342 733 q 217 525 243 601 q 192 375 192 449 q 258 162 192 239 q 435 85 324 85 q 633 172 553 85 l 694 106 q 576 14 642 44 q 425 -17 511 -17 z "},\u0194:{ha:715,x_min:0,x_max:715,o:"m 356 -311 q 230 -267 271 -311 q 189 -154 189 -224 q 210 -55 189 -107 q 271 69 232 -3 l 0 911 l 124 911 l 264 435 q 308 285 289 354 q 353 132 326 217 l 358 132 q 402 285 383 217 q 446 435 421 354 l 597 911 l 715 911 l 438 71 q 499 -55 478 -3 q 521 -154 521 -107 q 480 -267 521 -224 q 356 -311 439 -311 m 356 -232 q 403 -210 388 -232 q 418 -158 418 -189 q 402 -78 418 -121 q 357 14 386 -36 l 351 14 q 308 -78 325 -36 q 292 -158 292 -121 q 308 -210 292 -189 q 356 -232 324 -232 z "},\u0196:{ha:365,x_min:125,x_max:326,o:"m 254 -12 q 156 28 186 -12 q 125 144 125 68 l 125 911 l 240 911 l 240 142 q 253 99 240 110 q 281 88 265 88 q 310 92 293 88 l 326 1 q 254 -12 299 -12 z "},\u01B1:{ha:942,x_min:63,x_max:879,o:"m 879 911 l 879 817 l 697 817 l 697 811 q 774 717 738 772 q 835 588 811 661 q 860 424 860 515 q 812 197 860 296 q 676 40 764 97 q 471 -17 589 -17 q 265 40 353 -17 q 129 197 178 97 q 81 424 81 296 q 105 588 81 515 q 167 717 129 661 q 244 811 206 772 l 244 817 l 63 817 l 63 911 l 386 911 l 386 826 q 254 670 308 765 q 200 431 200 575 q 233 253 200 332 q 326 130 265 175 q 471 85 386 85 q 616 130 556 85 q 708 253 676 175 q 740 431 740 332 q 687 670 740 575 q 556 826 633 765 l 556 911 l 879 911 z "},"\uA7B3":{ha:703,x_min:15,x_max:688,o:"m 15 -256 l 282 349 l 33 911 l 161 911 l 286 613 q 319 534 303 574 q 357 443 335 494 l 363 443 q 395 534 381 494 q 426 613 410 574 l 547 911 l 669 911 l 422 340 l 688 -256 l 560 -256 l 425 61 q 388 151 407 106 q 347 249 369 196 l 342 249 q 305 151 322 196 q 269 61 288 106 l 138 -256 l 15 -256 z "},"\u0241":{ha:669,x_min:0,x_max:626,o:"m 244 0 l 244 381 q 448 501 389 433 q 507 653 507 568 q 452 780 507 733 q 303 826 397 826 q 169 796 232 826 q 64 725 107 765 l 0 800 q 130 890 51 851 q 310 928 208 928 q 469 897 397 928 q 583 807 540 867 q 626 660 626 747 q 554 460 626 542 q 360 325 482 378 l 360 0 l 244 0 z "},"\uA722":{ha:401,x_min:71,x_max:338,o:"m 108 -17 l 93 50 q 201 91 160 60 q 242 169 242 122 q 236 202 242 189 q 222 224 231 215 q 157 186 204 186 q 96 209 121 186 q 71 269 71 232 q 100 338 71 313 q 181 364 129 364 q 293 318 249 364 q 338 194 338 272 q 278 47 338 101 q 108 -17 218 -8 m 108 546 l 93 613 q 201 654 160 624 q 242 732 242 685 q 236 765 242 751 q 222 786 231 778 q 196 760 214 769 q 157 750 178 750 q 96 773 121 750 q 71 832 71 796 q 100 901 71 875 q 181 926 129 926 q 293 881 249 926 q 338 758 338 836 q 278 610 338 665 q 108 546 218 554 z "},"\uA724":{ha:401,x_min:64,x_max:331,o:"m 293 536 q 124 602 183 544 q 64 750 64 660 q 109 881 64 835 q 218 926 154 926 q 301 901 272 926 q 331 832 331 875 q 306 773 331 796 q 244 750 281 750 q 179 788 199 750 q 161 736 161 769 q 201 648 161 683 q 308 603 242 613 l 293 536 z "},\u00E0:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 386 792 l 167 1008 l 174 1021 l 299 1021 l 478 792 l 386 792 z "},\u00E1:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 264 792 l 443 1021 l 568 1021 l 575 1008 l 356 792 l 264 792 z "},\u00E2:{ha:700,x_min:71,x_max:610,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 132 792 l 321 1021 l 421 1021 l 610 792 l 517 792 l 374 935 l 368 935 l 225 792 l 132 792 z "},\u00E3:{ha:700,x_min:71,x_max:611,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 471 801 q 407 819 433 801 q 359 860 381 836 q 317 901 338 883 q 272 918 296 918 q 226 888 242 918 q 207 808 210 857 l 131 813 q 166 948 133 894 q 271 1001 199 1001 q 335 984 308 1001 q 383 943 361 967 q 426 902 406 919 q 471 885 446 885 q 517 916 501 885 q 535 994 532 947 l 611 989 q 576 855 608 908 q 471 801 543 801 z "},\u00E4:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 238 815 q 188 835 207 815 q 168 885 168 856 q 188 934 168 914 q 238 954 207 954 q 286 934 267 954 q 306 885 306 914 q 286 835 306 856 q 238 815 267 815 m 504 815 q 456 835 475 815 q 436 885 436 856 q 456 934 436 914 q 504 954 475 954 q 554 934 535 954 q 574 885 574 914 q 554 835 574 856 q 504 815 535 815 z "},\u00E5:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 769 q 260 808 301 769 q 218 907 218 847 q 260 1004 218 965 q 371 1043 301 1043 q 482 1004 440 1043 q 524 907 524 965 q 482 808 524 847 q 371 769 440 769 m 371 821 q 427 844 404 821 q 450 907 450 868 q 427 969 450 946 q 371 992 404 992 q 315 969 338 992 q 292 907 292 946 q 315 844 292 868 q 371 821 338 821 z "},\u0101:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 186 835 l 186 914 l 556 914 l 556 835 l 186 835 z "},\u0103:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 790 q 251 822 297 790 q 181 901 204 853 q 154 1000 158 950 l 225 1013 q 268 913 233 958 q 371 868 303 868 q 474 913 439 868 q 517 1013 508 958 l 588 1000 q 562 901 585 950 q 492 822 539 853 q 371 790 446 790 z "},\u0227:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 814 q 316 834 338 814 q 294 889 294 854 q 316 943 294 922 q 371 964 338 964 q 426 943 404 964 q 447 889 447 922 q 426 834 447 854 q 371 814 404 814 z "},\u01CE:{ha:700,x_min:71,x_max:610,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 321 792 l 132 1021 l 225 1021 l 368 878 l 374 878 l 517 1021 l 610 1021 l 421 792 l 321 792 z "},\u0201:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 233 793 l 82 1011 l 89 1024 l 183 1024 l 303 793 l 233 793 m 458 793 l 306 1011 l 313 1024 l 407 1024 l 526 793 l 458 793 z "},\u0105:{ha:700,x_min:71,x_max:661,o:"m 539 -299 q 440 -267 481 -299 q 400 -169 400 -236 q 434 -68 400 -114 q 507 4 468 -22 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 q 521 -65 551 -22 q 490 -147 490 -107 q 513 -199 490 -182 q 561 -215 535 -215 q 599 -209 582 -215 q 632 -192 615 -203 l 661 -256 q 606 -286 639 -274 q 539 -299 574 -299 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 z "},\u1EA1:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 z "},\u1EA3:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 326 778 l 314 833 q 370 865 349 843 q 392 914 392 886 q 276 981 392 976 l 283 1051 q 430 1021 378 1050 q 482 931 482 992 q 435 827 482 865 q 326 778 389 789 z "},\u1EA5:{ha:700,x_min:71,x_max:708,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 151 792 l 321 979 l 421 979 l 590 792 l 503 792 l 374 901 l 368 901 l 239 792 l 151 792 m 507 913 l 608 1078 l 701 1078 l 708 1065 l 574 913 l 507 913 z "},\u1EA7:{ha:700,x_min:33,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 151 792 l 321 979 l 421 979 l 590 792 l 503 792 l 374 901 l 368 901 l 239 792 l 151 792 m 168 913 l 33 1065 l 40 1078 l 133 1078 l 235 913 l 168 913 z "},\u1EA9:{ha:700,x_min:71,x_max:669,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 151 792 l 321 979 l 421 979 l 590 792 l 503 792 l 374 901 l 368 901 l 239 792 l 151 792 m 540 901 l 528 950 q 570 969 554 957 q 586 1004 586 982 q 565 1046 586 1032 q 490 1063 543 1060 l 500 1129 q 626 1099 582 1126 q 669 1017 669 1071 q 629 937 669 961 q 540 901 589 913 z "},\u1EAB:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 151 792 l 321 968 l 421 968 l 590 792 l 503 792 l 374 890 l 368 890 l 239 792 l 151 792 m 467 1003 q 392 1017 424 1003 q 334 1047 360 1032 q 281 1061 308 1061 q 250 1047 260 1061 q 236 1003 240 1032 l 171 1008 q 199 1096 175 1061 q 275 1131 224 1131 q 350 1116 319 1131 q 407 1087 381 1101 q 461 1072 433 1072 q 492 1087 482 1072 q 506 1132 501 1101 l 571 1126 q 542 1038 567 1072 q 467 1003 518 1003 z "},\u1EAD:{ha:700,x_min:71,x_max:610,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 132 792 l 321 1021 l 421 1021 l 610 792 l 517 792 l 374 935 l 368 935 l 225 792 l 132 792 z "},\u1EAF:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 790 q 251 822 297 790 q 181 901 204 853 q 154 1000 158 950 l 221 1013 q 244 942 226 976 q 293 885 261 907 q 371 864 325 864 q 449 885 418 864 q 499 942 481 907 q 521 1013 517 976 l 588 1000 q 562 901 585 950 q 492 822 539 853 q 371 790 446 790 m 301 989 l 411 1156 l 504 1156 l 511 1142 l 367 989 l 301 989 z "},\u1EB1:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 790 q 251 822 297 790 q 181 901 204 853 q 154 1000 158 950 l 221 1013 q 244 942 226 976 q 293 885 261 907 q 371 864 325 864 q 449 885 418 864 q 499 942 481 907 q 521 1013 517 976 l 588 1000 q 562 901 585 950 q 492 822 539 853 q 371 790 446 790 m 375 989 l 231 1142 l 238 1156 l 331 1156 l 440 989 l 375 989 z "},\u1EB3:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 790 q 251 822 297 790 q 181 901 204 853 q 154 1000 158 950 l 221 1013 q 244 942 226 976 q 293 885 261 907 q 371 864 325 864 q 449 885 418 864 q 499 942 481 907 q 521 1013 517 976 l 588 1000 q 562 901 585 950 q 492 822 539 853 q 371 790 446 790 m 333 971 l 322 1021 q 370 1040 351 1026 q 389 1075 389 1053 q 365 1116 389 1103 q 283 1132 340 1129 l 293 1201 q 425 1170 378 1199 q 472 1088 472 1142 q 429 1006 472 1032 q 333 971 386 979 z "},\u1EB5:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 790 q 257 814 301 790 q 190 875 213 838 q 164 954 168 913 l 228 965 q 269 896 235 928 q 371 864 304 864 q 472 896 438 864 q 514 965 507 928 l 578 954 q 551 875 574 913 q 485 814 529 838 q 371 790 442 790 m 467 997 q 405 1008 429 997 q 362 1032 381 1018 q 324 1056 343 1046 q 281 1067 306 1067 q 225 1003 235 1067 l 160 1008 q 192 1100 164 1064 q 275 1136 221 1136 q 337 1126 313 1136 q 380 1102 361 1115 q 417 1078 399 1089 q 461 1068 436 1068 q 517 1132 507 1068 l 582 1126 q 549 1034 578 1071 q 467 997 521 997 z "},\u1EB7:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 371 790 q 251 822 297 790 q 181 901 204 853 q 154 1000 158 950 l 225 1013 q 268 913 233 958 q 371 868 303 868 q 474 913 439 868 q 517 1013 508 958 l 588 1000 q 562 901 585 950 q 492 822 539 853 q 371 790 446 790 z "},\u01FB:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 374 769 q 263 808 304 769 q 221 901 221 846 q 242 971 221 944 q 303 1032 264 997 l 432 1157 l 542 1157 l 549 1144 l 389 1028 q 494 988 463 1026 q 526 901 526 949 q 485 808 526 846 q 374 769 443 769 m 374 821 q 430 843 407 821 q 453 901 453 865 q 430 961 453 939 q 374 983 407 983 q 317 961 340 983 q 294 901 294 939 q 317 843 294 865 q 374 821 340 821 z "},\u00E6:{ha:1081,x_min:71,x_max:1029,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 481 429 271 406 q 469 510 481 472 q 427 572 457 549 q 342 596 397 596 q 237 574 288 596 q 146 526 186 551 l 101 604 q 215 664 149 636 q 356 692 282 692 q 481 653 431 692 q 550 549 531 614 q 644 653 588 614 q 771 692 701 692 q 964 605 899 692 q 1029 374 1029 518 q 1028 338 1029 356 q 1024 307 1026 321 l 588 307 q 651 140 592 203 q 797 76 710 76 q 886 90 846 76 q 963 128 926 103 l 1003 53 q 906 3 960 22 q 783 -17 853 -17 q 642 21 699 -17 q 544 110 585 58 q 406 15 476 47 q 269 -17 335 -17 m 301 78 q 405 103 350 78 q 506 178 460 129 q 489 242 494 206 q 481 317 483 279 l 479 347 q 253 288 319 328 q 186 182 186 249 q 219 102 186 126 q 301 78 253 78 m 589 394 l 925 394 q 883 547 925 496 q 768 599 842 599 q 650 543 700 599 q 589 394 600 488 z "},\u01FD:{ha:1081,x_min:71,x_max:1029,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 481 429 271 406 q 469 510 481 472 q 427 572 457 549 q 342 596 397 596 q 237 574 288 596 q 146 526 186 551 l 101 604 q 215 664 149 636 q 356 692 282 692 q 481 653 431 692 q 550 549 531 614 q 644 653 588 614 q 771 692 701 692 q 964 605 899 692 q 1029 374 1029 518 q 1028 338 1029 356 q 1024 307 1026 321 l 588 307 q 651 140 592 203 q 797 76 710 76 q 886 90 846 76 q 963 128 926 103 l 1003 53 q 906 3 960 22 q 783 -17 853 -17 q 642 21 699 -17 q 544 110 585 58 q 406 15 476 47 q 269 -17 335 -17 m 301 78 q 405 103 350 78 q 506 178 460 129 q 489 242 494 206 q 481 317 483 279 l 479 347 q 253 288 319 328 q 186 182 186 249 q 219 102 186 126 q 301 78 253 78 m 589 394 l 925 394 q 883 547 925 496 q 768 599 842 599 q 650 543 700 599 q 589 394 600 488 m 467 792 l 646 1021 l 771 1021 l 778 1008 l 558 792 l 467 792 z "},\u01E3:{ha:1081,x_min:71,x_max:1029,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 481 429 271 406 q 469 510 481 472 q 427 572 457 549 q 342 596 397 596 q 237 574 288 596 q 146 526 186 551 l 101 604 q 215 664 149 636 q 356 692 282 692 q 481 653 431 692 q 550 549 531 614 q 644 653 588 614 q 771 692 701 692 q 964 605 899 692 q 1029 374 1029 518 q 1028 338 1029 356 q 1024 307 1026 321 l 588 307 q 651 140 592 203 q 797 76 710 76 q 886 90 846 76 q 963 128 926 103 l 1003 53 q 906 3 960 22 q 783 -17 853 -17 q 642 21 699 -17 q 544 110 585 58 q 406 15 476 47 q 269 -17 335 -17 m 301 78 q 405 103 350 78 q 506 178 460 129 q 489 242 494 206 q 481 317 483 279 l 479 347 q 253 288 319 328 q 186 182 186 249 q 219 102 186 126 q 301 78 253 78 m 589 394 l 925 394 q 883 547 925 496 q 768 599 842 599 q 650 543 700 599 q 589 394 600 488 m 389 835 l 389 914 l 758 914 l 758 835 l 389 835 z "},"\u2C65":{ha:700,x_min:71,x_max:601,o:"m 265 -71 l 210 -54 l 224 -12 q 114 48 157 0 q 71 175 71 96 q 142 328 71 272 q 368 413 214 383 l 425 576 q 347 596 393 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 416 688 393 692 q 458 678 439 685 l 483 750 l 538 735 l 510 651 q 579 556 557 617 q 601 414 601 494 l 601 0 l 507 0 l 497 81 l 493 81 q 394 15 446 42 q 283 -17 343 -12 l 265 -71 m 488 347 q 444 341 465 344 q 403 335 422 338 l 315 78 q 401 103 360 81 q 488 165 442 125 l 488 347 m 183 182 q 204 115 183 139 q 257 83 225 92 l 338 321 q 218 265 253 299 q 183 182 183 231 m 488 429 q 483 481 488 456 q 468 528 479 506 l 432 422 q 460 426 446 425 q 488 429 474 428 z "},\u0180:{ha:788,x_min:15,x_max:724,o:"m 431 -17 q 333 6 383 -17 q 238 69 282 29 l 233 69 l 222 0 l 132 0 l 132 774 l 15 774 l 15 857 l 132 864 l 132 989 l 246 989 l 246 864 l 499 864 l 499 774 l 246 774 l 246 667 l 240 544 q 343 611 289 585 q 453 638 397 638 q 654 551 585 638 q 724 321 724 465 q 683 140 724 215 q 575 24 642 64 q 431 -17 508 -17 m 410 79 q 549 145 493 79 q 604 321 604 211 q 563 480 604 418 q 426 542 521 542 q 339 518 383 542 q 246 450 294 494 l 246 150 q 333 95 290 111 q 410 79 376 79 z "},\u0253:{ha:768,x_min:114,x_max:704,o:"m 413 -17 q 315 6 365 -17 q 219 67 264 28 l 215 67 l 206 0 l 114 0 l 114 746 q 172 933 114 861 q 349 1006 231 1006 q 410 999 379 1006 q 463 983 440 993 l 436 896 q 360 913 399 913 q 262 868 293 913 q 228 744 231 824 l 225 588 q 326 655 271 628 q 436 682 381 682 q 636 590 568 682 q 704 343 704 497 q 663 149 704 229 q 556 26 622 68 q 413 -17 490 -17 m 393 79 q 531 149 476 79 q 586 342 586 219 q 545 519 586 451 q 408 586 504 586 q 228 493 325 586 l 228 150 q 316 95 272 111 q 393 79 360 79 z "},\u1E03:{ha:768,x_min:114,x_max:704,o:"m 413 -17 q 315 6 365 -17 q 219 69 264 29 l 215 69 l 206 0 l 114 0 l 114 989 l 228 989 l 228 719 l 225 597 q 326 665 271 638 q 436 692 381 692 q 636 599 568 692 q 704 349 704 506 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 321 572 365 596 q 228 504 276 549 l 228 150 q 316 95 272 111 q 393 79 360 79 m 453 814 q 398 834 419 814 q 376 889 376 854 q 398 943 376 922 q 453 964 419 964 q 508 943 486 964 q 529 889 529 922 q 508 834 529 854 q 453 814 486 814 z "},\u1E07:{ha:768,x_min:114,x_max:704,o:"m 413 -17 q 315 6 365 -17 q 219 69 264 29 l 215 69 l 206 0 l 114 0 l 114 989 l 228 989 l 228 719 l 225 597 q 326 665 271 638 q 436 692 381 692 q 636 599 568 692 q 704 349 704 506 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 321 572 365 596 q 228 504 276 549 l 228 150 q 316 95 272 111 q 393 79 360 79 z "},\u00E7:{ha:633,x_min:64,x_max:599,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 m 249 -314 l 238 -258 q 357 -235 325 -251 q 389 -189 389 -219 q 365 -146 389 -161 q 282 -122 342 -131 l 343 4 l 417 4 l 376 -89 q 451 -122 425 -100 q 478 -187 478 -144 q 419 -278 478 -247 q 249 -314 360 -308 z "},\u0107:{ha:633,x_min:64,x_max:599,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 m 274 792 l 453 1021 l 578 1021 l 585 1008 l 365 792 l 274 792 z "},\u0109:{ha:633,x_min:64,x_max:619,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 m 142 792 l 331 1021 l 431 1021 l 619 792 l 526 792 l 383 935 l 378 935 l 235 792 l 142 792 z "},\u010B:{ha:633,x_min:64,x_max:599,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 m 381 814 q 326 834 347 814 q 304 889 304 854 q 326 943 304 922 q 381 964 347 964 q 435 943 414 964 q 457 889 457 922 q 435 834 457 854 q 381 814 414 814 z "},\u010D:{ha:633,x_min:64,x_max:619,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 m 331 792 l 142 1021 l 235 1021 l 378 878 l 383 878 l 526 1021 l 619 1021 l 431 792 l 331 792 z "},"\u023C":{ha:633,x_min:64,x_max:599,o:"m 233 -71 l 181 -54 l 214 28 q 105 148 146 69 q 64 336 64 226 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 479 678 442 692 l 508 750 l 563 733 l 531 656 q 586 613 563 638 l 529 543 q 513 557 521 550 q 496 569 504 564 l 303 99 q 392 78 343 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 q 264 4 318 -17 l 233 -71 m 182 336 q 201 218 182 271 q 256 132 221 165 l 443 592 q 419 596 432 594 q 393 597 407 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 z "},\u1E0B:{ha:771,x_min:65,x_max:657,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 989 l 657 989 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 m 322 814 q 267 834 289 814 q 246 889 246 854 q 267 943 246 922 q 322 964 289 964 q 377 943 356 964 q 399 889 399 922 q 377 834 399 854 q 322 814 356 814 z "},\u010F:{ha:796,x_min:65,x_max:813,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 989 l 657 989 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 m 736 761 l 731 1056 l 813 1056 l 811 976 l 792 761 l 736 761 z "},\u1E0D:{ha:771,x_min:65,x_max:657,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 989 l 657 989 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},\u1E0F:{ha:771,x_min:65,x_max:657,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 989 l 657 989 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},\u1E11:{ha:771,x_min:65,x_max:657,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 989 l 657 989 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 m 240 -314 l 229 -258 q 349 -235 317 -251 q 381 -189 381 -219 q 357 -146 381 -161 q 274 -122 333 -131 l 335 4 l 408 4 l 368 -89 q 443 -122 417 -100 q 469 -187 469 -144 q 410 -278 469 -247 q 240 -314 351 -308 z "},\u0111:{ha:781,x_min:65,x_max:768,o:"m 344 -17 q 142 69 218 -17 q 65 310 65 156 q 106 483 65 410 q 215 597 147 557 q 358 638 282 638 q 460 617 417 638 q 547 560 503 596 l 543 676 l 543 774 l 290 774 l 290 864 l 543 864 l 543 989 l 657 989 l 657 864 l 768 864 l 768 781 l 657 774 l 657 0 l 560 0 l 551 76 l 547 76 q 457 10 508 38 q 344 -17 406 -17 m 369 79 q 458 102 417 79 q 543 171 500 125 l 543 469 q 460 526 500 510 q 378 542 419 542 q 281 512 325 542 q 210 431 236 482 q 185 311 185 379 q 233 142 185 206 q 369 79 281 79 z "},\u00E8:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 382 792 l 163 1008 l 169 1021 l 294 1021 l 474 792 l 382 792 z "},\u00E9:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 260 792 l 439 1021 l 564 1021 l 571 1008 l 351 792 l 260 792 z "},\u00EA:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 128 792 l 317 1021 l 417 1021 l 606 792 l 513 792 l 369 935 l 364 935 l 221 792 l 128 792 z "},\u1EBD:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 467 801 q 403 819 429 801 q 355 860 376 836 q 313 901 333 883 q 268 918 292 918 q 222 888 238 918 q 203 808 206 857 l 126 813 q 162 948 129 894 q 267 1001 194 1001 q 331 984 304 1001 q 379 943 357 967 q 422 902 401 919 q 467 885 442 885 q 513 916 497 885 q 531 994 528 947 l 607 989 q 572 855 604 908 q 467 801 539 801 z "},\u00EB:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 233 815 q 183 835 203 815 q 164 885 164 856 q 183 934 164 914 q 233 954 203 954 q 282 934 263 954 q 301 885 301 914 q 282 835 301 856 q 233 815 263 815 m 500 815 q 451 835 471 815 q 432 885 432 856 q 451 934 432 914 q 500 954 471 954 q 550 934 531 954 q 569 885 569 914 q 550 835 569 856 q 500 815 531 815 z "},\u0113:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 182 835 l 182 914 l 551 914 l 551 835 l 182 835 z "},\u0115:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 367 790 q 247 822 293 790 q 177 901 200 853 q 150 1000 154 950 l 221 1013 q 264 913 229 958 q 367 868 299 868 q 469 913 435 868 q 513 1013 504 958 l 583 1000 q 558 901 581 950 q 488 822 535 853 q 367 790 442 790 z "},\u0117:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 367 814 q 312 834 333 814 q 290 889 290 854 q 312 943 290 922 q 367 964 333 964 q 422 943 400 964 q 443 889 443 922 q 422 834 443 854 q 367 814 400 814 z "},\u011B:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 317 792 l 128 1021 l 221 1021 l 364 878 l 369 878 l 513 1021 l 606 1021 l 417 792 l 317 792 z "},\u0205:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 229 793 l 78 1011 l 85 1024 l 179 1024 l 299 793 l 229 793 m 454 793 l 301 1011 l 308 1024 l 403 1024 l 522 793 l 454 793 z "},\u0119:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 500 -297 q 401 -267 442 -297 q 360 -169 360 -236 q 385 -84 360 -125 q 454 -8 411 -43 q 388 -17 421 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 490 -49 528 1 q 451 -147 451 -100 q 473 -199 451 -183 q 521 -215 494 -215 q 593 -192 561 -215 l 622 -256 q 567 -285 600 -274 q 500 -297 535 -297 z "},\u1EB9:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 z "},\u1EBB:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 322 778 l 310 833 q 366 865 344 843 q 388 914 388 886 q 272 981 388 976 l 279 1051 q 426 1021 374 1050 q 478 931 478 992 q 431 827 478 865 q 322 778 385 789 z "},\u1EBF:{ha:689,x_min:63,x_max:704,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 147 792 l 317 979 l 417 979 l 586 792 l 499 792 l 369 901 l 364 901 l 235 792 l 147 792 m 503 913 l 604 1078 l 697 1078 l 704 1065 l 569 913 l 503 913 z "},\u1EC1:{ha:689,x_min:29,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 147 792 l 317 979 l 417 979 l 586 792 l 499 792 l 369 901 l 364 901 l 235 792 l 147 792 m 164 913 l 29 1065 l 36 1078 l 129 1078 l 231 913 l 164 913 z "},\u1EC3:{ha:689,x_min:63,x_max:665,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 147 792 l 317 979 l 417 979 l 586 792 l 499 792 l 369 901 l 364 901 l 235 792 l 147 792 m 536 901 l 524 950 q 566 969 550 957 q 582 1004 582 982 q 560 1046 582 1032 q 486 1063 539 1060 l 496 1129 q 622 1099 578 1126 q 665 1017 665 1071 q 625 937 665 961 q 536 901 585 913 z "},\u1EC5:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 147 792 l 317 968 l 417 968 l 586 792 l 499 792 l 369 890 l 364 890 l 235 792 l 147 792 m 463 1003 q 388 1017 419 1003 q 330 1047 356 1032 q 276 1061 304 1061 q 246 1047 256 1061 q 232 1003 236 1032 l 167 1008 q 195 1096 171 1061 q 271 1131 219 1131 q 346 1116 315 1131 q 403 1087 376 1101 q 457 1072 429 1072 q 488 1087 478 1072 q 501 1132 497 1101 l 567 1126 q 538 1038 563 1072 q 463 1003 514 1003 z "},\u1EC7:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 128 792 l 317 1021 l 417 1021 l 606 792 l 513 792 l 369 935 l 364 935 l 221 792 l 128 792 z "},\u1E17:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 182 835 l 182 914 l 551 914 l 551 835 l 182 835 m 274 989 l 408 1157 l 521 1157 l 528 1144 l 357 989 l 274 989 z "},\u01DD:{ha:689,x_min:51,x_max:625,o:"m 333 -17 q 180 25 243 -17 q 84 140 117 67 q 51 311 51 214 q 53 346 51 329 q 57 379 54 363 l 508 379 q 442 542 499 488 q 307 597 386 597 q 215 584 257 597 q 136 547 172 571 l 94 622 q 195 673 139 654 q 321 692 251 692 q 477 650 408 692 q 585 529 546 608 q 625 338 625 450 q 584 148 625 228 q 477 26 543 68 q 333 -17 411 -17 m 332 76 q 447 126 394 76 q 508 289 499 175 l 154 289 q 201 133 154 190 q 332 76 249 76 z "},\u1E1F:{ha:406,x_min:33,x_max:443,o:"m 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 782 q 181 945 133 885 q 331 1006 229 1006 q 392 999 363 1006 q 443 983 421 993 l 418 900 q 342 913 376 913 q 247 782 247 913 l 247 675 l 390 675 l 390 582 l 247 582 l 247 0 l 133 0 m 303 1061 q 247 1082 269 1061 q 224 1136 224 1103 q 247 1189 224 1168 q 303 1210 269 1210 q 359 1189 336 1210 q 382 1136 382 1168 q 359 1082 382 1103 q 303 1061 336 1061 z "},\u01F5:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 254 792 l 433 1021 l 558 1021 l 565 1008 l 346 792 l 254 792 z "},\u011D:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 122 792 l 311 1021 l 411 1021 l 600 792 l 507 792 l 364 935 l 358 935 l 215 792 l 122 792 z "},\u1E21:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 176 835 l 176 914 l 546 914 l 546 835 l 176 835 z "},\u011F:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 361 790 q 241 822 288 790 q 172 901 194 853 q 144 1000 149 950 l 215 1013 q 258 913 224 958 q 361 868 293 868 q 464 913 429 868 q 507 1013 499 958 l 578 1000 q 552 901 575 950 q 483 822 529 853 q 361 790 436 790 z "},\u0121:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 361 814 q 306 834 328 814 q 285 889 285 854 q 306 943 285 922 q 361 964 328 964 q 416 943 394 964 q 438 889 438 922 q 416 834 438 854 q 361 814 394 814 z "},\u01E7:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 311 792 l 122 1021 l 215 1021 l 358 878 l 364 878 l 507 1021 l 600 1021 l 411 792 l 311 792 z "},\u0123:{ha:700,x_min:63,x_max:683,o:"m 342 -311 q 140 -264 218 -311 q 63 -129 63 -217 q 89 -47 63 -86 q 161 24 115 -7 l 161 29 q 119 72 136 44 q 101 139 101 100 q 125 214 101 182 q 175 264 149 246 l 175 269 q 115 344 142 297 q 88 451 88 392 q 122 579 88 525 q 215 663 157 633 q 342 692 274 692 q 394 687 369 692 q 438 675 419 682 l 672 675 l 672 588 l 532 588 l 532 582 q 572 526 556 560 q 589 447 589 493 q 556 324 589 376 q 467 242 522 271 q 342 214 411 214 q 240 238 288 214 q 210 203 222 222 q 197 157 197 185 q 223 104 197 125 q 317 83 249 83 l 447 83 q 624 45 565 83 q 683 -78 683 7 q 642 -193 683 -140 q 524 -278 600 -246 q 342 -311 447 -311 m 342 290 q 442 334 400 290 q 485 451 485 378 q 443 567 485 525 q 342 608 401 608 q 240 567 282 608 q 199 451 199 525 q 241 334 199 378 q 342 290 283 290 m 358 -232 q 514 -190 456 -232 q 572 -94 572 -147 q 537 -29 572 -47 q 436 -11 501 -11 l 319 -11 q 277 -8 300 -11 q 232 0 254 -6 q 179 -56 196 -26 q 163 -114 163 -85 q 215 -200 163 -168 q 358 -232 267 -232 m 415 799 q 289 834 325 810 q 253 906 253 858 q 313 997 253 967 q 482 1033 372 1028 l 493 976 q 374 955 406 971 q 342 910 342 939 q 367 869 342 883 q 440 851 393 856 l 415 799 z "},\u01E5:{ha:803,x_min:65,x_max:769,o:"m 357 -306 q 114 -232 226 -306 l 157 -151 q 257 -199 206 -183 q 357 -214 308 -214 q 495 -164 450 -214 q 542 -31 540 -114 l 544 97 q 455 33 506 60 q 344 7 404 7 q 142 97 218 7 q 65 347 65 188 q 107 530 65 453 q 216 649 149 607 q 360 692 283 692 q 461 672 417 692 q 549 613 506 651 l 551 613 l 561 675 l 657 675 l 657 404 l 769 404 l 769 314 l 657 314 l 657 -29 q 578 -232 657 -158 q 357 -306 500 -306 m 369 101 q 458 124 417 101 q 542 194 499 147 l 542 314 l 385 314 l 385 396 l 542 404 l 542 525 q 459 580 499 564 q 378 596 419 596 q 279 564 324 596 q 209 476 235 532 q 183 349 183 421 q 232 168 183 235 q 369 101 281 101 z "},\u0260:{ha:771,x_min:65,x_max:804,o:"m 357 -306 q 114 -232 226 -306 l 157 -151 q 257 -199 206 -183 q 357 -214 308 -214 q 495 -164 450 -214 q 542 -31 540 -114 l 544 97 q 455 33 506 60 q 344 7 404 7 q 142 97 218 7 q 65 347 65 188 q 107 530 65 453 q 216 649 149 607 q 360 692 283 692 q 460 671 417 692 q 546 614 503 650 l 544 803 q 589 949 544 893 q 726 1006 633 1006 q 769 1001 749 1006 q 804 990 789 997 l 782 903 q 760 910 772 907 q 731 913 747 913 q 673 866 689 913 q 657 763 657 819 l 657 -29 q 578 -232 657 -158 q 357 -306 500 -306 m 369 101 q 458 124 417 101 q 542 194 499 147 l 542 525 q 459 580 499 564 q 378 596 419 596 q 279 564 324 596 q 209 476 235 532 q 183 349 183 421 q 232 168 183 235 q 369 101 281 101 z "},\u0125:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 165 1050 l 356 1238 l 464 1238 l 654 1050 l 557 1050 l 413 1163 l 407 1163 l 263 1050 l 165 1050 z "},\u1E27:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 267 1063 q 218 1082 238 1063 q 199 1131 199 1101 q 218 1180 199 1161 q 267 1199 238 1199 q 316 1180 297 1199 q 335 1131 335 1161 q 316 1082 335 1101 q 267 1063 297 1063 m 553 1063 q 503 1082 522 1063 q 485 1131 485 1101 q 503 1180 485 1161 q 553 1199 522 1199 q 601 1180 582 1199 q 621 1131 621 1161 q 601 1082 621 1101 q 553 1063 582 1063 z "},\u1E23:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 410 1061 q 353 1082 376 1061 q 331 1136 331 1103 q 353 1189 331 1168 q 410 1210 376 1210 q 466 1189 443 1210 q 489 1136 489 1168 q 466 1082 489 1103 q 410 1061 443 1061 z "},\u021F:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 356 1053 l 165 1238 l 263 1238 l 407 1129 l 413 1129 l 557 1238 l 654 1238 l 464 1053 l 356 1053 z "},\u1E25:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},\u1E29:{ha:756,x_min:32,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 43 -314 l 32 -258 q 151 -235 119 -251 q 183 -189 183 -219 q 160 -146 183 -161 q 76 -122 136 -131 l 138 4 l 211 4 l 171 -89 q 246 -122 219 -100 q 272 -187 272 -144 q 213 -278 272 -247 q 43 -314 154 -308 z "},\u1E2B:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},\u1E96:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},\u0127:{ha:774,x_min:15,x_max:672,o:"m 132 0 l 132 774 l 15 774 l 15 857 l 132 864 l 132 989 l 246 989 l 246 864 l 499 864 l 499 774 l 246 774 l 246 667 l 242 526 q 344 606 290 574 q 465 638 397 638 q 622 571 572 638 q 672 375 672 504 l 672 0 l 558 0 l 558 360 q 528 497 558 454 q 431 539 497 539 q 338 513 379 539 q 246 435 296 486 l 246 0 l 132 0 z "},\u00EC:{ha:342,x_min:-33,x_max:278,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 186 792 l -33 1008 l -26 1021 l 99 1021 l 278 792 l 186 792 z "},\u00ED:{ha:342,x_min:64,x_max:375,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 64 792 l 243 1021 l 368 1021 l 375 1008 l 156 792 l 64 792 z "},\u00EE:{ha:342,x_min:-68,x_max:410,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m -68 792 l 121 1021 l 221 1021 l 410 792 l 317 792 l 174 935 l 168 935 l 25 792 l -68 792 z "},\u0129:{ha:342,x_min:-69,x_max:411,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 271 801 q 207 819 233 801 q 159 860 181 836 q 117 901 138 883 q 72 918 96 918 q 26 888 42 918 q 7 808 10 857 l -69 813 q -34 948 -67 894 q 71 1001 -1 1001 q 135 984 108 1001 q 183 943 161 967 q 226 902 206 919 q 271 885 246 885 q 317 916 301 885 q 335 994 332 947 l 411 989 q 376 855 408 908 q 271 801 343 801 z "},\u00EF:{ha:342,x_min:-32,x_max:374,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 38 815 q -12 835 7 815 q -32 885 -32 856 q -12 934 -32 914 q 38 954 7 954 q 86 934 67 954 q 106 885 106 914 q 86 835 106 856 q 38 815 67 815 m 304 815 q 256 835 275 815 q 236 885 236 856 q 256 934 236 914 q 304 954 275 954 q 354 934 335 954 q 374 885 374 914 q 354 835 374 856 q 304 815 335 815 z "},\u012B:{ha:342,x_min:-14,x_max:356,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m -14 835 l -14 914 l 356 914 l 356 835 l -14 835 z "},\u012D:{ha:342,x_min:-46,x_max:388,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 171 790 q 51 822 97 790 q -19 901 4 853 q -46 1000 -42 950 l 25 1013 q 68 913 33 958 q 171 868 103 868 q 274 913 239 868 q 317 1013 308 958 l 388 1000 q 362 901 385 950 q 292 822 339 853 q 171 790 246 790 z "},\u1ECB:{ha:342,x_min:94,x_max:247,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 171 814 q 116 834 138 814 q 94 889 94 854 q 116 943 94 922 q 171 964 138 964 q 226 943 204 964 q 247 889 247 922 q 226 834 247 854 q 171 814 204 814 z "},\u01D0:{ha:342,x_min:-68,x_max:410,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 121 792 l -68 1021 l 25 1021 l 168 878 l 174 878 l 317 1021 l 410 1021 l 221 792 l 121 792 z "},\u0209:{ha:342,x_min:-118,x_max:326,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 33 793 l -118 1011 l -111 1024 l -17 1024 l 103 793 l 33 793 m 258 793 l 106 1011 l 113 1024 l 207 1024 l 326 793 l 258 793 z "},\u012F:{ha:342,x_min:43,x_max:303,o:"m 182 -299 q 83 -267 124 -299 q 43 -169 43 -236 q 73 -72 43 -114 q 136 0 103 -31 l 114 0 l 114 675 l 228 675 l 228 0 q 158 -69 183 -31 q 132 -147 132 -107 q 154 -200 132 -183 q 203 -217 176 -217 q 240 -210 224 -217 q 274 -193 257 -204 l 303 -256 q 249 -286 281 -274 q 182 -299 217 -299 m 172 814 q 117 834 139 814 q 96 889 96 854 q 117 943 96 922 q 172 964 139 964 q 227 943 206 964 q 249 889 249 922 q 227 834 249 854 q 172 814 206 814 z "},\u1EC9:{ha:342,x_min:76,x_max:282,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 126 778 l 114 833 q 170 865 149 843 q 192 914 192 886 q 76 981 192 976 l 83 1051 q 230 1021 178 1050 q 282 931 282 992 q 235 827 282 865 q 126 778 189 789 z "},\u0268:{ha:408,x_min:31,x_max:374,o:"m 147 0 l 147 307 l 31 307 l 31 389 l 147 397 l 147 675 l 261 675 l 261 397 l 374 397 l 374 307 l 261 307 l 261 0 l 147 0 m 203 814 q 148 834 169 814 q 126 889 126 854 q 148 943 126 922 q 203 964 169 964 q 258 943 236 964 q 279 889 279 922 q 258 834 279 854 q 203 814 236 814 z "},\u0131:{ha:342,x_min:114,x_max:228,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 z "},\u0133:{ha:685,x_min:94,x_max:589,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 171 814 q 116 834 138 814 q 94 889 94 854 q 116 943 94 922 q 171 964 138 964 q 226 943 204 964 q 247 889 247 922 q 226 834 247 854 q 171 814 204 814 m 386 -301 q 330 -296 356 -301 q 286 -282 304 -290 l 310 -197 q 340 -205 322 -201 q 374 -208 357 -208 q 440 -173 424 -208 q 457 -76 457 -137 l 457 675 l 571 675 l 571 -76 q 529 -240 571 -179 q 386 -301 488 -301 m 513 814 q 458 834 479 814 q 436 889 436 854 q 458 943 436 922 q 513 964 479 964 q 567 943 546 964 q 589 889 589 922 q 567 834 589 854 q 513 814 546 814 z "},\u0135:{ha:343,x_min:-65,x_max:413,o:"m 44 -301 q -12 -296 14 -301 q -56 -282 -37 -290 l -32 -197 q -2 -205 -19 -201 q 32 -208 15 -208 q 99 -173 82 -208 q 115 -76 115 -137 l 115 675 l 229 675 l 229 -76 q 188 -240 229 -179 q 44 -301 146 -301 m -65 792 l 124 1021 l 224 1021 l 413 792 l 319 792 l 176 935 l 171 935 l 28 792 l -65 792 z "},\u01F0:{ha:343,x_min:-65,x_max:413,o:"m 44 -301 q -12 -296 14 -301 q -56 -282 -37 -290 l -32 -197 q -2 -205 -19 -201 q 32 -208 15 -208 q 99 -173 82 -208 q 115 -76 115 -137 l 115 675 l 229 675 l 229 -76 q 188 -240 229 -179 q 44 -301 146 -301 m 124 792 l -65 1021 l 28 1021 l 171 878 l 176 878 l 319 1021 l 413 1021 l 224 792 l 124 792 z "},"\u0249":{ha:408,x_min:-22,x_max:375,o:"m 78 -301 q 22 -296 47 -301 q -22 -282 -4 -290 l 1 -197 q 31 -205 14 -201 q 65 -208 49 -208 q 132 -173 115 -208 q 149 -76 149 -137 l 149 307 l 31 307 l 31 389 l 147 397 l 149 397 l 149 675 l 263 675 l 263 397 l 375 397 l 375 307 l 263 307 l 263 -76 q 221 -240 263 -179 q 78 -301 179 -301 m 204 814 q 149 834 171 814 q 128 889 128 854 q 149 943 128 922 q 204 964 171 964 q 259 943 238 964 q 281 889 281 922 q 259 834 281 854 q 204 814 238 814 z "},"\u0237":{ha:343,x_min:-56,x_max:229,o:"m 44 -301 q -12 -296 14 -301 q -56 -282 -37 -290 l -32 -197 q -2 -205 -19 -201 q 32 -208 15 -208 q 99 -173 82 -208 q 115 -76 115 -137 l 115 675 l 229 675 l 229 -76 q 188 -240 229 -179 q 44 -301 146 -301 z "},\u0137:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 989 l 228 989 l 228 321 l 231 321 l 517 675 l 644 675 l 419 403 l 675 0 l 550 0 l 353 325 l 228 178 l 228 0 l 114 0 m 261 -314 l 250 -258 q 369 -235 338 -251 q 401 -192 401 -219 q 376 -151 401 -164 q 303 -133 351 -137 l 328 -81 q 454 -115 418 -90 q 490 -187 490 -140 q 431 -278 490 -247 q 261 -314 372 -308 z "},\u1E33:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 989 l 228 989 l 228 321 l 231 321 l 517 675 l 644 675 l 419 403 l 675 0 l 550 0 l 353 325 l 228 178 l 228 0 l 114 0 z "},\u1E35:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 989 l 228 989 l 228 321 l 231 321 l 517 675 l 644 675 l 419 403 l 675 0 l 550 0 l 353 325 l 228 178 l 228 0 l 114 0 z "},\u0138:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 675 l 228 675 l 228 317 l 232 317 l 518 675 l 644 675 l 421 404 l 675 0 l 550 0 l 353 321 l 228 174 l 228 0 l 114 0 z "},\u013A:{ha:354,x_min:67,x_max:396,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 m 67 1050 l 250 1238 l 390 1238 l 396 1225 l 169 1050 l 67 1050 z "},\u013E:{ha:368,x_min:114,x_max:383,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 m 307 761 l 301 1056 l 383 1056 l 382 976 l 363 761 l 307 761 z "},\u013C:{ha:354,x_min:69,x_max:310,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 m 81 -314 l 69 -258 q 189 -235 157 -251 q 221 -192 221 -219 q 196 -151 221 -164 q 122 -133 171 -137 l 147 -81 q 274 -115 238 -90 q 310 -187 310 -140 q 251 -278 310 -247 q 81 -314 192 -308 z "},\u1E37:{ha:354,x_min:114,x_max:300,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 z "},\u1E39:{ha:354,x_min:-14,x_max:361,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 m -14 1090 l -14 1169 l 361 1169 l 361 1090 l -14 1090 z "},\u1E3B:{ha:354,x_min:17,x_max:386,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 z "},\u0142:{ha:414,x_min:-12,x_max:415,o:"m 264 -12 q 172 27 200 -12 q 143 139 143 67 l 143 488 l 32 433 l -12 519 l 143 592 l 143 989 l 257 989 l 257 643 l 371 699 l 415 613 l 257 540 l 257 131 q 267 93 257 104 q 290 82 276 82 q 301 83 296 82 q 314 85 306 83 l 329 -1 q 264 -12 304 -12 z "},\u019A:{ha:407,x_min:31,x_max:371,o:"m 268 -12 q 176 27 204 -12 q 147 139 147 67 l 147 496 l 31 496 l 31 578 l 147 585 l 147 989 l 261 989 l 261 585 l 371 585 l 371 496 l 261 496 l 261 131 q 271 93 261 104 q 294 82 281 82 q 305 83 300 82 q 318 85 310 83 l 333 -1 q 268 -12 308 -12 z "},"\u2C61":{ha:407,x_min:31,x_max:379,o:"m 268 -12 q 176 27 204 -12 q 147 139 147 67 l 147 421 l 31 421 l 31 486 l 147 493 l 147 588 l 31 588 l 31 653 l 147 660 l 147 989 l 261 989 l 261 660 l 379 660 l 379 588 l 261 588 l 261 493 l 379 493 l 379 421 l 261 421 l 261 131 q 271 93 261 104 q 294 82 281 82 q 305 83 300 82 q 318 85 310 83 l 333 -1 q 268 -12 308 -12 z "},\u026B:{ha:489,x_min:-18,x_max:507,o:"m 306 -12 q 213 27 242 -12 q 185 139 185 67 l 185 989 l 299 989 l 299 131 q 308 93 299 104 q 332 82 318 82 q 342 83 338 82 q 356 85 347 83 l 371 -1 q 306 -12 346 -12 m 375 435 q 295 452 329 435 q 233 493 261 469 q 179 534 206 517 q 122 551 153 551 q 76 522 92 551 q 58 444 61 493 l -18 457 q 16 583 -14 532 q 114 635 46 635 q 194 617 160 635 q 256 576 228 600 q 310 535 283 553 q 367 518 336 518 q 413 549 397 518 q 431 625 428 579 l 507 613 q 473 487 503 539 q 375 435 443 435 z "},\u026C:{ha:465,x_min:-4,x_max:457,o:"m 163 529 l 192 529 l 192 539 q 173 603 192 579 q 122 626 154 626 q 88 614 99 626 q 76 582 76 601 q 97 544 76 560 q 163 529 118 529 m 192 0 l 192 439 l 175 439 q 39 479 82 439 q -4 578 -4 519 q 28 660 -4 628 q 111 693 60 693 q 156 685 136 693 q 192 664 176 678 l 192 989 l 306 989 l 306 529 l 457 529 l 457 439 l 306 439 l 306 0 l 192 0 z "},\u0140:{ha:503,x_min:114,x_max:504,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 m 422 365 q 363 390 388 365 q 339 451 339 414 q 363 516 339 492 q 422 540 388 540 q 480 516 456 540 q 504 451 504 492 q 480 390 504 414 q 422 365 456 365 z "},\u1E3F:{ha:1151,x_min:114,x_max:1046,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 319 659 267 626 q 432 692 372 692 q 553 658 510 692 q 618 563 597 624 q 725 656 671 619 q 840 692 779 692 q 995 624 944 692 q 1046 428 1046 557 l 1046 0 l 932 0 l 932 413 q 901 550 932 507 q 807 593 871 593 q 638 489 732 593 l 638 0 l 524 0 l 524 413 q 493 550 524 507 q 397 593 463 593 q 228 489 322 593 l 228 0 l 114 0 m 483 792 l 663 1021 l 788 1021 l 794 1008 l 575 792 l 483 792 z "},\u1E41:{ha:1151,x_min:114,x_max:1046,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 319 659 267 626 q 432 692 372 692 q 553 658 510 692 q 618 563 597 624 q 725 656 671 619 q 840 692 779 692 q 995 624 944 692 q 1046 428 1046 557 l 1046 0 l 932 0 l 932 413 q 901 550 932 507 q 807 593 871 593 q 638 489 732 593 l 638 0 l 524 0 l 524 413 q 493 550 524 507 q 397 593 463 593 q 228 489 322 593 l 228 0 l 114 0 m 590 814 q 535 834 557 814 q 514 889 514 854 q 535 943 514 922 q 590 964 557 964 q 645 943 624 964 q 667 889 667 922 q 645 834 667 854 q 590 814 624 814 z "},\u1E43:{ha:1151,x_min:114,x_max:1046,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 319 659 267 626 q 432 692 372 692 q 553 658 510 692 q 618 563 597 624 q 725 656 671 619 q 840 692 779 692 q 995 624 944 692 q 1046 428 1046 557 l 1046 0 l 932 0 l 932 413 q 901 550 932 507 q 807 593 871 593 q 638 489 732 593 l 638 0 l 524 0 l 524 413 q 493 550 524 507 q 397 593 463 593 q 228 489 322 593 l 228 0 l 114 0 z "},\u01F9:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 425 792 l 206 1008 l 213 1021 l 338 1021 l 517 792 l 425 792 z "},\u0144:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 303 792 l 482 1021 l 607 1021 l 614 1008 l 394 792 l 303 792 z "},\u0148:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 360 792 l 171 1021 l 264 1021 l 407 878 l 413 878 l 556 1021 l 649 1021 l 460 792 l 360 792 z "},\u00F1:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 510 801 q 446 819 472 801 q 398 860 419 836 q 356 901 376 883 q 311 918 335 918 q 265 888 281 918 q 246 808 249 857 l 169 813 q 205 948 172 894 q 310 1001 238 1001 q 374 984 347 1001 q 422 943 400 967 q 465 902 444 919 q 510 885 485 885 q 556 916 540 885 q 574 994 571 947 l 650 989 q 615 855 647 908 q 510 801 582 801 z "},\u1E45:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 410 814 q 355 834 376 814 q 333 889 333 854 q 355 943 333 922 q 410 964 376 964 q 465 943 443 964 q 486 889 486 922 q 465 834 486 854 q 410 814 443 814 z "},\u0146:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 m 264 -314 l 253 -258 q 372 -235 340 -251 q 404 -192 404 -219 q 379 -151 404 -164 q 306 -133 354 -137 l 331 -81 q 457 -115 421 -90 q 493 -187 493 -140 q 434 -278 493 -247 q 264 -314 375 -308 z "},\u1E47:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},\u1E49:{ha:760,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},\u0149:{ha:1068,x_min:71,x_max:963,o:"m 121 604 l 88 664 q 185 742 157 697 q 213 831 213 788 q 203 872 213 857 q 147 850 182 850 q 96 869 121 850 q 71 924 71 888 q 97 983 71 960 q 161 1006 124 1006 q 256 967 215 1006 q 296 856 296 929 q 258 710 296 776 q 121 604 219 643 m 422 0 l 422 675 l 517 675 l 526 578 l 531 578 q 633 659 579 626 q 757 692 688 692 q 913 624 864 692 q 963 428 963 557 l 963 0 l 849 0 l 849 413 q 818 550 849 507 q 721 593 788 593 q 628 567 669 593 q 536 489 588 540 l 536 0 l 422 0 z "},\u014B:{ha:760,x_min:114,x_max:654,o:"m 469 -301 q 413 -296 439 -301 q 371 -282 388 -290 l 393 -197 q 423 -205 406 -201 q 457 -208 440 -208 q 524 -173 507 -208 q 540 -76 540 -137 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 -76 q 613 -240 654 -179 q 469 -301 571 -301 z "},\u019E:{ha:760,x_min:114,x_max:654,o:"m 540 -285 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 -285 l 540 -285 z "},\u00F2:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 392 792 l 172 1008 l 179 1021 l 304 1021 l 483 792 l 392 792 z "},\u00F3:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 269 792 l 449 1021 l 574 1021 l 581 1008 l 361 792 l 269 792 z "},\u00F4:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 138 792 l 326 1021 l 426 1021 l 615 792 l 522 792 l 379 935 l 374 935 l 231 792 l 138 792 z "},\u00F5:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 476 801 q 413 819 439 801 q 365 860 386 836 q 322 901 343 883 q 278 918 301 918 q 231 888 247 918 q 213 808 215 857 l 136 813 q 172 948 139 894 q 276 1001 204 1001 q 340 984 314 1001 q 389 943 367 967 q 431 902 411 919 q 476 885 451 885 q 522 916 507 885 q 540 994 538 947 l 617 989 q 581 855 614 908 q 476 801 549 801 z "},\u00F6:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 243 815 q 193 835 213 815 q 174 885 174 856 q 193 934 174 914 q 243 954 213 954 q 292 934 272 954 q 311 885 311 914 q 292 835 311 856 q 243 815 272 815 m 510 815 q 461 835 481 815 q 442 885 442 856 q 461 934 442 914 q 510 954 481 954 q 560 934 540 954 q 579 885 579 914 q 560 835 579 856 q 510 815 540 815 z "},\u014D:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 192 835 l 192 914 l 561 914 l 561 835 l 192 835 z "},\u014F:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 376 790 q 256 822 303 790 q 187 901 210 853 q 160 1000 164 950 l 231 1013 q 274 913 239 958 q 376 868 308 868 q 479 913 444 868 q 522 1013 514 958 l 593 1000 q 567 901 590 950 q 498 822 544 853 q 376 790 451 790 z "},\u0151:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 221 792 l 340 1021 l 435 1021 l 442 1008 l 289 792 l 221 792 m 444 792 l 564 1021 l 658 1021 l 665 1008 l 514 792 l 444 792 z "},\u01D2:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 326 792 l 138 1021 l 231 1021 l 374 878 l 379 878 l 522 1021 l 615 1021 l 426 792 l 326 792 z "},\u020D:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 239 793 l 88 1011 l 94 1024 l 189 1024 l 308 793 l 239 793 m 464 793 l 311 1011 l 318 1024 l 413 1024 l 532 793 l 464 793 z "},\u01EB:{ha:753,x_min:64,x_max:689,o:"m 394 -299 q 296 -267 336 -299 q 256 -169 256 -236 q 277 -87 256 -129 q 342 -15 299 -46 q 203 37 267 -7 q 102 156 140 81 q 64 336 64 232 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 659 176 689 244 q 580 64 629 108 q 472 -3 531 19 q 373 -68 401 -29 q 344 -147 344 -107 q 367 -200 344 -183 q 415 -217 389 -217 q 453 -210 436 -217 q 486 -193 469 -204 l 515 -256 q 461 -286 493 -274 q 394 -299 429 -299 m 376 76 q 517 148 464 76 q 571 336 571 219 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 148 182 219 q 376 76 290 76 z "},\u1ECD:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 z "},\u1ECF:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 332 778 l 319 833 q 376 865 354 843 q 397 914 397 886 q 282 981 397 976 l 289 1051 q 435 1021 383 1050 q 488 931 488 992 q 441 827 488 865 q 332 778 394 789 z "},\u1ED1:{ha:753,x_min:64,x_max:714,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 157 792 l 326 979 l 426 979 l 596 792 l 508 792 l 379 901 l 374 901 l 244 792 l 157 792 m 513 913 l 614 1078 l 707 1078 l 714 1065 l 579 913 l 513 913 z "},\u1ED3:{ha:753,x_min:39,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 157 792 l 326 979 l 426 979 l 596 792 l 508 792 l 379 901 l 374 901 l 244 792 l 157 792 m 174 913 l 39 1065 l 46 1078 l 139 1078 l 240 913 l 174 913 z "},\u1ED5:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 157 792 l 326 979 l 426 979 l 596 792 l 508 792 l 379 901 l 374 901 l 244 792 l 157 792 m 546 901 l 533 950 q 576 969 560 957 q 592 1004 592 982 q 570 1046 592 1032 q 496 1063 549 1060 l 506 1129 q 631 1099 588 1126 q 675 1017 675 1071 q 635 937 675 961 q 546 901 594 913 z "},\u1ED7:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 157 792 l 326 968 l 426 968 l 596 792 l 508 792 l 379 890 l 374 890 l 244 792 l 157 792 m 472 1003 q 397 1017 429 1003 q 340 1047 365 1032 q 286 1061 314 1061 q 256 1047 265 1061 q 242 1003 246 1032 l 176 1008 q 205 1096 181 1061 q 281 1131 229 1131 q 356 1116 325 1131 q 413 1087 386 1101 q 467 1072 439 1072 q 497 1087 488 1072 q 511 1132 507 1101 l 576 1126 q 548 1038 572 1072 q 472 1003 524 1003 z "},\u1ED9:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 138 792 l 326 1021 l 426 1021 l 615 792 l 522 792 l 379 935 l 374 935 l 231 792 l 138 792 z "},\u1E53:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 192 835 l 192 914 l 561 914 l 561 835 l 192 835 m 283 989 l 418 1157 l 531 1157 l 538 1144 l 367 989 l 283 989 z "},\u00F8:{ha:753,x_min:56,x_max:699,o:"m 178 343 q 206 194 178 257 l 500 553 q 376 601 449 601 q 273 569 318 601 q 203 478 228 536 q 178 343 178 419 m 119 -40 l 56 13 l 132 106 q 81 208 100 150 q 63 336 63 265 q 106 529 63 450 q 222 650 150 608 q 376 692 294 692 q 563 628 482 692 l 635 715 l 699 661 l 622 568 q 673 467 654 525 q 692 336 692 408 q 647 146 692 225 q 531 25 603 67 q 378 -17 460 -17 q 190 46 275 -17 l 119 -40 m 378 75 q 481 108 436 75 q 551 198 525 140 q 576 331 576 256 q 549 479 576 417 l 254 124 q 378 75 306 75 z "},\u01FF:{ha:753,x_min:56,x_max:699,o:"m 178 343 q 206 194 178 257 l 500 553 q 376 601 449 601 q 273 569 318 601 q 203 478 228 536 q 178 343 178 419 m 119 -40 l 56 13 l 132 106 q 81 208 100 150 q 63 336 63 265 q 106 529 63 450 q 222 650 150 608 q 376 692 294 692 q 563 628 482 692 l 635 715 l 699 661 l 622 568 q 673 467 654 525 q 692 336 692 408 q 647 146 692 225 q 531 25 603 67 q 378 -17 460 -17 q 190 46 275 -17 l 119 -40 m 378 75 q 481 108 436 75 q 551 198 525 140 q 576 331 576 256 q 549 479 576 417 l 254 124 q 378 75 306 75 m 269 792 l 449 1021 l 574 1021 l 581 1008 l 361 792 l 269 792 z "},\u0153:{ha:1165,x_min:63,x_max:1114,o:"m 365 -17 q 215 25 285 -17 q 104 146 146 67 q 63 336 63 225 q 105 528 63 449 q 217 650 147 608 q 365 692 286 692 q 513 649 447 692 q 614 524 579 606 q 712 647 650 603 q 850 692 774 692 q 1045 605 976 692 q 1114 374 1114 518 q 1110 307 1114 335 l 668 307 q 700 187 672 239 q 774 106 728 135 q 876 76 821 76 q 967 91 925 76 q 1044 128 1010 106 l 1086 53 q 988 3 1043 22 q 872 -17 933 -17 q 721 28 788 -17 q 615 151 654 72 q 365 -17 538 -17 m 369 81 q 506 151 454 81 q 557 336 557 222 q 506 524 557 453 q 369 596 454 596 q 233 524 285 596 q 181 336 181 453 q 233 151 181 222 q 369 81 285 81 m 668 396 l 1011 396 q 967 547 1011 494 q 846 599 924 599 q 728 542 779 599 q 668 396 678 486 z "},\u028C:{ha:649,x_min:17,x_max:632,o:"m 389 675 l 632 0 l 514 0 l 386 383 q 356 484 372 433 q 324 582 339 535 l 318 582 q 288 484 304 535 q 257 383 272 433 l 129 0 l 17 0 l 256 675 l 389 675 z "},\u0254:{ha:633,x_min:35,x_max:569,o:"m 261 -17 q 139 3 197 -17 q 35 69 81 24 l 83 144 q 159 97 115 115 q 251 78 203 78 q 395 149 339 78 q 451 336 451 221 q 425 474 451 415 q 354 565 399 532 q 253 597 310 597 q 169 582 204 597 q 106 539 135 567 l 47 613 q 138 670 88 649 q 265 692 189 692 q 415 651 346 692 q 527 531 485 610 q 569 336 569 451 q 528 146 569 225 q 417 25 488 67 q 261 -17 347 -17 z "},"\uA74F":{ha:1217,x_min:64,x_max:1153,o:"m 358 -17 q 213 25 281 -17 q 105 146 146 67 q 64 336 64 225 q 105 529 64 450 q 213 650 146 608 q 358 692 281 692 q 503 652 439 692 q 608 515 568 613 q 713 652 649 613 q 858 692 778 692 q 1004 650 938 692 q 1112 529 1071 608 q 1153 336 1153 450 q 1112 146 1153 225 q 1004 25 1071 67 q 858 -17 938 -17 q 713 23 778 -17 q 607 160 647 63 q 503 23 568 63 q 358 -17 439 -17 m 369 78 q 506 149 453 78 q 558 336 558 221 q 506 525 558 453 q 369 597 454 597 q 233 525 286 597 q 181 336 181 453 q 233 149 181 221 q 369 78 286 78 m 847 78 q 983 149 931 78 q 1035 336 1035 221 q 983 525 1035 453 q 847 597 931 597 q 710 525 763 597 q 658 336 658 453 q 710 149 658 221 q 847 78 763 78 z "},\u0223:{ha:744,x_min:60,x_max:685,o:"m 378 78 q 515 129 463 78 q 567 260 567 181 q 505 417 567 361 q 333 513 443 472 q 174 274 174 429 q 232 133 174 188 q 378 78 290 78 m 375 -17 q 213 19 285 -17 q 101 119 142 56 q 60 267 60 183 q 117 444 60 369 q 263 551 174 518 l 263 557 q 142 667 188 603 q 97 818 97 731 q 110 922 97 879 q 150 1006 124 965 l 247 975 q 210 825 210 910 q 238 719 210 763 q 313 647 265 676 q 417 592 360 617 q 544 817 544 682 q 535 890 544 854 q 507 958 526 926 l 597 993 q 637 909 625 949 q 649 821 649 869 q 602 666 649 732 q 494 560 556 600 l 494 554 q 588 490 544 529 q 658 396 631 451 q 685 264 685 340 q 646 118 685 182 q 538 19 607 54 q 375 -17 468 -17 z "},\u01A1:{ha:753,x_min:64,x_max:728,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 508 663 446 692 q 597 706 565 674 q 628 794 628 738 q 607 871 628 833 l 694 913 q 718 862 708 890 q 728 803 728 833 q 706 711 728 749 q 649 651 683 674 q 575 617 614 628 q 658 501 628 572 q 689 336 689 431 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 z "},\u1EDB:{ha:753,x_min:64,x_max:728,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 508 663 446 692 q 597 706 565 674 q 628 794 628 738 q 607 871 628 833 l 694 913 q 718 862 708 890 q 728 803 728 833 q 706 711 728 749 q 649 651 683 674 q 575 617 614 628 q 658 501 628 572 q 689 336 689 431 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 269 792 l 449 1021 l 574 1021 l 581 1008 l 361 792 l 269 792 z "},\u1EDD:{ha:753,x_min:64,x_max:728,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 508 663 446 692 q 597 706 565 674 q 628 794 628 738 q 607 871 628 833 l 694 913 q 718 862 708 890 q 728 803 728 833 q 706 711 728 749 q 649 651 683 674 q 575 617 614 628 q 658 501 628 572 q 689 336 689 431 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 392 792 l 172 1008 l 179 1021 l 304 1021 l 483 792 l 392 792 z "},\u1EDF:{ha:753,x_min:64,x_max:728,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 508 663 446 692 q 597 706 565 674 q 628 794 628 738 q 607 871 628 833 l 694 913 q 718 862 708 890 q 728 803 728 833 q 706 711 728 749 q 649 651 683 674 q 575 617 614 628 q 658 501 628 572 q 689 336 689 431 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 332 778 l 319 833 q 376 865 354 843 q 397 914 397 886 q 282 981 397 976 l 289 1051 q 435 1021 383 1050 q 488 931 488 992 q 441 827 488 865 q 332 778 394 789 z "},\u1EE1:{ha:753,x_min:64,x_max:728,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 508 663 446 692 q 597 706 565 674 q 628 794 628 738 q 607 871 628 833 l 694 913 q 718 862 708 890 q 728 803 728 833 q 706 711 728 749 q 649 651 683 674 q 575 617 614 628 q 658 501 628 572 q 689 336 689 431 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 456 801 q 392 819 418 801 q 344 860 365 836 q 301 901 322 883 q 257 918 281 918 q 210 888 226 918 q 192 808 194 857 l 115 813 q 151 948 118 894 q 256 1001 183 1001 q 319 984 293 1001 q 368 943 346 967 q 410 902 390 919 q 456 885 431 885 q 501 916 486 885 q 519 994 517 947 l 596 989 q 560 855 593 908 q 456 801 528 801 z "},\u1EE3:{ha:753,x_min:64,x_max:728,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 508 663 446 692 q 597 706 565 674 q 628 794 628 738 q 607 871 628 833 l 694 913 q 718 862 708 890 q 728 803 728 833 q 706 711 728 749 q 649 651 683 674 q 575 617 614 628 q 658 501 628 572 q 689 336 689 431 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 z "},\u1E57:{ha:771,x_min:114,x_max:704,o:"m 114 -285 l 114 675 l 208 675 l 218 597 l 222 597 q 323 664 268 636 q 438 692 378 692 q 636 598 568 692 q 704 347 704 504 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 q 319 4 365 -17 q 225 61 272 25 l 228 -57 l 228 -285 l 114 -285 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 322 572 365 596 q 228 504 278 549 l 228 150 q 317 95 274 111 q 393 79 360 79 m 410 814 q 355 834 376 814 q 333 889 333 854 q 355 943 333 922 q 410 964 376 964 q 465 943 443 964 q 486 889 486 922 q 465 834 486 854 q 410 814 443 814 z "},\u0155:{ha:482,x_min:114,x_max:513,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 m 201 792 l 381 1021 l 506 1021 l 513 1008 l 293 792 l 201 792 z "},\u0159:{ha:482,x_min:69,x_max:547,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 m 258 792 l 69 1021 l 163 1021 l 306 878 l 311 878 l 454 1021 l 547 1021 l 358 792 l 258 792 z "},\u1E59:{ha:482,x_min:114,x_max:486,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 m 308 814 q 253 834 275 814 q 232 889 232 854 q 253 943 232 922 q 308 964 275 964 q 363 943 342 964 q 385 889 385 922 q 363 834 385 854 q 308 814 342 814 z "},\u0157:{ha:482,x_min:36,x_max:486,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 m 47 -314 l 36 -258 q 156 -235 124 -251 q 188 -192 188 -219 q 163 -151 188 -164 q 89 -133 138 -137 l 114 -81 q 240 -115 204 -90 q 276 -187 276 -140 q 217 -278 276 -247 q 47 -314 158 -308 z "},\u1E5B:{ha:482,x_min:92,x_max:486,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 z "},\u1E5D:{ha:482,x_min:92,x_max:493,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 m 124 835 l 124 914 l 493 914 l 493 835 l 124 835 z "},\u1E5F:{ha:482,x_min:-17,x_max:486,o:"m 114 0 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 461 581 q 433 587 446 585 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 0 l 114 0 z "},\u015B:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 192 792 l 371 1021 l 496 1021 l 503 1008 l 283 792 l 192 792 z "},\u015D:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 60 792 l 249 1021 l 349 1021 l 538 792 l 444 792 l 301 935 l 296 935 l 153 792 l 60 792 z "},\u1E61:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 299 814 q 244 834 265 814 q 222 889 222 854 q 244 943 222 922 q 299 964 265 964 q 353 943 332 964 q 375 889 375 922 q 353 834 375 854 q 299 814 332 814 z "},\u0161:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 249 792 l 60 1021 l 153 1021 l 296 878 l 301 878 l 444 1021 l 538 1021 l 349 792 l 249 792 z "},\u015F:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 176 -314 l 165 -258 q 285 -235 253 -251 q 317 -189 317 -219 q 293 -146 317 -161 q 210 -122 269 -131 l 271 4 l 344 4 l 304 -89 q 379 -122 353 -100 q 406 -187 406 -144 q 347 -278 406 -247 q 176 -314 288 -308 z "},\u0219:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 176 -314 l 165 -258 q 285 -235 253 -251 q 317 -192 317 -219 q 292 -151 317 -164 q 218 -133 267 -137 l 243 -81 q 369 -115 333 -90 q 406 -187 406 -140 q 347 -278 406 -247 q 176 -314 288 -308 z "},\u1E63:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 z "},\u1E67:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 m 249 792 l 74 986 l 161 986 l 296 869 l 301 869 l 436 986 l 524 986 l 349 792 l 249 792 m 299 1001 q 249 1021 269 1001 q 229 1071 229 1040 q 249 1121 229 1101 q 299 1140 269 1140 q 348 1121 328 1140 q 368 1071 368 1101 q 348 1021 368 1040 q 299 1001 328 1001 z "},\u00DF:{ha:800,x_min:114,x_max:760,o:"m 538 -17 q 434 0 482 -17 q 343 54 386 17 l 386 124 q 459 84 422 96 q 535 72 496 72 q 622 106 592 72 q 651 183 651 140 q 626 261 651 232 q 562 311 600 290 q 485 355 524 332 q 420 413 446 378 q 394 506 394 447 q 415 587 394 553 q 461 651 435 621 q 508 713 488 681 q 528 789 528 746 q 494 876 528 842 q 399 911 460 911 q 274 856 321 911 q 228 692 228 801 l 228 0 l 114 0 l 114 714 q 190 924 114 844 q 400 1003 265 1003 q 530 975 476 1003 q 612 901 583 947 q 640 800 640 856 q 619 711 640 749 q 572 644 599 674 q 524 585 544 614 q 503 519 503 556 q 528 455 503 479 q 593 410 554 431 q 670 365 632 390 q 734 299 708 339 q 760 190 760 258 q 700 43 760 103 q 538 -17 640 -17 z "},\u017F:{ha:376,x_min:42,x_max:443,o:"m 133 0 l 133 582 l 42 582 l 42 668 l 133 675 l 133 782 q 181 945 133 885 q 331 1006 229 1006 q 392 999 363 1006 q 443 983 421 993 l 418 897 q 342 913 379 913 q 247 782 247 913 l 247 0 l 133 0 z "},\u0165:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 m 356 761 l 350 1056 l 432 1056 l 431 976 l 411 761 l 356 761 z "},\u1E6B:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 m 206 1000 q 151 1020 172 1000 q 129 1075 129 1040 q 151 1129 129 1108 q 206 1150 172 1150 q 260 1129 239 1150 q 282 1075 282 1108 q 260 1020 282 1040 q 206 1000 239 1000 z "},\u0163:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 m 178 -314 l 167 -258 q 286 -235 254 -251 q 318 -189 318 -219 q 294 -146 318 -161 q 211 -122 271 -131 l 272 4 l 346 4 l 306 -89 q 381 -122 354 -100 q 407 -187 407 -144 q 348 -278 407 -247 q 178 -314 289 -308 z "},\u021B:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 m 178 -314 l 167 -258 q 286 -235 254 -251 q 318 -192 318 -219 q 293 -151 318 -164 q 219 -133 268 -137 l 244 -81 q 371 -115 335 -90 q 407 -187 407 -140 q 348 -278 407 -247 q 178 -314 289 -308 z "},\u1E6D:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 z "},\u1E6F:{ha:469,x_min:33,x_max:483,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 z "},\u1E97:{ha:469,x_min:3,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 m 72 1001 q 22 1022 42 1001 q 3 1071 3 1042 q 22 1120 3 1100 q 72 1140 42 1140 q 121 1120 101 1140 q 140 1071 140 1100 q 121 1022 140 1042 q 72 1001 101 1001 m 339 1001 q 290 1022 310 1001 q 271 1071 271 1042 q 290 1120 271 1100 q 339 1140 310 1140 q 389 1120 369 1140 q 408 1071 408 1100 q 389 1022 408 1042 q 339 1001 369 1001 z "},\u0167:{ha:469,x_min:33,x_max:453,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 303 l 33 303 l 33 386 l 133 393 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 393 l 432 393 l 432 303 l 249 303 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 z "},"\u2C66":{ha:469,x_min:29,x_max:489,o:"m 326 -12 q 213 16 254 -12 q 151 94 171 44 l 76 -43 l 29 -17 l 135 178 q 133 194 133 186 q 133 213 133 203 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 404 675 l 442 744 l 489 719 l 431 611 l 431 582 l 414 582 l 249 275 l 249 210 q 272 115 249 149 q 353 81 294 81 q 390 84 371 81 q 429 97 410 88 l 453 17 q 394 -5 426 3 q 326 -12 361 -12 m 249 582 l 249 389 l 354 582 l 249 582 z "},\u00F9:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 392 792 l 172 1008 l 179 1021 l 304 1021 l 483 792 l 392 792 z "},\u00FA:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 269 792 l 449 1021 l 574 1021 l 581 1008 l 361 792 l 269 792 z "},\u00FB:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 138 792 l 326 1021 l 426 1021 l 615 792 l 522 792 l 379 935 l 374 935 l 231 792 l 138 792 z "},\u0169:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 476 801 q 413 819 439 801 q 365 860 386 836 q 322 901 343 883 q 278 918 301 918 q 231 888 247 918 q 213 808 215 857 l 136 813 q 172 948 139 894 q 276 1001 204 1001 q 340 984 314 1001 q 389 943 367 967 q 431 902 411 919 q 476 885 451 885 q 522 916 507 885 q 540 994 538 947 l 617 989 q 581 855 614 908 q 476 801 549 801 z "},\u00FC:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 243 815 q 193 835 213 815 q 174 885 174 856 q 193 934 174 914 q 243 954 213 954 q 292 934 272 954 q 311 885 311 914 q 292 835 311 856 q 243 815 272 815 m 510 815 q 461 835 481 815 q 442 885 442 856 q 461 934 442 914 q 510 954 481 954 q 560 934 540 954 q 579 885 579 914 q 560 835 579 856 q 510 815 540 815 z "},\u016B:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 192 835 l 192 914 l 561 914 l 561 835 l 192 835 z "},\u016D:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 376 790 q 256 822 303 790 q 187 901 210 853 q 160 1000 164 950 l 231 1013 q 274 913 239 958 q 376 868 308 868 q 479 913 444 868 q 522 1013 514 958 l 593 1000 q 567 901 590 950 q 498 822 544 853 q 376 790 451 790 z "},\u016F:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 376 769 q 265 808 307 769 q 224 907 224 847 q 265 1004 224 965 q 376 1043 307 1043 q 488 1004 446 1043 q 529 907 529 965 q 488 808 529 847 q 376 769 446 769 m 376 821 q 433 844 410 821 q 456 907 456 868 q 433 969 456 946 q 376 992 410 992 q 320 969 343 992 q 297 907 297 946 q 320 844 297 868 q 376 821 343 821 z "},\u0171:{ha:756,x_min:104,x_max:665,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 221 792 l 340 1021 l 435 1021 l 442 1008 l 289 792 l 221 792 m 444 792 l 564 1021 l 658 1021 l 665 1008 l 514 792 l 444 792 z "},\u01D4:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 326 792 l 138 1021 l 231 1021 l 374 878 l 379 878 l 522 1021 l 615 1021 l 426 792 l 326 792 z "},\u0173:{ha:756,x_min:104,x_max:700,o:"m 579 -299 q 481 -267 521 -299 q 440 -169 440 -236 q 475 -67 440 -114 q 549 6 510 -21 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 278 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 q 560 -66 590 -24 q 529 -147 529 -108 q 551 -200 529 -183 q 600 -217 574 -217 q 638 -210 621 -217 q 671 -193 654 -204 l 700 -256 q 646 -286 678 -274 q 579 -299 614 -299 z "},\u01D6:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 243 815 q 195 835 214 815 q 176 882 176 856 q 195 930 176 910 q 243 950 214 950 q 290 930 271 950 q 310 882 310 910 q 290 835 310 856 q 243 815 271 815 m 510 815 q 463 835 482 815 q 443 882 443 856 q 463 930 443 910 q 510 950 482 950 q 558 930 539 950 q 576 882 576 910 q 558 835 576 856 q 510 815 539 815 m 190 1042 l 190 1111 l 561 1111 l 561 1042 l 190 1042 z "},\u01D8:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 243 815 q 195 835 214 815 q 176 882 176 856 q 195 930 176 910 q 243 950 214 950 q 290 930 271 950 q 310 882 310 910 q 290 835 310 856 q 243 815 271 815 m 510 815 q 463 835 482 815 q 443 882 443 856 q 463 930 443 910 q 510 950 482 950 q 558 930 539 950 q 576 882 576 910 q 558 835 576 856 q 510 815 539 815 m 292 989 l 422 1157 l 531 1157 l 538 1144 l 372 989 l 292 989 z "},\u01DA:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 243 815 q 195 835 214 815 q 176 882 176 856 q 195 931 176 911 q 243 950 214 950 q 290 931 271 950 q 310 882 310 911 q 290 835 310 856 q 243 815 271 815 m 510 815 q 463 835 482 815 q 443 882 443 856 q 463 931 443 911 q 510 950 482 950 q 558 931 539 950 q 576 882 576 911 q 558 835 576 856 q 510 815 539 815 m 326 976 l 157 1128 l 247 1128 l 374 1043 l 379 1043 l 506 1128 l 596 1128 l 426 976 l 326 976 z "},\u01DC:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 243 815 q 195 835 214 815 q 176 882 176 856 q 195 930 176 910 q 243 950 214 950 q 290 930 271 950 q 310 882 310 910 q 290 835 310 856 q 243 815 271 815 m 510 815 q 463 835 482 815 q 443 882 443 856 q 463 930 443 910 q 510 950 482 950 q 558 930 539 950 q 576 882 576 910 q 558 835 576 856 q 510 815 539 815 m 381 989 l 215 1144 l 222 1157 l 331 1157 l 461 989 l 381 989 z "},\u1E73:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 z "},\u1EE5:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 z "},\u1EE7:{ha:756,x_min:104,x_max:642,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 642 675 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 332 778 l 319 833 q 376 865 354 843 q 397 914 397 886 q 282 981 397 976 l 289 1051 q 435 1021 383 1050 q 488 931 488 992 q 441 827 488 865 q 332 778 394 789 z "},\u01B0:{ha:756,x_min:104,x_max:775,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 557 675 q 640 711 606 682 q 674 808 674 740 q 668 848 674 828 q 654 885 663 868 l 740 926 q 765 876 756 904 q 775 817 775 847 q 755 724 775 761 q 704 665 735 686 q 642 632 674 643 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 z "},\u1EE9:{ha:756,x_min:104,x_max:775,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 557 675 q 640 711 606 682 q 674 808 674 740 q 668 848 674 828 q 654 885 663 868 l 740 926 q 765 876 756 904 q 775 817 775 847 q 755 724 775 761 q 704 665 735 686 q 642 632 674 643 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 268 792 l 447 1021 l 572 1021 l 579 1008 l 360 792 l 268 792 z "},\u1EEB:{ha:756,x_min:104,x_max:775,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 557 675 q 640 711 606 682 q 674 808 674 740 q 668 848 674 828 q 654 885 663 868 l 740 926 q 765 876 756 904 q 775 817 775 847 q 755 724 775 761 q 704 665 735 686 q 642 632 674 643 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 390 792 l 171 1008 l 178 1021 l 303 1021 l 482 792 l 390 792 z "},\u1EED:{ha:756,x_min:104,x_max:775,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 557 675 q 640 711 606 682 q 674 808 674 740 q 668 848 674 828 q 654 885 663 868 l 740 926 q 765 876 756 904 q 775 817 775 847 q 755 724 775 761 q 704 665 735 686 q 642 632 674 643 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 331 778 l 318 833 q 374 865 353 843 q 396 914 396 886 q 281 981 396 976 l 288 1051 q 434 1021 382 1050 q 486 931 486 992 q 440 827 486 865 q 331 778 393 789 z "},\u1EEF:{ha:756,x_min:104,x_max:775,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 557 675 q 640 711 606 682 q 674 808 674 740 q 668 848 674 828 q 654 885 663 868 l 740 926 q 765 876 756 904 q 775 817 775 847 q 755 724 775 761 q 704 665 735 686 q 642 632 674 643 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 m 469 801 q 406 819 432 801 q 358 860 379 836 q 315 901 336 883 q 271 918 294 918 q 224 888 240 918 q 206 808 208 857 l 129 813 q 165 948 132 894 q 269 1001 197 1001 q 333 984 307 1001 q 382 943 360 967 q 424 902 404 919 q 469 885 444 885 q 515 916 500 885 q 533 994 531 947 l 610 989 q 574 855 607 908 q 469 801 542 801 z "},\u1EF1:{ha:756,x_min:104,x_max:775,o:"m 311 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 528 196 481 136 l 528 675 l 557 675 q 640 711 606 682 q 674 808 674 740 q 668 848 674 828 q 654 885 663 868 l 740 926 q 765 876 756 904 q 775 817 775 847 q 755 724 775 761 q 704 665 735 686 q 642 632 674 643 l 642 0 l 547 0 l 538 106 l 533 106 q 433 17 486 50 q 311 -17 381 -17 z "},\u1E7F:{ha:649,x_min:17,x_max:632,o:"m 260 0 l 17 675 l 135 675 l 263 292 q 294 192 278 242 q 325 93 310 142 l 331 93 q 362 192 346 142 q 392 292 378 242 l 519 675 l 632 675 l 393 0 l 260 0 z "},\u1E81:{ha:997,x_min:33,x_max:965,o:"m 221 0 l 33 675 l 153 675 l 251 285 q 272 193 263 239 q 290 93 282 147 l 296 93 q 317 193 307 147 q 339 285 328 239 l 439 675 l 564 675 l 665 285 q 689 193 678 239 q 710 93 700 147 l 715 93 q 736 193 726 147 q 756 285 746 239 l 854 675 l 965 675 l 783 0 l 635 0 l 544 361 q 522 455 532 408 q 501 561 513 501 l 496 561 q 476 454 486 501 q 453 361 465 407 l 363 0 l 221 0 m 515 792 l 296 1008 l 303 1021 l 428 1021 l 607 792 l 515 792 z "},\u1E83:{ha:997,x_min:33,x_max:965,o:"m 221 0 l 33 675 l 153 675 l 251 285 q 272 193 263 239 q 290 93 282 147 l 296 93 q 317 193 307 147 q 339 285 328 239 l 439 675 l 564 675 l 665 285 q 689 193 678 239 q 710 93 700 147 l 715 93 q 736 193 726 147 q 756 285 746 239 l 854 675 l 965 675 l 783 0 l 635 0 l 544 361 q 522 455 532 408 q 501 561 513 501 l 496 561 q 476 454 486 501 q 453 361 465 407 l 363 0 l 221 0 m 393 792 l 572 1021 l 697 1021 l 704 1008 l 485 792 l 393 792 z "},\u0175:{ha:997,x_min:33,x_max:965,o:"m 221 0 l 33 675 l 153 675 l 251 285 q 272 193 263 239 q 290 93 282 147 l 296 93 q 317 193 307 147 q 339 285 328 239 l 439 675 l 564 675 l 665 285 q 689 193 678 239 q 710 93 700 147 l 715 93 q 736 193 726 147 q 756 285 746 239 l 854 675 l 965 675 l 783 0 l 635 0 l 544 361 q 522 455 532 408 q 501 561 513 501 l 496 561 q 476 454 486 501 q 453 361 465 407 l 363 0 l 221 0 m 261 792 l 450 1021 l 550 1021 l 739 792 l 646 792 l 503 935 l 497 935 l 354 792 l 261 792 z "},\u1E85:{ha:997,x_min:33,x_max:965,o:"m 221 0 l 33 675 l 153 675 l 251 285 q 272 193 263 239 q 290 93 282 147 l 296 93 q 317 193 307 147 q 339 285 328 239 l 439 675 l 564 675 l 665 285 q 689 193 678 239 q 710 93 700 147 l 715 93 q 736 193 726 147 q 756 285 746 239 l 854 675 l 965 675 l 783 0 l 635 0 l 544 361 q 522 455 532 408 q 501 561 513 501 l 496 561 q 476 454 486 501 q 453 361 465 407 l 363 0 l 221 0 m 367 815 q 317 835 336 815 q 297 885 297 856 q 317 934 297 914 q 367 954 336 954 q 415 934 396 954 q 435 885 435 914 q 415 835 435 856 q 367 815 396 815 m 633 815 q 585 835 604 815 q 565 885 565 856 q 585 934 565 914 q 633 954 604 954 q 683 934 664 954 q 703 885 703 914 q 683 835 703 856 q 633 815 664 815 z "},\u1EF3:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 350 792 l 131 1008 l 138 1021 l 263 1021 l 442 792 l 350 792 z "},\u00FD:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 228 792 l 407 1021 l 532 1021 l 539 1008 l 319 792 l 228 792 z "},\u0177:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 96 792 l 285 1021 l 385 1021 l 574 792 l 481 792 l 338 935 l 332 935 l 189 792 l 96 792 z "},\u1EF9:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 435 801 q 371 819 397 801 q 323 860 344 836 q 281 901 301 883 q 236 918 260 918 q 190 888 206 918 q 171 808 174 857 l 94 813 q 130 948 97 894 q 235 1001 163 1001 q 299 984 272 1001 q 347 943 325 967 q 390 902 369 919 q 435 885 410 885 q 481 916 465 885 q 499 994 496 947 l 575 989 q 540 855 572 908 q 435 801 507 801 z "},\u00FF:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 201 815 q 151 835 171 815 q 132 885 132 856 q 151 934 132 914 q 201 954 171 954 q 250 934 231 954 q 269 885 269 914 q 250 835 269 856 q 201 815 231 815 m 468 815 q 419 835 439 815 q 400 885 400 856 q 419 934 400 914 q 468 954 439 954 q 518 934 499 954 q 538 885 538 914 q 518 835 538 856 q 468 815 499 815 z "},\u1E8F:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 335 814 q 280 834 301 814 q 258 889 258 854 q 280 943 258 922 q 335 964 301 964 q 390 943 368 964 q 411 889 411 922 q 390 834 411 854 q 335 814 368 814 z "},\u1EF5:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 z "},\u1EF7:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 293 778 l 281 833 q 337 865 315 843 q 358 914 358 886 q 243 981 358 976 l 250 1051 q 397 1021 344 1050 q 449 931 449 992 q 402 827 449 865 q 293 778 356 789 z "},\u017A:{ha:590,x_min:43,x_max:554,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 m 214 792 l 393 1021 l 518 1021 l 525 1008 l 306 792 l 214 792 z "},\u1E91:{ha:590,x_min:43,x_max:560,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 m 82 792 l 271 1021 l 371 1021 l 560 792 l 467 792 l 324 935 l 318 935 l 175 792 l 82 792 z "},\u017C:{ha:590,x_min:43,x_max:554,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 m 321 814 q 266 834 288 814 q 244 889 244 854 q 266 943 244 922 q 321 964 288 964 q 376 943 354 964 q 397 889 397 922 q 376 834 397 854 q 321 814 354 814 z "},\u017E:{ha:590,x_min:43,x_max:560,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 m 271 792 l 82 1021 l 175 1021 l 318 878 l 324 878 l 467 1021 l 560 1021 l 371 792 l 271 792 z "},\u1E93:{ha:590,x_min:43,x_max:554,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 z "},\u1E95:{ha:590,x_min:43,x_max:554,o:"m 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 554 93 l 554 0 l 43 0 z "},\u00F0:{ha:756,x_min:74,x_max:674,o:"m 182 308 q 208 187 182 239 q 279 106 235 135 q 376 78 324 78 q 517 154 471 78 q 564 353 564 231 q 563 392 564 372 q 561 429 563 411 q 469 511 515 490 q 376 532 424 532 q 233 468 283 532 q 182 308 182 404 m 374 -17 q 227 23 296 -17 q 116 135 158 63 q 74 308 74 208 q 112 473 74 403 q 215 582 150 543 q 361 621 281 621 q 462 599 414 621 q 544 531 510 578 q 486 678 525 614 q 392 793 447 742 l 182 685 l 142 761 l 317 851 q 236 900 279 878 q 146 943 193 922 l 196 1015 q 307 965 253 993 q 408 900 361 936 l 603 1000 l 647 924 l 482 839 q 621 640 568 757 q 674 357 674 522 q 636 162 674 246 q 531 31 599 78 q 374 -17 464 -17 z "},\u00FE:{ha:771,x_min:114,x_max:704,o:"m 114 -285 l 114 989 l 228 989 l 228 721 l 226 604 q 324 666 271 640 q 432 692 376 692 q 635 598 565 692 q 704 347 704 504 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 q 318 3 364 -17 q 226 58 272 24 l 228 -57 l 228 -285 l 114 -285 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 322 572 365 596 q 228 504 278 549 l 228 150 q 317 95 274 111 q 393 79 360 79 z "},\u01BF:{ha:753,x_min:114,x_max:688,o:"m 114 -285 l 114 675 l 208 675 l 218 567 l 222 567 q 331 660 275 629 q 458 692 386 692 q 627 628 567 692 q 688 457 688 564 q 630 253 688 349 q 469 88 572 158 q 226 -17 365 18 l 228 -132 l 228 -285 l 114 -285 m 228 83 q 405 166 328 111 q 526 292 482 221 q 569 440 569 364 q 535 552 569 508 q 429 596 501 596 q 336 569 383 596 q 228 465 289 543 l 228 83 z "},\u021D:{ha:601,x_min:17,x_max:549,o:"m 119 -301 l 83 -224 q 292 -115 215 -168 q 403 -8 369 -61 q 436 94 436 44 q 401 183 436 151 q 304 214 365 214 q 241 206 274 214 q 168 175 208 197 l 131 239 q 292 341 238 299 q 367 419 347 383 q 386 492 386 454 q 357 573 386 544 q 278 601 328 601 q 173 575 219 601 q 69 496 126 549 l 17 557 q 151 659 86 626 q 303 692 215 692 q 446 644 393 692 q 499 518 499 597 q 458 397 499 450 q 333 292 417 344 q 489 244 429 292 q 549 103 549 197 q 447 -115 549 -18 q 119 -301 344 -211 z "},\u0292:{ha:590,x_min:4,x_max:564,o:"m 278 -301 q 113 -268 176 -301 q 4 -193 49 -235 l 61 -121 q 146 -181 97 -154 q 268 -207 194 -207 q 359 -181 318 -207 q 424 -109 400 -156 q 449 0 449 -62 q 401 135 449 86 q 263 183 353 183 q 216 178 233 183 q 175 161 199 172 l 129 224 l 396 582 l 61 582 l 61 675 l 535 675 l 535 614 l 274 263 q 428 241 364 272 q 528 147 493 210 q 564 3 564 85 q 524 -162 564 -94 q 418 -266 483 -231 q 278 -301 353 -301 z "},\u01EF:{ha:590,x_min:4,x_max:564,o:"m 278 -301 q 113 -268 176 -301 q 4 -193 49 -235 l 61 -121 q 146 -181 97 -154 q 268 -207 194 -207 q 359 -181 318 -207 q 424 -109 400 -156 q 449 0 449 -62 q 401 135 449 86 q 263 183 353 183 q 216 178 233 183 q 175 161 199 172 l 129 224 l 396 582 l 61 582 l 61 675 l 535 675 l 535 614 l 274 263 q 428 241 364 272 q 528 147 493 210 q 564 3 564 85 q 524 -162 564 -94 q 418 -266 483 -231 q 278 -301 353 -301 m 251 792 l 63 1021 l 156 1021 l 299 878 l 304 878 l 447 1021 l 540 1021 l 351 792 l 251 792 z "},\u0259:{ha:689,x_min:51,x_max:625,o:"m 333 -17 q 180 25 243 -17 q 84 140 117 67 q 51 311 51 214 q 53 346 51 329 q 57 379 54 363 l 508 379 q 442 542 499 488 q 307 597 386 597 q 215 584 257 597 q 136 547 172 571 l 94 622 q 195 673 139 654 q 321 692 251 692 q 477 650 408 692 q 585 529 546 608 q 625 338 625 450 q 584 148 625 228 q 477 26 543 68 q 333 -17 411 -17 m 332 76 q 447 126 394 76 q 508 289 499 175 l 154 289 q 201 133 154 190 q 332 76 249 76 z "},"\uA77A":{ha:740,x_min:74,x_max:672,o:"m 374 -17 q 224 24 293 -17 q 115 139 156 64 q 74 318 74 214 q 117 494 74 415 q 243 621 161 572 q 438 674 325 669 q 288 810 374 747 q 101 919 201 872 l 163 1000 q 357 886 265 950 q 519 744 449 822 q 631 572 590 665 q 672 372 672 479 q 595 85 672 188 q 374 -17 518 -17 m 182 321 q 238 142 182 207 q 374 78 294 78 q 513 149 461 78 q 564 358 564 221 q 545 483 564 422 q 492 599 526 543 q 315 554 383 593 q 215 454 247 515 q 182 321 182 393 z "},"\uA77C":{ha:510,x_min:114,x_max:514,o:"m 114 -285 l 114 675 l 208 675 l 218 553 l 222 553 q 311 654 257 617 q 428 692 365 692 q 474 687 453 692 q 514 672 494 682 l 486 574 q 453 585 469 581 q 413 589 436 589 q 314 554 365 589 q 228 433 263 519 l 228 92 l 465 92 l 465 -1 l 228 -1 l 228 -285 l 114 -285 z "},"\u1D79":{ha:672,x_min:42,x_max:654,o:"m 342 -306 q 200 -282 264 -306 q 99 -212 136 -258 q 63 -100 63 -167 q 110 31 63 -25 q 236 126 158 88 l 236 132 q 135 228 176 174 q 93 371 93 282 q 129 494 93 442 q 225 576 165 547 l 225 582 l 42 582 l 42 667 l 138 675 l 625 675 l 625 582 l 446 582 q 309 554 363 582 q 230 483 256 526 q 204 390 204 439 q 258 256 204 310 q 422 157 313 201 q 557 96 506 125 q 631 28 608 67 q 654 -72 654 -11 q 573 -240 654 -174 q 342 -306 492 -306 m 351 -222 q 497 -181 450 -222 q 544 -85 544 -140 q 510 -3 544 -31 q 420 45 476 25 q 297 94 364 65 q 196 14 229 56 q 163 -85 163 -28 q 215 -186 163 -150 q 351 -222 268 -222 z "},"\uA77F":{ha:672,x_min:19,x_max:632,o:"m 39 -285 l 39 -200 l 135 -192 l 228 -192 q 365 -163 311 -190 q 444 -92 418 -136 q 469 -1 469 -49 q 415 133 469 79 q 250 229 361 186 q 116 290 167 261 q 42 359 65 319 q 19 458 19 399 q 100 626 19 560 q 331 692 181 692 q 473 668 410 692 q 573 599 536 644 q 610 486 610 554 q 562 355 610 411 q 436 260 514 299 l 436 254 q 538 159 497 213 q 579 17 579 106 q 543 -105 579 -53 q 449 -186 507 -157 l 449 -192 l 632 -192 l 632 -285 l 39 -285 m 375 292 q 476 372 443 331 q 510 471 510 414 q 457 572 510 536 q 321 608 404 608 q 176 567 224 608 q 129 471 129 526 q 163 389 129 417 q 253 342 197 361 q 375 292 310 322 z "},"\uA781":{ha:354,x_min:53,x_max:239,o:"m 125 -285 l 125 544 q 115 583 125 572 q 92 593 106 593 q 81 593 86 593 q 68 590 76 593 l 53 676 q 81 685 65 682 q 118 689 97 689 q 211 649 183 689 q 239 536 239 610 l 239 -285 l 125 -285 z "},"\uA783":{ha:704,x_min:114,x_max:669,o:"m 114 -285 l 114 675 l 208 675 l 218 567 l 222 567 q 324 658 269 624 q 446 692 378 692 q 599 641 540 692 q 657 492 657 590 q 444 147 657 289 q 503 95 460 113 q 593 78 547 78 q 624 81 611 78 q 649 89 638 85 l 669 1 q 633 -11 656 -6 q 582 -17 611 -17 q 475 -2 526 -17 q 385 49 424 13 q 328 147 347 85 q 493 303 447 224 q 539 471 539 382 q 507 565 539 532 q 422 597 475 597 q 326 567 371 597 q 228 464 281 536 l 228 -285 l 114 -285 z "},"\uA75B":{ha:531,x_min:35,x_max:465,o:"m 372 -17 q 244 2 304 -17 q 139 67 183 21 q 75 190 94 113 q 273 331 211 260 q 335 483 335 403 q 306 567 335 536 q 225 597 276 597 q 148 580 183 597 q 85 536 113 563 l 35 601 q 132 667 79 642 q 246 692 185 692 q 397 642 340 692 q 453 503 453 592 q 383 315 453 394 q 189 168 313 235 q 267 99 211 121 q 379 78 322 78 q 417 81 400 78 q 446 89 433 85 l 465 1 q 427 -12 450 -7 q 372 -17 404 -17 z "},"\uA785":{ha:510,x_min:114,x_max:514,o:"m 114 -285 l 114 675 l 208 675 l 218 553 l 222 553 q 311 654 257 617 q 428 692 365 692 q 474 687 453 692 q 514 672 494 682 l 486 574 q 453 585 469 581 q 413 589 436 589 q 314 554 365 589 q 228 433 263 519 l 228 -285 l 114 -285 z "},"\uA787":{ha:599,x_min:33,x_max:564,o:"m 363 -17 q 222 16 285 -17 q 121 110 158 49 q 83 257 83 171 q 109 396 83 333 q 176 505 135 458 q 261 576 217 551 l 261 582 l 33 582 l 33 667 l 131 675 l 560 675 l 560 582 l 482 582 q 328 536 390 582 q 233 419 265 490 q 201 274 201 349 q 251 132 201 186 q 375 78 301 78 q 453 95 421 78 q 515 138 486 113 l 564 68 q 477 8 528 33 q 363 -17 426 -17 z "},"\u0242":{ha:593,x_min:25,x_max:525,o:"m 211 0 l 211 261 q 367 358 322 311 q 411 474 411 406 q 372 563 411 529 q 269 597 332 597 q 163 573 210 597 q 81 514 117 549 l 25 581 q 128 658 67 625 q 275 692 190 692 q 400 667 343 692 q 491 594 457 642 q 525 476 525 546 q 469 323 525 383 q 325 218 414 263 l 325 0 l 211 0 z "},"\uA723":{ha:392,x_min:71,x_max:328,o:"m 108 -17 l 94 40 q 232 146 232 57 q 217 188 232 172 q 151 154 194 154 q 94 174 117 154 q 71 226 71 193 q 98 288 71 265 q 176 310 125 310 q 284 272 240 310 q 328 165 328 233 q 274 38 328 86 q 108 -17 219 -10 m 108 367 l 94 424 q 232 529 232 440 q 217 571 232 556 q 151 538 197 538 q 94 557 117 538 q 71 610 71 576 q 100 669 71 647 q 181 692 129 692 q 285 653 243 692 q 328 549 328 615 q 274 422 328 469 q 108 367 219 374 z "},"\uA725":{ha:392,x_min:74,x_max:331,o:"m 293 339 q 128 397 183 346 q 74 529 74 449 q 117 649 74 607 q 225 692 161 692 q 303 669 275 692 q 331 610 331 647 q 308 557 331 576 q 250 538 285 538 q 186 568 207 538 q 169 518 169 549 q 204 437 169 469 q 307 396 239 404 l 293 339 z "},\u0250:{ha:700,x_min:100,x_max:629,o:"m 372 -17 q 164 63 228 -17 q 100 272 100 142 l 100 675 l 194 675 l 204 581 l 208 581 q 317 662 257 632 q 446 692 378 692 q 578 647 526 692 q 629 517 629 601 q 530 336 629 400 q 214 247 431 272 q 230 167 215 207 q 282 103 244 128 q 386 78 319 78 q 489 100 439 78 q 578 147 539 122 l 622 71 q 509 12 575 40 q 372 -17 443 -17 m 214 329 q 450 393 383 351 q 517 500 517 435 q 485 576 517 553 q 410 599 454 599 q 315 574 363 599 q 214 493 267 549 l 214 329 z "},\u0251:{ha:778,x_min:65,x_max:724,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 360 692 282 692 q 461 671 417 692 q 551 610 506 650 l 554 610 l 564 675 l 657 675 l 657 131 q 666 93 657 104 q 688 82 675 82 q 697 83 692 82 q 708 85 701 83 l 724 -1 q 698 -8 714 -4 q 663 -12 682 -12 q 591 10 618 -12 q 556 83 564 32 l 551 83 q 460 14 513 44 q 344 -17 407 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},\u0252:{ha:782,x_min:58,x_max:717,o:"m 425 -17 q 232 65 329 -17 l 228 65 l 219 0 l 126 0 l 126 544 q 117 582 126 571 q 94 593 108 593 q 86 593 90 593 q 74 590 82 593 l 58 676 q 85 684 68 679 q 119 689 101 689 q 226 593 211 689 l 231 593 q 333 663 276 633 q 449 692 389 692 q 649 598 581 692 q 717 347 717 504 q 676 151 717 233 q 569 26 635 69 q 425 -17 503 -17 m 404 79 q 544 151 489 79 q 599 347 599 222 q 557 527 599 458 q 421 596 515 596 q 333 572 378 596 q 240 504 289 549 l 240 150 q 328 95 286 111 q 404 79 371 79 z "},\u0299:{ha:706,x_min:114,x_max:651,o:"m 114 0 l 114 675 l 374 675 q 553 635 485 675 q 622 504 622 596 q 592 412 622 449 q 510 360 563 375 l 510 354 q 609 304 567 342 q 651 194 651 267 q 576 47 651 93 q 385 0 501 0 l 114 0 m 226 394 l 354 394 q 474 422 438 394 q 510 493 510 449 q 475 567 510 540 q 363 593 440 593 l 226 593 l 226 394 m 226 82 l 372 82 q 497 113 457 82 q 538 200 538 144 q 494 278 538 250 q 364 307 450 307 l 226 307 l 226 82 z "},"\uA7B5":{ha:785,x_min:114,x_max:728,o:"m 114 -285 l 114 682 q 185 916 114 826 q 393 1006 256 1006 q 520 979 461 1006 q 617 900 579 953 q 654 767 654 847 q 615 624 654 686 q 507 535 576 563 l 507 529 q 615 491 564 521 q 697 406 665 461 q 728 268 728 351 q 693 118 728 182 q 599 19 658 54 q 463 -17 539 -17 q 337 6 400 -17 q 224 79 274 28 l 228 -57 l 228 -285 l 114 -285 m 436 79 q 563 131 513 79 q 614 271 614 182 q 552 423 614 369 q 376 476 490 476 l 346 476 l 346 565 l 356 565 q 494 617 449 565 q 540 754 540 669 q 499 873 540 833 q 399 913 458 913 q 273 851 318 913 q 228 667 228 790 l 228 179 q 330 99 275 119 q 436 79 385 79 z "},\u0255:{ha:638,x_min:63,x_max:615,o:"m 464 211 q 371 184 417 211 q 283 107 325 157 q 389 75 331 75 q 488 101 450 75 q 526 165 526 128 q 464 211 526 211 m 168 -97 l 88 -64 q 120 10 103 -25 q 156 76 138 46 q 88 188 113 122 q 63 338 63 253 q 108 529 63 450 q 228 650 153 608 q 389 692 303 692 q 503 669 456 692 q 585 613 550 646 l 532 544 q 470 586 504 571 q 393 601 436 601 q 282 568 331 601 q 206 476 233 535 q 178 338 178 417 q 190 245 178 288 q 224 169 201 203 q 342 264 279 231 q 474 297 406 297 q 579 259 543 297 q 615 161 615 221 q 552 36 615 89 q 382 -17 489 -17 q 225 24 297 -17 q 195 -33 210 -3 q 168 -97 181 -64 z "},"\uAB53":{ha:647,x_min:13,x_max:635,o:"m 13 -285 l 256 235 l 29 675 l 153 675 l 254 461 q 288 390 267 432 q 321 317 308 347 l 326 317 q 360 388 340 347 q 392 461 379 429 l 493 675 l 613 675 l 388 232 l 635 -285 l 511 -285 l 390 -10 q 357 69 378 22 q 322 151 336 117 l 317 151 q 285 70 304 117 q 253 -10 267 24 l 132 -285 l 13 -285 z "},\u0256:{ha:771,x_min:65,x_max:799,o:"m 714 -301 q 587 -251 628 -301 q 546 -111 546 -200 l 547 78 q 455 11 506 39 q 344 -17 404 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 542 729 l 542 1006 l 657 1006 l 657 -86 q 672 -176 657 -143 q 726 -208 688 -208 q 753 -205 740 -208 q 776 -197 767 -201 l 799 -283 q 763 -296 785 -290 q 714 -301 740 -301 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},\u0257:{ha:771,x_min:65,x_max:804,o:"m 344 -17 q 142 76 218 -17 q 65 336 65 168 q 106 526 65 446 q 215 649 147 606 q 358 692 282 692 q 460 671 417 692 q 547 614 503 650 l 546 799 q 589 952 544 896 q 726 1008 633 1008 q 769 1005 750 1008 q 804 994 789 1001 l 782 907 q 762 913 772 910 q 739 915 751 915 q 675 881 693 915 q 657 788 657 846 l 657 0 l 563 0 l 553 79 l 549 79 q 457 12 510 40 q 344 -17 404 -17 m 369 79 q 542 172 458 79 l 542 525 q 459 580 499 564 q 378 596 419 596 q 280 563 324 596 q 210 473 236 531 q 183 338 183 415 q 232 148 183 217 q 369 79 281 79 z "},\u02A3:{ha:1168,x_min:65,x_max:1132,o:"m 331 -17 q 138 76 210 -17 q 65 336 65 168 q 104 526 65 446 q 207 649 143 606 q 344 692 271 692 q 438 670 399 692 q 519 614 476 649 l 514 729 l 514 989 l 629 989 l 629 675 l 1121 675 l 1121 614 l 828 93 l 1132 93 l 1132 0 l 697 0 l 697 61 l 989 582 l 629 582 l 629 0 l 535 0 l 525 79 l 521 79 q 435 13 482 42 q 331 -17 388 -17 m 356 79 q 436 103 399 79 q 514 172 474 128 l 514 525 q 438 579 474 563 q 364 596 403 596 q 273 563 314 596 q 208 473 232 531 q 183 338 183 415 q 228 148 183 217 q 356 79 274 79 z "},\u02A4:{ha:1174,x_min:65,x_max:1149,o:"m 331 -17 q 138 76 210 -17 q 65 336 65 168 q 104 526 65 446 q 207 649 143 606 q 344 692 271 692 q 438 670 399 692 q 519 614 476 649 l 514 729 l 514 989 l 629 989 l 629 675 l 1119 675 l 1119 614 l 890 271 q 1038 236 981 272 q 1122 139 1094 200 q 1149 3 1149 78 q 1110 -162 1149 -94 q 1008 -266 1071 -231 q 875 -301 946 -301 q 728 -267 786 -301 q 631 -193 669 -232 l 688 -121 q 760 -179 718 -151 q 865 -207 803 -207 q 983 -150 935 -207 q 1032 0 1032 -93 q 992 135 1032 86 q 875 183 951 183 q 827 178 844 183 q 786 161 810 172 l 742 224 l 979 582 l 629 582 l 629 0 l 535 0 l 525 79 l 521 79 q 435 13 482 42 q 331 -17 388 -17 m 356 79 q 436 103 399 79 q 514 172 474 128 l 514 525 q 438 579 474 563 q 364 596 403 596 q 273 563 314 596 q 208 473 232 531 q 183 338 183 415 q 228 148 183 217 q 356 79 274 79 z "},\u02A5:{ha:1238,x_min:65,x_max:1250,o:"m 331 -17 q 138 76 210 -17 q 65 336 65 168 q 104 526 65 446 q 207 649 143 606 q 344 692 271 692 q 438 670 399 692 q 519 614 476 649 l 515 729 l 515 989 l 629 989 l 629 675 l 1121 675 l 1121 614 l 828 93 q 873 92 851 92 q 917 90 894 92 q 1004 243 953 189 q 1124 297 1056 297 q 1216 263 1182 297 q 1250 169 1250 229 q 1194 48 1250 99 q 1021 -3 1139 -3 q 997 -3 1010 -3 q 972 -3 985 -3 q 947 -112 958 -49 l 863 -100 q 874 -49 868 -74 q 886 -3 881 -25 q 787 -1 836 -1 q 697 0 738 -1 l 697 61 l 989 582 l 629 582 l 629 0 l 535 0 l 525 79 l 521 79 q 435 13 482 42 q 331 -17 388 -17 m 356 79 q 438 103 400 79 q 515 171 475 128 l 515 525 q 438 579 474 563 q 364 596 403 596 q 273 563 314 596 q 208 473 232 531 q 185 338 185 415 q 229 148 185 217 q 356 79 274 79 m 1119 218 q 1060 187 1090 218 q 1003 90 1031 156 q 1029 90 1017 90 q 1056 90 1042 90 q 1139 115 1110 90 q 1168 169 1168 139 q 1156 205 1168 192 q 1119 218 1144 218 z "},"\uAB66":{ha:1182,x_min:65,x_max:1275,o:"m 331 -17 q 138 76 210 -17 q 65 336 65 168 q 104 526 65 446 q 207 649 143 606 q 344 692 271 692 q 438 670 399 692 q 519 614 476 649 l 514 729 l 514 989 l 629 989 l 629 675 l 1121 675 l 1121 614 l 828 93 l 1132 93 l 1132 -86 q 1147 -176 1132 -143 q 1201 -208 1163 -208 q 1230 -205 1217 -208 q 1253 -197 1243 -201 l 1275 -283 q 1239 -296 1261 -290 q 1192 -301 1217 -301 q 1065 -245 1103 -301 q 1028 -97 1028 -189 l 1028 0 l 697 0 l 697 61 l 989 582 l 629 582 l 629 0 l 535 0 l 525 79 l 521 79 q 435 13 482 42 q 331 -17 388 -17 m 356 79 q 436 103 399 79 q 514 172 474 128 l 514 525 q 438 579 474 563 q 364 596 403 596 q 273 563 314 596 q 208 473 232 531 q 183 338 183 415 q 228 148 183 217 q 356 79 274 79 z "},"\u1E9F":{ha:740,x_min:74,x_max:672,o:"m 374 -17 q 224 22 293 -17 q 115 135 156 61 q 74 313 74 210 q 113 480 74 404 q 225 603 151 556 q 401 658 299 650 q 263 781 339 722 q 108 890 186 839 l 108 989 l 638 989 l 638 896 l 261 896 q 398 793 326 851 q 532 665 469 735 q 633 514 594 594 q 672 344 672 433 q 636 153 672 235 q 533 28 600 72 q 374 -17 467 -17 m 182 315 q 238 142 182 206 q 374 78 293 78 q 514 148 464 78 q 564 340 564 218 q 538 465 564 404 q 467 585 511 526 q 304 541 367 579 q 212 444 242 503 q 182 315 182 385 z "},\u018D:{ha:740,x_min:76,x_max:675,o:"m 185 649 q 211 524 185 585 q 282 404 238 463 q 445 448 382 410 q 538 545 508 486 q 567 674 567 604 q 511 848 567 785 q 375 911 456 911 q 235 841 285 911 q 185 649 185 771 m 375 1006 q 525 967 457 1006 q 634 854 593 928 q 675 676 675 781 q 636 510 675 585 q 524 387 597 435 q 347 331 450 339 q 486 208 410 267 q 640 99 563 150 l 640 0 l 111 0 l 111 93 l 488 93 q 351 196 422 138 q 217 324 279 254 q 115 475 154 394 q 76 644 76 556 q 113 835 76 754 q 216 961 149 917 q 375 1006 283 1006 z "},\u0258:{ha:689,x_min:51,x_max:625,o:"m 154 397 l 507 397 q 444 552 494 506 q 335 599 393 599 q 202 547 250 599 q 154 397 154 496 m 314 -17 q 183 2 242 -17 q 78 53 124 21 l 118 128 q 300 76 192 76 q 441 135 382 76 q 508 307 500 193 l 57 307 q 53 340 54 324 q 51 375 51 357 q 126 606 51 519 q 336 692 200 692 q 478 649 413 692 q 584 526 543 606 q 625 338 625 447 q 583 147 625 226 q 472 25 542 67 q 314 -17 401 -17 z "},\u025A:{ha:928,x_min:51,x_max:950,o:"m 340 -17 q 185 22 247 -17 q 91 128 124 61 q 51 276 58 194 l 494 449 q 424 562 472 526 q 310 597 375 597 q 216 583 258 597 q 136 543 174 568 l 94 619 q 199 672 143 653 q 322 692 256 692 q 496 640 422 692 q 601 490 569 588 l 782 560 l 797 549 q 793 478 793 506 q 812 373 793 401 q 865 344 831 344 q 918 361 899 344 l 950 301 q 908 280 932 290 q 851 269 885 269 q 763 305 801 269 q 725 428 725 340 l 725 449 l 621 408 q 625 333 625 374 q 590 158 625 238 q 492 31 556 79 q 340 -17 429 -17 m 157 229 q 217 117 171 157 q 340 76 264 76 q 433 110 396 76 q 490 199 471 143 q 510 324 510 256 q 510 345 510 335 q 508 365 510 356 l 157 229 z "},\u025B:{ha:600,x_min:65,x_max:572,o:"m 335 -17 q 199 7 260 -17 q 101 75 138 31 q 65 181 65 119 q 110 299 65 256 q 214 356 154 342 l 214 361 q 130 422 160 381 q 100 511 100 464 q 133 612 100 572 q 222 672 167 651 q 340 692 276 692 q 455 674 403 692 q 550 624 507 656 l 506 551 q 430 590 467 578 q 347 601 393 601 q 253 575 292 601 q 214 500 214 549 q 252 424 214 453 q 371 394 290 394 l 442 394 l 442 307 l 350 307 q 223 276 267 307 q 179 193 179 246 q 227 107 179 139 q 353 75 275 75 q 442 88 400 75 q 531 132 485 101 l 572 63 q 465 1 521 19 q 335 -17 408 -17 z "},\u025C:{ha:617,x_min:43,x_max:551,o:"m 283 -17 q 153 1 210 -17 q 43 63 96 19 l 86 132 q 174 88 131 101 q 264 75 217 75 q 390 108 342 75 q 438 196 438 140 q 394 278 438 249 q 265 307 350 307 l 174 307 l 174 394 l 246 394 q 363 424 325 394 q 401 501 401 454 q 365 576 401 550 q 274 601 328 601 q 190 590 228 601 q 111 551 151 579 l 67 622 q 281 692 157 692 q 398 672 344 692 q 483 613 451 651 q 515 514 515 574 q 486 422 515 464 q 404 361 457 381 l 404 356 q 506 300 461 342 q 551 185 551 258 q 516 78 551 124 q 419 8 481 32 q 283 -17 358 -17 z "},\u025D:{ha:803,x_min:43,x_max:825,o:"m 282 -17 q 153 1 210 -17 q 43 63 96 19 l 86 132 q 174 88 131 100 q 263 75 217 75 q 390 108 342 75 q 438 199 438 142 q 393 281 438 251 q 265 310 349 310 l 175 310 l 175 392 l 246 392 q 363 422 325 392 q 401 500 401 453 q 365 575 401 549 q 274 601 329 601 q 190 590 228 601 q 111 551 151 579 l 67 624 q 281 692 156 692 q 397 672 344 692 q 481 612 450 651 q 513 513 513 572 q 513 502 513 507 q 511 493 513 497 l 656 558 l 669 547 q 667 509 668 525 q 667 478 667 493 q 685 372 667 400 q 739 343 704 343 q 770 349 757 343 q 793 363 783 356 l 825 301 q 783 280 807 290 q 726 269 760 269 q 638 305 675 269 q 600 428 600 340 l 600 453 l 403 361 l 403 356 q 506 299 461 340 q 551 185 551 258 q 515 78 551 124 q 418 8 479 32 q 282 -17 357 -17 z "},\u025E:{ha:758,x_min:63,x_max:690,o:"m 396 -17 q 226 19 301 -17 q 106 128 150 56 q 63 308 63 200 q 110 519 63 435 q 237 648 158 604 q 407 692 315 692 q 531 672 475 692 q 621 612 588 651 q 654 511 654 572 q 625 422 654 464 q 540 361 596 381 l 540 356 q 644 301 599 342 q 690 186 690 260 q 610 38 690 93 q 396 -17 531 -17 m 399 75 q 533 108 489 75 q 576 193 576 142 q 533 278 576 250 q 408 307 490 307 l 351 307 l 351 394 l 388 394 q 503 424 465 394 q 540 499 540 453 q 502 575 540 549 q 407 601 464 601 q 246 528 311 601 q 181 314 181 454 q 242 133 181 190 q 399 75 304 75 z "},\u025F:{ha:410,x_min:-22,x_max:375,o:"m 78 -301 q 22 -296 47 -301 q -22 -282 -4 -290 l 1 -197 q 31 -205 14 -201 q 65 -208 49 -208 q 132 -173 115 -208 q 149 -76 149 -137 l 149 307 l 31 307 l 31 389 l 147 397 l 149 397 l 149 675 l 263 675 l 263 397 l 375 397 l 375 307 l 263 307 l 263 -76 q 221 -240 263 -179 q 78 -301 179 -301 z "},\u0261:{ha:771,x_min:65,x_max:657,o:"m 357 -306 q 114 -232 226 -306 l 157 -151 q 257 -199 206 -183 q 357 -214 308 -214 q 495 -164 450 -214 q 542 -31 540 -114 l 544 97 q 455 33 506 60 q 344 7 404 7 q 142 97 218 7 q 65 347 65 188 q 107 530 65 453 q 216 649 149 607 q 360 692 283 692 q 461 672 417 692 q 549 613 506 651 l 551 613 l 561 675 l 657 675 l 657 -29 q 578 -232 657 -158 q 357 -306 500 -306 m 369 101 q 458 124 417 101 q 542 194 499 147 l 542 525 q 459 580 499 564 q 378 596 419 596 q 279 564 324 596 q 209 476 235 532 q 183 349 183 421 q 232 168 183 235 q 369 101 281 101 z "},\u0262:{ha:690,x_min:63,x_max:622,o:"m 389 -17 q 224 24 299 -17 q 106 144 150 65 q 63 339 63 224 q 108 528 63 449 q 228 649 153 607 q 396 692 304 692 q 524 667 474 692 q 611 607 575 642 l 556 538 q 491 581 528 565 q 401 597 454 597 q 289 567 339 597 q 209 480 239 538 q 179 339 179 422 q 240 147 179 217 q 397 78 300 78 q 469 89 438 78 q 521 118 500 100 l 521 278 l 371 278 l 371 368 l 622 368 l 622 68 q 524 8 583 33 q 389 -17 465 -17 z "},\u0263:{ha:649,x_min:17,x_max:632,o:"m 328 -311 q 210 -267 251 -311 q 168 -153 168 -222 q 190 -51 168 -104 q 253 78 213 1 l 17 675 l 135 675 l 263 315 q 294 229 278 268 q 325 143 310 190 l 331 143 q 362 229 346 190 q 392 315 378 268 l 519 675 l 632 675 l 401 78 q 464 -51 442 1 q 486 -153 486 -104 q 444 -267 486 -222 q 328 -311 403 -311 m 328 -232 q 373 -210 358 -232 q 388 -158 388 -189 q 329 17 388 -83 l 324 17 q 267 -158 267 -85 q 282 -210 267 -189 q 328 -232 297 -232 z "},\u029B:{ha:690,x_min:64,x_max:654,o:"m 389 -17 q 224 24 299 -17 q 107 144 150 65 q 64 339 64 224 q 108 528 64 449 q 228 649 153 607 q 396 692 304 692 q 474 681 433 692 q 430 776 446 729 q 414 868 414 822 q 456 969 414 933 q 563 1006 497 1006 q 614 1000 592 1006 q 654 983 636 994 l 631 903 q 607 913 618 910 q 581 915 596 915 q 527 892 546 915 q 508 832 508 869 q 532 732 508 785 q 611 608 556 679 l 557 540 q 490 585 526 568 q 401 601 453 601 q 289 571 339 601 q 209 481 239 540 q 179 339 179 422 q 240 145 179 215 q 399 75 300 75 q 468 87 436 75 q 521 117 500 99 l 521 282 l 371 282 l 371 364 l 622 364 l 622 68 q 524 8 585 33 q 389 -17 464 -17 z "},\u0265:{ha:760,x_min:104,x_max:646,o:"m 531 -285 l 531 -43 l 538 104 q 435 17 489 50 q 311 -17 381 -17 q 154 51 204 -17 q 104 247 104 118 l 104 675 l 219 675 l 219 263 q 249 125 219 168 q 346 82 279 82 q 440 109 399 82 q 531 196 482 136 l 531 675 l 646 675 l 646 -285 l 531 -285 z "},\u0266:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 746 q 172 933 114 861 q 349 1006 231 1006 q 410 999 379 1006 q 463 983 440 993 l 436 896 q 360 913 399 913 q 262 868 293 913 q 228 744 231 824 l 224 569 q 326 649 272 615 q 449 682 379 682 q 605 615 556 682 q 654 418 654 547 l 654 0 l 540 0 l 540 403 q 510 540 540 497 q 413 582 479 582 q 320 556 361 582 q 228 479 279 531 l 228 0 l 114 0 z "},\u0267:{ha:756,x_min:114,x_max:654,o:"m 469 -301 q 413 -296 439 -301 q 371 -283 388 -290 l 393 -197 q 422 -205 406 -201 q 457 -208 439 -208 q 524 -173 507 -208 q 540 -76 540 -137 l 540 403 q 510 540 540 497 q 413 582 479 582 q 320 556 361 582 q 228 479 279 531 l 228 0 l 114 0 l 114 746 q 172 933 114 861 q 349 1006 231 1006 q 410 999 379 1006 q 463 983 440 993 l 436 896 q 360 913 399 913 q 262 868 293 913 q 228 744 231 824 l 224 569 q 326 649 272 615 q 449 682 379 682 q 605 615 556 682 q 654 418 654 547 l 654 -76 q 613 -240 654 -179 q 469 -301 571 -301 z "},\u029C:{ha:781,x_min:114,x_max:667,o:"m 114 0 l 114 675 l 228 675 l 228 401 l 553 401 l 553 675 l 667 675 l 667 0 l 553 0 l 553 300 l 228 300 l 228 0 l 114 0 z "},\u026A:{ha:474,x_min:64,x_max:410,o:"m 64 0 l 64 93 l 181 93 l 181 582 l 64 582 l 64 675 l 410 675 l 410 582 l 294 582 l 294 93 l 410 93 l 410 0 l 64 0 z "},"\u1D7B":{ha:475,x_min:64,x_max:410,o:"m 64 0 l 64 93 l 181 93 l 181 307 l 65 307 l 65 390 l 181 397 l 181 582 l 64 582 l 64 675 l 410 675 l 410 582 l 294 582 l 294 397 l 406 397 l 406 307 l 294 307 l 294 93 l 410 93 l 410 0 l 64 0 z "},\u0269:{ha:354,x_min:114,x_max:300,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 675 l 228 675 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 273 -9 290 -6 q 235 -12 256 -12 z "},\u029D:{ha:475,x_min:-36,x_max:486,o:"m 57 -147 q 78 -191 57 -174 q 135 -208 100 -208 q 201 -186 176 -208 q 235 -129 225 -164 q 132 -90 183 -90 q 76 -106 96 -90 q 57 -147 57 -121 m 413 -364 q 366 -282 390 -319 q 318 -214 342 -244 q 247 -278 292 -254 q 138 -301 203 -301 q 10 -256 57 -301 q -36 -149 -36 -210 q 8 -44 -36 -83 q 126 -6 53 -6 q 246 -35 190 -6 l 246 675 l 361 675 l 361 -32 q 353 -121 361 -79 q 422 -211 389 -160 q 486 -326 454 -262 l 413 -364 m 303 814 q 248 834 269 814 q 226 889 226 854 q 248 943 226 922 q 303 964 269 964 q 358 943 336 964 q 379 889 379 922 q 358 834 379 854 q 303 814 336 814 z "},\u029E:{ha:688,x_min:13,x_max:574,o:"m 461 -285 l 461 354 l 457 354 l 144 0 l 13 0 l 285 300 l 42 675 l 163 675 l 353 374 l 461 493 l 461 675 l 574 675 l 574 -285 l 461 -285 z "},\u026D:{ha:354,x_min:114,x_max:371,o:"m 285 -301 q 153 -244 192 -301 q 114 -86 114 -187 l 114 989 l 228 989 l 228 -86 q 243 -176 228 -143 q 297 -208 258 -208 q 325 -206 313 -208 q 347 -199 338 -203 l 371 -283 q 335 -296 357 -290 q 285 -301 313 -301 z "},\u026E:{ha:790,x_min:114,x_max:765,o:"m 114 0 l 114 989 l 228 989 l 228 675 l 736 675 l 736 614 l 492 271 q 648 238 588 274 q 737 140 708 201 q 765 3 765 78 q 725 -162 765 -94 q 621 -266 685 -231 q 483 -301 557 -301 q 330 -267 390 -301 q 231 -193 269 -232 l 286 -121 q 363 -180 318 -153 q 474 -207 407 -207 q 599 -150 547 -207 q 650 0 650 -93 q 605 135 650 86 q 474 183 560 183 q 427 178 444 183 q 386 161 410 172 l 340 224 l 596 582 l 228 582 l 228 0 l 114 0 z "},\u029F:{ha:571,x_min:114,x_max:535,o:"m 114 0 l 114 675 l 228 675 l 228 93 l 535 93 l 535 0 l 114 0 z "},\u019B:{ha:650,x_min:21,x_max:636,o:"m 21 0 l 292 676 l 278 719 l 93 625 l 53 701 l 247 801 q 191 881 225 850 q 108 911 157 911 q 82 908 96 911 q 57 901 68 904 l 35 992 q 72 1002 51 999 q 114 1006 92 1006 q 248 961 196 1006 q 335 846 300 917 l 515 939 l 558 863 l 368 765 l 636 0 l 518 0 l 400 374 q 372 468 386 418 q 343 564 358 518 l 338 564 q 304 467 321 517 q 272 374 288 418 l 132 0 l 21 0 z "},\u026F:{ha:1151,x_min:107,x_max:1039,o:"m 313 -17 q 158 51 208 -17 q 107 247 107 118 l 107 675 l 221 675 l 221 263 q 252 125 221 168 q 347 82 283 82 q 515 186 424 82 l 515 675 l 631 675 l 631 263 q 661 125 631 168 q 756 82 692 82 q 925 186 832 82 l 925 675 l 1039 675 l 1039 0 l 944 0 l 935 97 l 932 97 q 835 17 888 50 q 721 -17 782 -17 q 600 18 644 -17 q 535 113 556 53 q 428 19 483 56 q 313 -17 374 -17 z "},\u0270:{ha:1151,x_min:107,x_max:1039,o:"m 925 -285 l 925 -44 l 931 99 q 831 15 883 46 q 721 -17 778 -17 q 600 18 644 -17 q 535 113 556 53 q 428 19 483 56 q 313 -17 374 -17 q 158 51 208 -17 q 107 247 107 118 l 107 675 l 221 675 l 221 263 q 252 125 221 168 q 347 82 283 82 q 515 186 424 82 l 515 675 l 631 675 l 631 263 q 661 125 631 168 q 756 82 692 82 q 925 186 832 82 l 925 675 l 1039 675 l 1039 -285 l 925 -285 z "},\u0271:{ha:1151,x_min:114,x_max:1046,o:"m 867 -301 q 813 -296 838 -301 q 772 -283 789 -290 l 794 -197 q 822 -205 806 -201 q 854 -208 838 -208 q 917 -173 903 -208 q 932 -76 932 -137 l 932 413 q 901 550 932 507 q 807 593 871 593 q 638 489 732 593 l 638 0 l 524 0 l 524 413 q 493 550 524 507 q 397 593 463 593 q 228 489 322 593 l 228 0 l 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 319 659 267 626 q 432 692 372 692 q 553 658 510 692 q 618 563 597 624 q 725 656 671 619 q 840 692 779 692 q 995 624 944 692 q 1046 428 1046 557 l 1046 -76 q 1006 -240 1046 -179 q 867 -301 965 -301 z "},"\u1D6F":{ha:1307,x_min:-18,x_max:1326,o:"m 299 489 l 299 388 q 438 372 363 381 q 594 351 514 363 l 594 413 q 564 550 594 507 q 468 593 533 593 q 299 489 393 593 m 708 489 l 708 336 q 865 315 789 325 q 1003 297 940 306 l 1003 413 q 972 550 1003 507 q 878 593 942 593 q 708 489 803 593 m 185 0 l 185 315 q 163 317 172 317 q 146 317 153 317 q 82 288 103 317 q 58 210 61 258 l -18 222 q 22 349 -14 299 q 138 400 57 400 q 159 400 147 400 q 185 399 171 400 l 185 675 l 279 675 l 289 578 l 293 578 q 390 659 338 626 q 503 692 443 692 q 624 658 581 692 q 689 563 668 624 q 796 656 742 619 q 911 692 850 692 q 1066 624 1015 692 q 1117 428 1117 557 l 1117 286 q 1143 284 1132 285 q 1163 283 1154 283 q 1225 314 1204 283 q 1249 390 1246 344 l 1326 378 q 1287 252 1322 304 q 1171 200 1251 200 q 1147 201 1161 200 q 1117 203 1133 201 l 1117 0 l 1003 0 l 1003 214 q 863 231 939 221 q 708 250 788 240 l 708 0 l 594 0 l 594 265 q 437 286 514 276 q 299 303 360 296 l 299 0 l 185 0 z "},\u0272:{ha:760,x_min:-28,x_max:654,o:"m 57 -301 q 8 -296 31 -301 q -28 -283 -14 -290 l -6 -197 q 18 -205 6 -201 q 44 -208 31 -208 q 99 -176 85 -208 q 114 -86 114 -143 l 114 675 l 211 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 -86 q 190 -244 228 -187 q 57 -301 151 -301 z "},\u0273:{ha:760,x_min:114,x_max:796,o:"m 711 -301 q 579 -244 618 -301 q 540 -86 540 -187 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 l 114 675 l 208 675 l 218 578 l 222 578 q 325 659 271 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 -86 q 669 -176 654 -143 q 724 -208 685 -208 q 751 -205 739 -208 q 774 -197 764 -201 l 796 -283 q 760 -296 782 -290 q 711 -301 738 -301 z "},"\u1D70":{ha:915,x_min:-18,x_max:933,o:"m 299 489 l 299 379 q 456 345 374 365 q 611 310 539 325 l 611 413 q 581 550 611 507 q 483 593 550 593 q 391 567 432 593 q 299 489 350 540 m 185 0 l 185 314 q 164 316 174 315 q 146 317 154 317 q 82 288 103 317 q 58 210 61 258 l -18 222 q 22 349 -14 299 q 138 400 57 400 q 160 399 149 400 q 185 397 171 399 l 185 675 l 279 675 l 289 578 l 293 578 q 396 659 342 626 q 519 692 450 692 q 676 624 626 692 q 725 428 725 557 l 725 288 q 771 283 753 283 q 833 314 813 283 q 857 390 854 344 l 933 378 q 894 252 929 304 q 779 200 860 200 q 725 204 757 200 l 725 0 l 611 0 l 611 222 q 453 258 536 238 q 299 292 369 278 l 299 0 l 185 0 z "},\u0274:{ha:754,x_min:114,x_max:640,o:"m 114 0 l 114 675 l 232 675 l 460 301 q 538 144 500 235 l 543 144 q 535 275 539 210 q 532 394 532 340 l 532 675 l 640 675 l 640 0 l 521 0 l 293 375 q 255 446 275 406 q 215 531 235 486 l 210 531 q 219 400 215 465 q 222 281 222 335 l 222 0 l 114 0 z "},\u0264:{ha:710,x_min:22,x_max:688,o:"m 356 -17 q 176 46 238 -17 q 114 210 114 108 q 160 360 114 283 q 282 504 207 436 q 203 572 243 547 q 124 597 164 597 q 58 578 83 597 l 22 661 q 70 683 42 675 q 129 692 99 692 q 240 660 183 692 q 356 571 297 628 q 469 660 413 628 q 582 692 526 692 q 640 683 611 692 q 688 661 668 675 l 651 578 q 586 597 626 597 q 506 572 544 597 q 428 504 468 547 q 549 360 501 436 q 596 210 596 283 q 534 46 596 108 q 356 -17 472 -17 m 356 75 q 453 115 421 75 q 486 214 486 156 q 448 337 486 275 q 356 450 410 399 q 263 337 300 399 q 225 214 225 275 q 257 115 225 156 q 356 75 289 75 z "},\u0275:{ha:753,x_min:65,x_max:689,o:"m 376 -17 q 222 23 293 -17 q 108 142 151 63 q 65 338 65 221 q 108 533 65 454 q 222 652 151 613 q 376 692 293 692 q 532 652 461 692 q 646 533 603 613 q 689 338 689 454 q 646 142 689 221 q 532 23 603 63 q 376 -17 461 -17 m 376 599 q 244 545 297 599 q 176 397 190 492 l 578 397 q 510 545 564 492 q 376 599 456 599 m 376 76 q 517 137 461 76 q 581 307 574 197 l 174 307 q 236 137 181 197 q 376 76 292 76 z "},\u0276:{ha:972,x_min:63,x_max:943,o:"m 397 -17 q 231 24 307 -17 q 108 143 154 64 q 63 339 63 222 q 108 533 63 454 q 230 651 154 611 q 397 692 306 692 q 466 688 433 692 q 540 675 499 685 l 929 675 l 929 586 l 613 586 l 613 394 l 878 394 l 878 307 l 613 307 l 613 89 l 943 89 l 943 0 l 540 0 q 466 -13 499 -10 q 397 -17 433 -17 m 404 76 q 451 81 426 76 q 497 92 475 86 l 497 582 q 404 597 451 597 q 293 569 343 597 q 213 483 243 540 q 183 339 183 426 q 213 192 183 250 q 293 105 243 133 q 404 76 343 76 z "},\u0277:{ha:979,x_min:71,x_max:907,o:"m 301 -17 q 135 63 200 -17 q 71 301 71 142 q 98 446 71 376 q 178 571 125 515 q 310 659 232 626 q 490 692 389 692 q 722 636 629 692 q 860 492 814 581 q 907 303 907 404 q 847 67 907 151 q 679 -17 786 -17 q 564 19 617 -17 q 492 121 511 54 l 486 121 q 417 19 467 54 q 301 -17 367 -17 m 315 75 q 399 113 363 75 q 435 247 435 150 l 435 392 l 542 392 l 542 247 q 560 144 542 182 q 606 90 578 106 q 663 75 633 75 q 759 128 721 75 q 797 299 797 182 q 762 452 797 383 q 658 561 726 521 q 488 601 589 601 q 317 558 386 601 q 215 444 249 514 q 181 292 181 374 q 219 129 181 183 q 315 75 258 75 z "},\u0278:{ha:944,x_min:64,x_max:881,o:"m 419 -285 l 419 -12 q 245 32 326 -10 q 114 151 164 74 q 64 339 64 229 q 114 526 64 449 q 245 644 164 603 q 419 688 326 685 l 419 989 l 525 989 l 525 688 q 702 644 621 685 q 832 526 783 603 q 881 339 881 450 q 831 151 881 229 q 700 32 781 74 q 525 -12 619 -10 l 525 -285 l 419 -285 m 182 339 q 214 200 182 258 q 300 110 246 142 q 419 75 354 78 l 419 600 q 300 565 354 597 q 214 476 246 533 q 182 339 182 419 m 763 339 q 697 527 763 458 q 525 600 631 596 l 525 75 q 645 110 592 78 q 731 200 699 142 q 763 339 763 258 z "},\u0279:{ha:482,x_min:-4,x_max:368,o:"m 368 675 l 368 0 l 274 0 l 264 122 l 260 122 q 176 21 226 58 q 68 -17 126 -17 q -4 -3 28 -17 l 21 94 q 49 88 36 90 q 83 86 63 86 q 173 122 126 86 q 254 242 219 157 l 254 675 l 368 675 z "},\u027A:{ha:482,x_min:-4,x_max:368,o:"m 68 -17 q -4 -3 28 -17 l 22 94 q 51 88 38 90 q 83 86 64 86 q 173 122 126 86 q 254 242 219 157 l 254 989 l 368 989 l 368 0 l 274 0 l 264 124 l 261 124 q 176 22 226 60 q 68 -17 126 -17 z "},\u027B:{ha:482,x_min:-4,x_max:511,o:"m 425 -301 q 301 -248 338 -301 q 264 -100 264 -194 l 264 124 l 261 124 q 176 22 226 60 q 68 -17 126 -17 q -4 -3 28 -17 l 22 94 q 51 88 38 90 q 83 86 64 86 q 173 122 126 86 q 254 242 219 157 l 254 675 l 368 675 l 368 -86 q 383 -176 368 -143 q 438 -208 399 -208 q 465 -205 453 -208 q 488 -197 478 -201 l 511 -283 q 474 -296 497 -290 q 425 -301 451 -301 z "},\u027D:{ha:482,x_min:114,x_max:486,o:"m 285 -301 q 153 -244 192 -301 q 114 -86 114 -187 l 114 675 l 208 675 l 218 553 l 222 553 q 306 654 256 617 q 414 692 356 692 q 486 678 454 692 l 464 578 q 433 586 447 583 q 399 589 419 589 q 309 554 356 589 q 228 433 263 519 l 228 -86 q 243 -176 228 -143 q 297 -208 258 -208 q 325 -205 313 -208 q 347 -197 338 -201 l 371 -283 q 335 -296 357 -290 q 285 -301 313 -301 z "},\u027E:{ha:461,x_min:113,x_max:465,o:"m 113 0 l 113 436 q 174 624 113 556 q 346 692 236 692 q 465 672 419 692 l 444 576 q 404 589 422 586 q 358 592 386 592 q 267 547 307 592 q 226 413 226 503 l 226 0 l 113 0 z "},\u0280:{ha:688,x_min:114,x_max:644,o:"m 114 0 l 114 675 l 353 675 q 484 656 426 675 q 575 594 542 638 q 608 476 608 550 q 566 348 608 396 q 461 281 524 300 l 644 0 l 518 0 l 354 265 l 228 265 l 228 0 l 114 0 m 228 353 l 335 353 q 452 384 410 353 q 494 472 494 415 q 451 559 494 532 q 335 586 408 586 l 228 586 l 228 353 z "},\u0281:{ha:690,x_min:114,x_max:644,o:"m 114 0 l 114 675 l 228 675 l 228 417 l 357 417 l 518 675 l 644 675 l 464 401 q 567 333 525 382 q 608 203 608 285 q 575 83 608 128 q 484 19 542 39 q 353 0 426 0 l 114 0 m 228 89 l 335 89 q 451 117 408 89 q 494 206 494 146 q 451 296 494 263 q 335 329 408 329 l 228 329 l 228 89 z "},\u0282:{ha:582,x_min:39,x_max:538,o:"m 214 -301 q 79 -240 119 -301 q 39 -76 39 -179 l 39 136 l 44 139 q 175 86 115 100 q 292 72 235 72 q 394 103 361 72 q 428 178 428 135 q 405 236 428 213 q 347 276 382 260 q 274 306 311 292 q 181 347 226 324 q 106 406 135 369 q 76 500 76 443 q 138 637 76 582 q 310 692 200 692 q 426 669 372 692 q 519 615 481 647 l 464 543 q 392 586 429 569 q 310 603 354 603 q 216 574 246 603 q 186 506 186 544 q 207 453 186 474 q 261 419 228 433 q 332 389 294 404 q 428 348 381 371 q 506 287 475 325 q 538 185 538 249 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 q 217 -11 256 -17 q 138 8 179 -6 l 138 -74 q 156 -176 138 -142 q 221 -211 174 -211 q 256 -207 239 -211 q 286 -199 272 -203 l 308 -283 q 267 -296 290 -290 q 214 -301 243 -301 z "},\u0283:{ha:343,x_min:-56,x_max:399,o:"m 44 -301 q -12 -296 14 -301 q -56 -283 -37 -290 l -31 -197 q -1 -205 -17 -201 q 32 -208 14 -208 q 99 -173 82 -208 q 115 -76 115 -137 l 115 781 q 160 945 115 885 q 314 1006 206 1006 q 363 1001 342 1006 q 399 989 383 996 l 375 903 q 353 910 365 907 q 326 913 342 913 q 249 877 268 913 q 229 781 229 842 l 229 -76 q 188 -240 229 -179 q 44 -301 146 -301 z "},\u0284:{ha:404,x_min:-22,x_max:432,o:"m 78 -301 q 22 -296 47 -301 q -22 -283 -4 -290 l 3 -197 q 32 -205 17 -201 q 65 -208 47 -208 q 132 -173 115 -208 q 149 -76 149 -137 l 149 307 l 31 307 l 31 390 l 147 397 l 149 397 l 149 781 q 194 945 149 885 q 347 1006 239 1006 q 396 1001 375 1006 q 432 989 417 996 l 408 903 q 387 910 399 907 q 360 913 375 913 q 282 877 301 913 q 263 781 263 842 l 263 397 l 375 397 l 375 307 l 263 307 l 263 -76 q 221 -240 263 -179 q 78 -301 179 -301 z "},\u0287:{ha:469,x_min:17,x_max:436,o:"m 143 688 q 294 626 251 688 q 336 463 336 564 l 336 93 l 436 93 l 436 7 l 331 0 l 317 -217 l 221 -217 l 221 0 l 39 0 l 39 93 l 221 93 l 221 465 q 198 560 221 526 q 117 594 175 594 q 79 591 99 594 q 40 578 60 588 l 17 658 q 76 680 44 672 q 143 688 108 688 z "},\u0288:{ha:469,x_min:33,x_max:451,o:"m 326 -301 q 176 -240 218 -301 q 133 -76 133 -178 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 431 675 l 431 582 l 249 582 l 249 -78 q 272 -174 249 -140 q 353 -208 294 -208 q 392 -203 371 -208 q 429 -190 413 -197 l 451 -276 q 391 -294 424 -286 q 326 -301 358 -301 z "},\u02A6:{ha:903,x_min:33,x_max:857,o:"m 490 -17 q 274 19 351 -17 q 165 117 196 56 q 133 254 133 179 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 532 675 q 633 692 576 692 q 747 670 694 692 q 839 615 800 649 l 786 550 q 715 589 751 575 q 633 603 678 603 q 544 574 574 603 q 515 506 515 544 q 558 434 515 458 q 657 389 601 410 q 751 348 706 371 q 827 287 797 325 q 857 185 857 249 q 842 107 857 143 q 787 43 826 71 q 675 -1 747 15 q 490 -17 603 -17 m 493 72 q 657 87 603 72 q 729 125 711 101 q 747 178 747 149 q 725 236 747 213 q 669 276 703 260 q 599 306 635 292 q 508 346 553 322 q 435 406 464 369 q 406 500 406 443 q 410 543 406 522 q 424 582 415 564 l 249 582 l 249 253 q 303 124 249 175 q 493 72 358 72 z "},\u02A7:{ha:767,x_min:33,x_max:822,o:"m 468 -301 q 412 -296 438 -301 q 368 -283 386 -290 l 393 -197 q 422 -205 407 -201 q 456 -208 438 -208 q 522 -173 506 -208 q 539 -76 539 -137 l 539 582 l 249 582 l 249 210 q 270 115 249 149 q 347 81 292 81 q 379 84 363 81 q 414 96 396 88 l 438 14 q 385 -5 414 3 q 326 -12 357 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 539 675 l 539 781 q 584 945 539 885 q 738 1006 629 1006 q 786 1001 765 1006 q 822 989 807 996 l 799 903 q 777 910 789 907 q 750 913 765 913 q 672 877 692 913 q 653 781 653 842 l 653 -76 q 611 -240 653 -179 q 468 -301 569 -301 z "},\u02A8:{ha:1036,x_min:33,x_max:1014,o:"m 326 -12 q 176 49 218 -12 q 133 213 133 111 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 682 675 q 788 692 732 692 q 901 669 854 692 q 983 613 949 646 l 931 544 q 869 586 903 571 q 792 601 835 601 q 681 568 729 601 q 604 476 632 535 q 576 338 576 417 q 588 245 576 288 q 622 169 600 203 q 741 264 678 231 q 872 297 804 297 q 978 259 942 297 q 1014 161 1014 221 q 951 36 1014 89 q 781 -17 888 -17 q 624 24 696 -17 q 594 -33 608 -3 q 567 -97 579 -64 l 486 -64 q 519 10 501 -25 q 554 76 536 46 q 486 188 511 122 q 461 338 461 253 q 483 476 461 415 q 543 582 506 538 l 249 582 l 249 210 q 270 115 249 149 q 347 81 292 81 q 379 84 363 81 q 414 96 396 88 l 438 14 q 385 -5 414 3 q 326 -12 357 -12 m 863 211 q 769 184 815 211 q 682 107 724 157 q 788 75 729 75 q 887 101 849 75 q 925 165 925 128 q 863 211 925 211 z "},"\uAB67":{ha:903,x_min:33,x_max:857,o:"m 613 -301 q 478 -240 518 -301 q 438 -76 438 -179 l 438 -15 q 254 30 321 -7 q 160 125 188 67 q 133 254 133 183 l 133 582 l 33 582 l 33 668 l 139 675 l 153 892 l 249 892 l 249 675 l 532 675 q 633 692 576 692 q 747 670 694 692 q 839 615 800 649 l 786 550 q 715 589 751 575 q 633 603 678 603 q 544 574 574 603 q 515 506 515 544 q 558 434 515 458 q 657 389 601 410 q 751 348 706 371 q 827 287 797 325 q 857 185 857 249 q 831 89 857 133 q 737 17 806 44 q 536 -15 668 -11 l 536 -74 q 554 -176 536 -142 q 621 -211 572 -211 q 655 -207 639 -211 q 685 -199 671 -203 l 707 -283 q 666 -296 690 -290 q 613 -301 642 -301 m 493 72 q 657 87 603 72 q 729 125 711 101 q 747 178 747 149 q 725 236 747 213 q 669 276 703 260 q 599 306 635 292 q 508 346 553 322 q 435 406 464 369 q 406 500 406 443 q 410 543 406 522 q 424 582 415 564 l 249 582 l 249 253 q 303 124 249 175 q 493 72 358 72 z "},\u0289:{ha:810,x_min:19,x_max:790,o:"m 344 -17 q 188 51 238 -17 q 138 247 138 118 l 138 353 l 19 353 l 19 436 l 138 443 l 138 675 l 253 675 l 253 443 l 561 443 l 561 675 l 675 675 l 675 443 l 790 443 l 790 353 l 675 353 l 675 0 l 581 0 l 571 106 l 567 106 q 467 17 519 50 q 344 -17 414 -17 m 253 263 q 283 125 253 168 q 379 82 313 82 q 473 109 432 82 q 561 196 514 136 l 561 353 l 253 353 l 253 263 z "},\u028A:{ha:758,x_min:56,x_max:703,o:"m 379 -17 q 213 27 282 -17 q 107 142 143 71 q 71 290 71 213 q 109 465 71 393 q 190 579 147 538 l 190 582 l 56 582 l 56 675 l 313 675 l 313 601 q 222 485 257 554 q 186 315 186 415 q 208 197 186 251 q 274 110 231 143 q 379 78 317 78 q 485 110 443 78 q 549 197 528 143 q 571 315 571 251 q 536 485 571 415 q 446 601 501 554 l 446 675 l 703 675 l 703 582 l 568 582 l 568 579 q 649 465 611 538 q 688 290 688 393 q 651 142 688 213 q 547 27 615 71 q 379 -17 478 -17 z "},"\u1D7F":{ha:758,x_min:6,x_max:753,o:"m 379 -17 q 213 27 282 -17 q 107 142 143 71 q 71 290 71 213 q 71 299 71 294 q 71 307 71 303 l 6 307 l 6 389 l 83 394 q 129 503 99 457 q 190 579 160 549 l 190 582 l 56 582 l 56 675 l 313 675 l 313 601 q 238 515 269 565 q 193 397 206 465 l 564 397 q 520 515 551 465 q 446 601 489 565 l 446 675 l 703 675 l 703 582 l 568 582 l 568 579 q 628 503 599 549 q 674 397 658 458 l 753 397 l 753 307 l 688 307 q 688 299 688 303 q 688 290 688 294 q 651 142 688 213 q 547 27 615 71 q 379 -17 478 -17 m 379 78 q 483 109 442 78 q 547 193 525 140 q 571 307 569 246 l 186 307 q 210 192 188 244 q 275 109 232 140 q 379 78 318 78 z "},\u028B:{ha:736,x_min:104,x_max:667,o:"m 364 -17 q 178 55 251 -17 q 104 281 104 126 l 104 675 l 219 675 l 219 290 q 263 127 219 176 q 368 78 306 78 q 467 117 426 78 q 528 226 507 157 q 549 381 549 294 q 522 544 549 488 q 439 600 496 600 q 400 592 421 600 l 382 681 q 463 692 414 692 q 612 620 557 692 q 667 397 667 549 q 633 185 667 279 q 531 38 599 92 q 364 -17 464 -17 z "},"\u2C71":{ha:663,x_min:17,x_max:692,o:"m 260 0 l 17 675 l 135 675 l 263 292 q 294 192 278 242 q 326 93 311 142 l 332 93 q 358 192 344 142 q 385 292 371 242 l 451 497 q 517 644 479 597 q 625 692 556 692 q 660 689 646 692 q 692 679 675 686 l 669 576 q 635 585 656 585 q 586 560 604 585 q 551 483 568 535 l 400 0 l 260 0 z "},\u028D:{ha:997,x_min:32,x_max:964,o:"m 776 675 l 964 0 l 844 0 l 746 390 q 726 482 736 436 q 707 582 715 528 l 701 582 q 681 482 692 528 q 658 390 669 436 l 558 0 l 433 0 l 332 390 q 309 482 319 436 q 288 582 299 528 l 282 582 q 263 482 272 528 q 242 390 253 436 l 143 0 l 32 0 l 214 675 l 363 675 l 453 314 q 475 220 465 267 q 496 114 485 174 l 501 114 q 522 221 511 174 q 544 314 532 268 l 635 675 l 776 675 z "},\u028E:{ha:649,x_min:17,x_max:632,o:"m 17 0 l 286 771 q 342 891 310 838 q 423 975 375 944 q 539 1006 471 1006 q 582 1002 563 1006 q 618 992 601 999 l 596 901 q 572 908 586 904 q 544 911 557 911 q 450 870 488 911 q 392 767 413 829 l 361 676 l 632 0 l 515 0 l 376 374 q 344 467 361 418 q 311 564 328 517 l 306 564 q 277 468 292 518 q 249 374 263 418 l 129 0 l 17 0 z "},\u028F:{ha:576,x_min:-1,x_max:578,o:"m 232 0 l 232 228 l -1 675 l 121 675 l 213 483 q 249 406 231 444 q 288 328 268 368 l 293 328 q 330 406 313 368 q 365 483 347 444 l 457 675 l 578 675 l 346 228 l 346 0 l 232 0 z "},\u0290:{ha:590,x_min:43,x_max:683,o:"m 600 -301 q 474 -245 511 -301 q 436 -97 436 -189 l 436 0 l 43 0 l 43 61 l 399 582 l 82 582 l 82 675 l 543 675 l 543 614 l 188 93 l 540 93 l 540 -86 q 556 -176 540 -143 q 611 -208 571 -208 q 638 -205 625 -208 q 661 -197 651 -201 l 683 -283 q 647 -296 669 -290 q 600 -301 625 -301 z "},\u0291:{ha:638,x_min:43,x_max:651,o:"m 521 218 q 460 188 490 218 q 403 90 431 157 q 430 90 417 90 q 457 90 443 90 q 540 116 511 90 q 569 172 569 142 q 558 205 569 192 q 521 218 546 218 m 344 -112 l 264 -100 q 275 -51 269 -75 q 286 -4 281 -26 q 158 -2 222 -3 q 43 0 94 -1 l 43 61 l 399 582 l 82 582 l 82 675 l 536 675 l 536 613 l 183 94 q 250 92 217 93 q 317 92 283 92 q 404 244 353 190 q 525 297 456 297 q 617 263 583 297 q 651 172 651 229 q 597 47 651 100 q 428 -6 542 -6 q 399 -6 414 -6 q 369 -6 385 -6 q 358 -56 364 -29 q 344 -112 351 -83 z "},"\u1D25":{ha:710,x_min:22,x_max:688,o:"m 129 -17 q 70 -9 99 -17 q 22 14 42 -1 l 57 94 q 89 81 72 85 q 124 78 106 78 q 203 103 164 78 q 282 171 243 128 q 160 316 207 239 q 114 465 114 393 q 176 630 114 568 q 356 692 238 692 q 534 630 472 692 q 596 465 596 568 q 549 316 596 393 q 428 171 501 239 q 506 103 468 128 q 586 78 544 78 q 622 81 606 78 q 653 94 638 85 l 688 14 q 640 -9 668 -1 q 582 -17 611 -17 q 469 15 526 -17 q 356 104 413 47 q 240 15 297 47 q 129 -17 183 -17 z "},\u0294:{ha:579,x_min:3,x_max:551,o:"m 203 0 l 203 456 q 380 586 324 522 q 436 736 436 650 q 390 864 436 817 q 261 911 344 911 q 144 882 193 911 q 60 814 96 853 l 3 885 q 110 968 47 931 q 269 1006 174 1006 q 413 976 349 1006 q 514 888 476 946 q 551 742 551 829 q 521 604 551 664 q 438 497 490 544 q 317 407 385 450 l 317 0 l 203 0 z "},\u0295:{ha:579,x_min:28,x_max:576,o:"m 263 0 l 263 407 q 142 497 194 450 q 58 604 89 544 q 28 742 28 664 q 67 888 28 829 q 172 976 106 946 q 318 1006 238 1006 q 473 968 413 1006 q 576 885 533 931 l 519 814 q 439 882 485 853 q 326 911 393 911 q 192 864 240 911 q 143 736 143 817 q 199 586 143 650 q 376 456 256 522 l 376 0 l 263 0 z "},\u02A1:{ha:593,x_min:17,x_max:565,o:"m 217 0 l 217 186 l 51 186 l 51 269 l 174 275 l 217 275 l 217 456 q 394 586 338 522 q 450 736 450 650 q 404 864 450 817 q 275 911 358 911 q 158 882 207 911 q 74 814 110 853 l 17 885 q 124 968 61 931 q 283 1006 188 1006 q 426 976 363 1006 q 528 888 490 946 q 565 742 565 829 q 535 604 565 664 q 451 497 504 544 q 331 407 399 450 l 331 275 l 490 275 l 490 186 l 331 186 l 331 0 l 217 0 z "},\u02A2:{ha:593,x_min:28,x_max:576,o:"m 263 0 l 263 186 l 97 186 l 97 269 l 218 275 l 263 275 l 263 407 q 142 497 194 450 q 58 604 89 544 q 28 742 28 664 q 67 888 28 829 q 172 976 106 946 q 318 1006 238 1006 q 473 968 413 1006 q 576 885 533 931 l 519 814 q 439 882 485 853 q 326 911 393 911 q 192 864 240 911 q 143 736 143 817 q 199 586 143 650 q 376 456 256 522 l 376 275 l 536 275 l 536 186 l 376 186 l 376 0 l 263 0 z "},\u01C0:{ha:342,x_min:114,x_max:228,o:"m 114 0 l 114 989 l 228 989 l 228 0 l 114 0 z "},\u01C1:{ha:629,x_min:114,x_max:514,o:"m 114 0 l 114 989 l 228 989 l 228 0 l 114 0 m 400 0 l 400 989 l 514 989 l 514 0 l 400 0 z "},\u01C2:{ha:535,x_min:40,x_max:496,o:"m 218 0 l 218 335 l 40 335 l 40 418 l 149 425 l 218 425 l 218 563 l 40 563 l 40 644 l 149 653 l 218 653 l 218 989 l 332 989 l 332 653 l 496 653 l 496 563 l 332 563 l 332 425 l 496 425 l 496 335 l 332 335 l 332 0 l 218 0 z "},\u01C3:{ha:344,x_min:89,x_max:256,o:"m 133 275 l 117 800 l 114 989 l 231 989 l 228 800 l 211 275 l 133 275 m 172 -17 q 113 8 138 -17 q 89 69 89 32 q 113 134 89 110 q 172 158 138 158 q 231 134 207 158 q 256 69 256 110 q 231 8 256 32 q 172 -17 207 -17 z "},\u0298:{ha:729,x_min:82,x_max:647,o:"m 364 -17 q 158 107 233 -17 q 82 499 82 231 q 158 876 82 747 q 364 1006 233 1006 q 572 876 496 1006 q 647 499 647 747 q 572 107 647 231 q 364 -17 496 -17 m 364 81 q 454 121 414 81 q 517 253 494 161 q 540 499 540 344 q 490 810 540 711 q 364 908 439 908 q 241 810 292 908 q 190 499 190 711 q 213 253 190 344 q 276 121 236 161 q 364 81 315 81 m 364 417 q 308 440 332 417 q 285 500 285 464 q 308 559 285 536 q 364 582 332 582 q 421 559 399 582 q 443 500 443 536 q 421 440 443 464 q 364 417 399 417 z "},\u027F:{ha:371,x_min:-10,x_max:267,o:"m 151 -285 l 151 467 q 134 563 151 528 q 64 599 117 599 q 38 596 50 599 q 15 589 26 593 l -10 674 q 28 686 6 681 q 76 692 50 692 q 223 631 179 692 q 267 467 267 569 l 267 -285 l 151 -285 z "},\u0285:{ha:392,x_min:-10,x_max:408,o:"m 324 -301 q 191 -244 231 -301 q 151 -86 151 -187 l 151 467 q 134 563 151 528 q 64 599 117 599 q 38 596 50 599 q 15 589 26 593 l -10 674 q 28 686 6 681 q 76 692 50 692 q 223 631 179 692 q 267 467 267 569 l 267 -86 q 281 -176 267 -143 q 336 -208 296 -208 q 386 -199 363 -208 l 408 -283 q 372 -296 394 -290 q 324 -301 350 -301 z "},"&":{ha:846,x_min:44,x_max:825,o:"m 263 714 q 274 635 263 676 q 306 554 286 594 q 415 641 368 596 q 461 746 461 686 q 441 816 461 786 q 375 846 421 846 q 293 808 324 846 q 263 714 263 771 m 328 -17 q 182 15 246 -17 q 81 103 118 46 q 44 236 44 160 q 70 344 44 297 q 136 429 96 392 q 224 499 176 467 q 180 609 196 556 q 164 713 164 663 q 190 822 164 774 q 265 899 217 871 q 375 928 313 928 q 507 878 460 928 q 554 747 554 828 q 524 640 554 688 q 447 554 493 593 q 349 478 400 515 q 454 342 393 408 q 579 224 515 276 q 707 492 665 335 l 814 492 q 749 320 789 403 q 654 165 710 238 q 746 110 701 132 q 825 78 790 89 l 794 -17 q 694 23 747 -3 q 586 88 640 49 q 472 12 535 40 q 328 -17 410 -17 m 156 243 q 209 119 156 164 q 335 75 263 75 q 426 94 382 75 q 508 149 469 114 q 380 276 442 207 q 269 419 318 346 q 189 338 222 381 q 156 243 156 296 z "},"\u204A":{ha:617,x_min:74,x_max:557,o:"m 211 -244 l 454 582 l 74 582 l 74 675 l 557 675 l 557 614 l 326 -244 l 211 -244 z "},"\u2E52":{ha:664,x_min:51,x_max:585,o:"m 232 0 l 476 814 l 51 814 l 51 911 l 585 911 l 585 843 l 356 0 l 232 0 z "},"\uA764":{ha:844,x_min:31,x_max:768,o:"m 268 297 l 418 297 q 595 344 538 297 q 653 490 653 390 q 594 631 653 592 q 418 669 536 669 l 268 669 l 268 521 l 475 521 l 475 439 l 268 439 l 268 297 m 153 0 l 153 439 l 31 439 l 31 514 l 153 521 l 153 911 l 268 911 l 268 764 l 432 764 q 608 738 533 764 q 726 651 683 711 q 768 490 768 592 q 675 273 768 343 q 432 203 582 203 l 268 203 l 268 0 l 153 0 z "},"\uA765":{ha:786,x_min:15,x_max:722,o:"m 132 -285 l 132 778 l 15 778 l 15 853 l 132 860 l 132 989 l 246 989 l 246 860 l 499 860 l 499 778 l 246 778 l 246 665 l 242 544 q 344 611 289 585 q 454 638 399 638 q 653 551 585 638 q 722 322 722 465 q 681 140 722 217 q 574 24 640 64 q 429 -17 507 -17 q 336 4 383 -17 q 243 61 289 25 l 246 -57 l 246 -285 l 132 -285 m 604 321 q 563 480 604 418 q 426 542 521 542 q 246 450 342 542 l 246 150 q 334 95 292 111 q 410 79 376 79 q 549 145 494 79 q 604 321 604 211 z "},\uFB00:{ha:801,x_min:33,x_max:839,o:"m 529 0 l 529 582 l 247 582 l 247 0 l 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 764 q 185 931 133 869 q 343 992 238 992 q 467 967 413 992 l 443 881 q 353 899 401 899 q 275 863 303 899 q 247 761 247 828 l 247 675 l 529 675 l 529 782 q 577 945 529 885 q 726 1006 625 1006 q 788 999 758 1006 q 839 983 817 993 l 814 896 q 738 913 776 913 q 643 782 643 913 l 643 675 l 786 675 l 786 582 l 643 582 l 643 0 l 529 0 z "},\uFB03:{ha:1143,x_min:33,x_max:1049,o:"m 529 0 l 529 582 l 247 582 l 247 0 l 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 764 q 185 931 133 869 q 343 992 238 992 q 467 967 413 992 l 443 881 q 353 899 401 899 q 275 863 303 899 q 247 761 247 828 l 247 675 l 529 675 l 529 782 q 577 945 529 885 q 726 1006 625 1006 q 788 999 758 1006 q 839 983 817 993 l 814 896 q 738 913 776 913 q 643 782 643 913 l 643 675 l 786 675 l 786 582 l 643 582 l 643 0 l 529 0 m 915 0 l 915 675 l 1029 675 l 1029 0 l 915 0 m 972 814 q 917 834 939 814 q 896 889 896 854 q 917 943 896 922 q 972 964 939 964 q 1027 943 1006 964 q 1049 889 1049 922 q 1027 834 1049 854 q 972 814 1006 814 z "},\uFB04:{ha:1156,x_min:33,x_max:1101,o:"m 529 0 l 529 582 l 247 582 l 247 0 l 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 764 q 185 931 133 869 q 343 992 238 992 q 467 967 413 992 l 443 881 q 353 899 401 899 q 275 863 303 899 q 247 761 247 828 l 247 675 l 529 675 l 529 782 q 577 945 529 885 q 726 1006 625 1006 q 788 999 758 1006 q 839 983 817 993 l 814 896 q 738 913 776 913 q 643 782 643 913 l 643 675 l 786 675 l 786 582 l 643 582 l 643 0 l 529 0 m 1036 -12 q 944 27 972 -12 q 915 139 915 67 l 915 989 l 1029 989 l 1029 131 q 1039 93 1029 104 q 1063 82 1049 82 q 1073 83 1068 82 q 1086 85 1078 83 l 1101 -1 q 1036 -12 1076 -12 z "},"\uA7AE":{ha:476,x_min:64,x_max:411,o:"m 64 0 l 64 99 l 181 99 l 181 814 l 64 814 l 64 911 l 411 911 l 411 814 l 296 814 l 296 99 l 411 99 l 411 0 l 64 0 z "},\u0391:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 z "},\u0392:{ha:817,x_min:125,x_max:761,o:"m 125 0 l 125 911 l 396 911 q 559 889 489 911 q 669 818 629 867 q 708 689 708 769 q 674 565 708 618 q 575 490 640 511 l 575 485 q 711 416 661 469 q 761 271 761 363 q 717 120 761 181 q 596 30 674 60 q 415 0 518 0 l 125 0 m 240 524 l 375 524 q 543 564 492 524 q 594 674 594 604 q 541 786 594 753 q 381 819 488 819 l 240 819 l 240 524 m 240 92 l 399 92 q 582 135 517 92 q 647 271 647 179 q 583 395 647 356 q 399 435 518 435 l 240 435 l 240 92 z "},\u0393:{ha:692,x_min:125,x_max:650,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 0 l 125 0 z "},\u0394:{ha:817,x_min:42,x_max:775,o:"m 42 0 l 42 69 l 342 911 l 475 911 l 775 69 l 775 0 l 42 0 m 167 99 l 647 99 l 506 515 l 410 807 l 404 807 l 308 515 l 167 99 z "},\u0395:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 z "},\u0396:{ha:749,x_min:63,x_max:690,o:"m 63 0 l 63 69 l 542 814 l 106 814 l 106 911 l 686 911 l 686 843 l 206 99 l 690 99 l 690 0 l 63 0 z "},\u0397:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 z "},\u0398:{ha:922,x_min:72,x_max:851,o:"m 306 429 l 306 529 l 617 529 l 617 429 l 306 429 m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 z "},\u0399:{ha:365,x_min:125,x_max:240,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 z "},\u039A:{ha:804,x_min:125,x_max:799,o:"m 125 0 l 125 911 l 240 911 l 240 454 l 244 454 l 624 911 l 754 911 l 469 564 l 799 0 l 669 0 l 397 474 l 240 289 l 240 0 l 125 0 z "},\u039B:{ha:715,x_min:0,x_max:715,o:"m 0 0 l 290 911 l 424 911 l 715 0 l 593 0 l 446 493 q 403 644 422 574 q 357 794 383 714 l 351 794 q 307 644 326 714 q 264 493 288 574 l 118 0 l 0 0 z "},\u039C:{ha:1010,x_min:125,x_max:885,o:"m 125 0 l 125 911 l 271 911 l 443 424 q 474 331 458 376 q 504 235 489 286 l 510 235 q 538 331 525 286 q 568 424 551 376 l 740 911 l 885 911 l 885 0 l 776 0 l 776 501 q 779 592 776 542 q 786 691 782 642 q 793 781 790 740 l 788 781 l 717 561 l 546 90 l 461 90 l 290 561 l 219 781 l 214 781 q 222 691 218 740 q 228 592 226 642 q 231 501 231 542 l 231 0 l 125 0 z "},\u039D:{ha:899,x_min:125,x_max:774,o:"m 125 0 l 125 911 l 251 911 l 575 344 q 626 249 601 299 q 672 149 650 199 l 678 149 q 667 293 672 219 q 663 438 663 367 l 663 911 l 774 911 l 774 0 l 647 0 l 324 567 q 272 663 297 613 q 225 763 247 713 l 219 763 q 231 622 226 694 q 235 476 235 550 l 235 0 l 125 0 z "},\u039E:{ha:740,x_min:68,x_max:672,o:"m 68 0 l 68 99 l 672 99 l 672 0 l 68 0 m 172 429 l 172 528 l 568 528 l 568 429 l 172 429 m 82 814 l 82 911 l 658 911 l 658 814 l 82 814 z "},\u039F:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 z "},\u03A0:{ha:896,x_min:125,x_max:771,o:"m 125 0 l 125 911 l 771 911 l 771 0 l 656 0 l 656 814 l 240 814 l 240 0 l 125 0 z "},\u03A1:{ha:786,x_min:125,x_max:726,o:"m 125 0 l 125 911 l 385 911 q 564 886 488 911 q 683 802 640 861 q 726 643 726 743 q 633 431 726 500 q 390 361 540 361 l 240 361 l 240 0 l 125 0 m 240 456 l 376 456 q 553 501 496 456 q 611 643 611 546 q 551 780 611 742 q 371 818 490 818 l 240 818 l 240 456 z "},\u03A3:{ha:747,x_min:61,x_max:696,o:"m 61 0 l 61 69 l 375 463 l 67 843 l 67 911 l 654 911 l 654 814 l 213 814 l 492 465 l 208 99 l 696 99 l 696 0 l 61 0 z "},\u03A4:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 z "},\u03A5:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 z "},\u03A6:{ha:999,x_min:67,x_max:932,o:"m 447 -31 l 447 99 q 247 149 333 104 q 114 272 161 193 q 67 460 67 351 q 114 645 67 568 q 247 765 161 722 q 447 814 333 808 l 447 942 l 551 942 l 551 814 q 752 765 667 808 q 885 645 838 722 q 932 460 932 568 q 885 272 932 351 q 752 149 838 193 q 551 99 667 104 l 551 -31 l 447 -31 m 179 460 q 252 269 179 343 q 447 189 325 196 l 447 724 q 252 646 325 717 q 179 460 179 575 m 819 460 q 747 646 819 575 q 551 724 675 717 l 551 189 q 747 269 675 196 q 819 460 819 343 z "},\u03A7:{ha:713,x_min:21,x_max:692,o:"m 21 0 l 286 471 l 39 911 l 167 911 l 290 678 q 324 617 308 647 q 361 546 340 586 l 367 546 q 401 617 386 586 q 432 678 415 647 l 553 911 l 675 911 l 426 465 l 692 0 l 564 0 l 431 246 q 394 315 413 279 q 353 392 375 350 l 347 392 q 310 315 328 350 q 275 246 292 279 l 143 0 l 21 0 z "},\u03A8:{ha:971,x_min:88,x_max:883,o:"m 431 0 l 431 340 q 178 430 269 347 q 88 688 88 513 l 88 911 l 201 911 l 201 693 q 259 501 201 563 q 431 433 317 439 l 431 911 l 540 911 l 540 433 q 711 501 654 440 q 768 693 768 563 l 768 911 l 883 911 l 883 688 q 792 430 883 513 q 540 340 701 347 l 540 0 l 431 0 z "},\u03A9:{ha:942,x_min:63,x_max:879,o:"m 63 0 l 63 94 l 244 94 l 244 100 q 168 194 206 139 q 106 323 131 250 q 82 488 82 396 q 130 715 82 615 q 265 871 178 814 q 471 928 353 928 q 676 871 589 928 q 813 715 764 814 q 861 488 861 615 q 837 323 861 396 q 775 194 813 250 q 697 100 738 139 l 697 94 l 879 94 l 879 0 l 556 0 l 556 85 q 688 242 633 146 q 742 481 742 338 q 709 658 742 579 q 616 781 676 736 q 471 826 556 826 q 326 781 386 826 q 233 658 265 736 q 201 481 201 579 q 255 242 201 338 q 386 85 308 146 l 386 0 l 63 0 z "},"\u03F7":{ha:771,x_min:125,x_max:704,o:"m 125 -19 l 125 931 l 240 931 l 240 789 l 294 789 q 510 751 418 789 q 653 641 601 714 q 704 460 704 568 q 653 276 704 351 q 510 163 601 201 q 294 124 418 124 l 240 124 l 240 -19 l 125 -19 m 240 214 l 300 214 q 513 280 433 214 q 592 460 592 346 q 513 637 592 575 q 300 699 433 699 l 240 699 l 240 214 z "},\u0386:{ha:796,x_min:26,x_max:792,o:"m 322 510 l 279 371 l 553 371 l 510 510 q 463 662 485 586 q 418 817 440 738 l 413 817 q 369 662 392 738 q 322 510 347 586 m 44 0 l 353 911 l 483 911 l 792 0 l 668 0 l 582 278 l 250 278 l 163 0 l 44 0 m 26 600 l 67 917 l 168 917 l 175 904 l 104 600 l 26 600 z "},\u0388:{ha:849,x_min:-18,x_max:781,o:"m 242 0 l 242 911 l 767 911 l 767 814 l 357 814 l 357 528 l 703 528 l 703 429 l 357 429 l 357 99 l 781 99 l 781 0 l 242 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u0389:{ha:1022,x_min:-18,x_max:897,o:"m 242 0 l 242 911 l 357 911 l 357 529 l 781 529 l 781 911 l 897 911 l 897 0 l 781 0 l 781 429 l 357 429 l 357 0 l 242 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u038A:{ha:482,x_min:-18,x_max:357,o:"m 242 0 l 242 911 l 357 911 l 357 0 l 242 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u03AA:{ha:365,x_min:-28,x_max:394,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 40 993 q -8 1013 11 993 q -28 1061 -28 1032 q -8 1110 -28 1092 q 40 1129 11 1129 q 90 1110 71 1129 q 108 1061 108 1092 q 90 1013 108 1032 q 40 993 71 993 m 326 993 q 277 1013 296 993 q 258 1061 258 1032 q 277 1110 258 1092 q 326 1129 296 1129 q 375 1110 356 1129 q 394 1061 394 1092 q 375 1013 394 1032 q 326 993 356 993 z "},\u038C:{ha:1029,x_min:-18,x_max:949,o:"m 558 -17 q 356 42 444 -17 q 219 207 268 100 q 169 460 169 314 q 219 710 169 606 q 356 872 268 815 q 558 928 444 928 q 761 872 674 928 q 899 710 849 815 q 949 460 949 606 q 899 207 949 314 q 761 42 849 100 q 558 -17 674 -17 m 558 85 q 701 131 640 85 q 794 262 761 178 q 828 460 828 346 q 754 728 828 629 q 558 826 681 826 q 363 728 436 826 q 289 460 289 629 q 322 262 289 346 q 417 131 356 178 q 558 85 478 85 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u038E:{ha:839,x_min:-18,x_max:840,o:"m 450 0 l 450 353 l 176 911 l 300 911 l 418 654 q 462 556 440 604 q 506 456 483 507 l 511 456 q 558 556 535 507 q 603 654 582 604 l 719 911 l 840 911 l 567 353 l 567 0 l 450 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u03AB:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 188 993 q 139 1013 158 993 q 119 1061 119 1032 q 139 1110 119 1092 q 188 1129 158 1129 q 237 1110 218 1129 q 256 1061 256 1092 q 237 1013 256 1032 q 188 993 218 993 m 474 993 q 424 1013 443 993 q 406 1061 406 1032 q 424 1110 406 1092 q 474 1129 443 1129 q 522 1110 503 1129 q 542 1061 542 1092 q 522 1013 542 1032 q 474 993 503 993 z "},\u038F:{ha:1035,x_min:-18,x_max:972,o:"m 156 0 l 156 94 l 338 94 l 338 100 q 261 194 299 139 q 199 323 224 250 q 175 488 175 396 q 223 715 175 615 q 358 871 271 814 q 564 928 446 928 q 769 871 682 928 q 906 715 857 814 q 954 488 954 615 q 930 323 954 396 q 868 194 906 250 q 790 100 831 139 l 790 94 l 972 94 l 972 0 l 649 0 l 649 85 q 781 242 726 146 q 835 481 835 338 q 802 658 835 579 q 709 781 769 736 q 564 826 649 826 q 419 781 479 826 q 326 658 358 736 q 294 481 294 579 q 348 242 294 338 q 479 85 401 146 l 479 0 l 156 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u03B1:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 z "},\u03B2:{ha:785,x_min:110,x_max:724,o:"m 110 -249 l 110 682 q 140 848 110 775 q 231 963 169 921 q 388 1006 293 1006 q 512 979 454 1006 q 606 900 569 953 q 642 765 642 847 q 607 633 642 690 q 508 535 572 575 l 508 529 q 665 445 607 515 q 724 268 724 375 q 686 114 724 178 q 588 17 649 50 q 460 -17 528 -17 q 333 6 396 -17 q 218 86 271 29 q 222 -81 221 1 q 225 -249 224 -162 l 110 -249 m 433 79 q 558 131 507 79 q 610 275 610 182 q 563 410 610 356 q 421 464 515 464 q 351 456 385 464 l 333 543 q 449 592 406 558 q 511 669 492 625 q 531 757 531 713 q 489 874 531 835 q 390 913 447 913 q 268 849 313 913 q 222 667 224 786 q 218 185 218 424 q 324 101 267 122 q 433 79 381 79 z "},\u03B3:{ha:672,x_min:8,x_max:644,o:"m 272 -249 q 278 -169 276 -203 q 279 -81 279 -136 q 256 103 279 3 q 194 308 233 204 q 108 503 156 411 q 8 663 60 596 l 124 692 q 209 543 165 633 q 290 347 253 453 q 346 135 326 240 l 351 135 q 467 399 417 263 q 529 675 518 535 l 644 675 q 596 460 626 561 q 513 251 565 358 q 376 7 460 143 q 388 -122 385 -53 q 390 -249 390 -190 l 272 -249 z "},\u03B4:{ha:738,x_min:72,x_max:672,o:"m 372 -17 q 223 22 292 -17 q 113 133 154 60 q 72 311 72 207 q 103 455 72 389 q 183 568 133 521 q 292 633 233 615 q 181 729 225 674 q 136 850 136 785 q 190 960 136 915 q 358 1006 243 1006 q 649 946 488 1006 l 621 860 q 470 904 535 892 q 357 917 406 917 q 272 897 299 917 q 246 843 246 876 q 298 751 246 797 q 438 661 350 706 q 566 578 514 624 q 645 469 618 532 q 672 313 672 406 q 636 141 672 215 q 533 25 600 67 q 372 -17 465 -17 m 183 314 q 238 141 183 204 q 375 78 293 78 q 513 142 465 78 q 560 313 560 207 q 517 476 560 415 q 396 579 474 536 l 399 576 q 286 534 335 572 q 210 438 238 496 q 183 314 183 381 z "},\u03B5:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 z "},\u03B6:{ha:589,x_min:67,x_max:578,o:"m 500 -256 l 408 -218 q 460 -149 444 -174 q 475 -96 475 -124 q 463 -61 475 -75 q 417 -35 450 -47 q 321 -11 385 -24 q 195 35 253 3 q 102 133 138 68 q 67 308 67 199 q 101 470 67 386 q 190 635 135 554 q 310 785 244 717 q 439 903 375 854 q 340 902 401 903 q 217 900 279 901 q 110 896 154 899 l 110 989 l 568 989 l 568 896 l 561 896 q 431 781 497 850 q 308 631 364 713 q 219 467 253 550 q 185 314 185 385 q 210 188 185 235 q 280 116 235 140 q 388 81 325 92 q 532 31 486 63 q 578 -69 578 0 q 560 -149 578 -100 q 500 -256 542 -199 z "},\u03B7:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 z "},\u03B8:{ha:725,x_min:82,x_max:643,o:"m 363 -17 q 157 107 232 -17 q 82 499 82 231 q 157 876 82 747 q 363 1006 232 1006 q 568 876 493 1006 q 643 499 643 747 q 568 107 643 231 q 363 -17 493 -17 m 363 911 q 248 826 294 911 q 194 546 201 740 l 531 546 q 478 826 525 740 q 363 911 432 911 m 363 78 q 446 113 410 78 q 505 231 482 149 q 531 456 528 314 l 194 456 q 221 231 199 314 q 280 113 243 149 q 363 78 317 78 z "},\u03B9:{ha:364,x_min:114,x_max:325,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 z "},\u03BA:{ha:686,x_min:101,x_max:690,o:"m 114 0 l 114 490 q 112 581 114 531 q 101 675 110 631 l 214 675 q 224 606 221 649 q 226 518 226 563 l 226 307 l 232 307 q 351 481 286 400 q 489 617 417 561 q 633 692 561 674 l 644 583 q 531 523 589 565 q 410 413 472 481 q 490 272 444 346 q 588 126 536 197 q 690 0 640 56 l 564 -11 q 488 86 528 29 q 410 206 449 143 q 339 331 372 269 q 308 292 324 313 q 276 249 292 271 q 234 155 246 208 q 221 35 222 101 l 221 0 l 114 0 z "},\u03BB:{ha:686,x_min:22,x_max:676,o:"m 143 -11 l 22 0 l 315 690 l 307 719 q 242 860 279 813 q 147 908 204 908 q 99 901 119 908 q 60 886 79 894 l 32 981 q 85 999 56 992 q 160 1006 114 1006 q 318 932 260 1006 q 421 714 376 858 l 676 0 l 556 0 l 369 560 l 364 560 l 143 -11 z "},\u00B5:{ha:781,x_min:114,x_max:743,o:"m 114 -249 l 114 675 l 228 675 l 228 263 q 257 128 228 174 q 351 82 286 82 q 440 106 397 82 q 531 214 483 131 l 531 675 l 646 675 q 640 397 643 539 q 638 136 638 256 q 651 94 638 107 q 688 82 665 82 q 728 90 706 82 l 743 3 q 709 -8 728 -3 q 663 -12 690 -12 q 576 18 606 -12 q 540 114 547 49 l 538 114 q 453 18 501 50 q 350 -14 406 -14 q 276 -1 310 -14 q 219 51 243 13 q 222 -62 221 -15 q 224 -152 222 -110 q 229 -249 226 -194 l 114 -249 z "},\u03BD:{ha:658,x_min:8,x_max:631,o:"m 268 0 q 163 360 231 186 q 8 663 94 533 l 124 692 q 213 520 171 619 q 289 315 256 421 q 342 118 322 210 l 347 118 q 456 393 408 247 q 515 675 503 539 l 631 675 q 544 339 604 499 q 381 0 483 179 l 268 0 z "},\u03BE:{ha:599,x_min:39,x_max:589,o:"m 510 -256 l 418 -218 q 469 -149 454 -174 q 485 -96 485 -124 q 454 -47 485 -64 q 331 -11 424 -29 q 200 32 260 3 q 104 115 140 61 q 68 257 68 168 q 97 378 68 324 q 173 472 125 433 q 276 526 221 510 l 276 532 q 174 608 214 557 q 135 732 135 660 q 161 834 135 789 q 235 903 188 879 q 170 902 199 903 q 112 900 142 901 q 39 896 82 899 l 39 989 l 569 989 l 569 896 l 419 896 q 301 853 353 896 q 250 729 250 810 q 277 642 250 679 q 346 585 304 606 q 428 564 388 564 q 469 565 453 564 q 513 571 486 567 l 513 468 q 465 474 486 474 q 415 475 443 475 q 306 451 358 475 q 219 382 253 428 q 186 269 186 336 q 215 168 186 206 q 292 111 243 131 q 403 81 340 92 q 546 31 503 63 q 589 -69 589 0 q 570 -149 589 -100 q 510 -256 551 -199 z "},\u03BF:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 z "},\u03C0:{ha:814,x_min:31,x_max:779,o:"m 678 -12 q 563 31 597 -12 q 528 157 528 75 q 528 231 528 183 q 530 340 529 279 q 531 463 531 400 q 533 581 532 525 l 294 581 q 282 287 294 439 q 254 -7 269 135 l 139 0 q 175 294 163 143 q 188 581 188 444 l 31 581 l 31 668 l 128 675 l 779 675 l 779 581 l 643 581 q 639 458 640 524 q 636 331 638 393 q 635 222 635 269 q 635 149 635 174 q 701 82 635 82 q 751 89 717 82 l 767 1 q 728 -8 750 -4 q 678 -12 706 -12 z "},\u03C1:{ha:763,x_min:108,x_max:697,o:"m 108 -249 l 108 344 q 149 539 108 463 q 256 653 189 615 q 406 692 324 692 q 622 600 547 692 q 697 347 697 508 q 657 151 697 233 q 553 26 617 69 q 419 -17 490 -17 q 314 4 365 -17 q 215 79 263 25 q 220 -85 218 -11 q 224 -249 222 -158 l 108 -249 m 399 79 q 526 151 474 79 q 579 347 579 222 q 538 527 579 458 q 401 596 496 596 q 273 533 328 596 q 218 343 218 471 l 218 171 q 310 97 265 114 q 399 79 356 79 z "},\u03C3:{ha:758,x_min:64,x_max:742,o:"m 367 -17 q 216 24 285 -17 q 106 142 147 64 q 64 331 64 219 q 108 525 64 449 q 222 638 151 601 q 372 675 293 675 l 742 675 l 742 578 q 635 585 685 582 q 528 589 585 588 l 528 583 q 626 479 590 549 q 661 315 661 410 q 622 137 661 211 q 517 23 583 63 q 367 -17 450 -17 m 368 78 q 499 144 447 78 q 550 325 550 211 q 529 451 550 393 q 468 544 508 508 q 369 581 428 581 q 235 519 289 581 q 182 331 182 457 q 235 146 182 214 q 368 78 288 78 z "},\u03C4:{ha:636,x_min:33,x_max:603,o:"m 400 -12 q 292 31 322 -12 q 261 157 261 75 l 261 582 l 33 582 l 33 668 l 131 675 l 603 675 l 603 582 l 374 582 q 369 359 371 468 q 368 149 368 250 q 425 82 368 82 q 492 93 454 82 l 508 4 q 460 -7 488 -1 q 400 -12 432 -12 z "},\u03C5:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 z "},\u03C6:{ha:944,x_min:64,x_max:881,o:"m 419 -249 l 419 -12 q 245 32 326 -10 q 114 151 164 74 q 64 339 64 229 q 114 526 64 449 q 245 644 164 603 q 419 688 326 685 l 419 892 l 525 892 l 525 688 q 702 644 621 685 q 832 526 783 603 q 881 339 881 450 q 831 151 881 229 q 700 32 781 74 q 525 -12 619 -10 l 525 -249 l 419 -249 m 182 339 q 214 200 182 258 q 300 110 246 142 q 419 75 354 78 l 419 600 q 300 565 354 597 q 214 476 246 533 q 182 339 182 419 m 763 339 q 697 527 763 458 q 525 600 631 596 l 525 75 q 645 110 592 78 q 731 200 699 142 q 763 339 763 258 z "},\u03C7:{ha:668,x_min:13,x_max:678,o:"m 128 -265 l 13 -249 l 281 226 l 17 663 l 131 692 l 335 331 l 340 331 l 514 675 l 635 675 l 394 229 l 678 -236 l 567 -265 l 340 133 l 335 133 l 128 -265 z "},\u03C8:{ha:957,x_min:85,x_max:879,o:"m 422 -249 l 422 -17 q 173 76 251 -14 q 94 310 94 167 l 94 490 q 93 576 94 531 q 85 675 92 622 l 196 675 q 203 601 201 640 q 204 518 204 563 q 203 439 204 481 q 202 361 203 397 q 201 303 201 325 q 256 139 201 201 q 422 76 311 76 l 422 892 l 529 892 l 529 76 q 701 151 640 81 q 763 365 763 222 q 751 509 763 442 q 707 665 739 576 l 818 692 q 865 532 850 607 q 879 369 879 457 q 787 88 879 189 q 529 -17 694 -12 l 529 -249 l 422 -249 z "},\u03C9:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 z "},\u03C2:{ha:600,x_min:64,x_max:560,o:"m 439 -250 l 347 -214 q 402 -137 383 -168 q 421 -76 421 -107 q 401 -17 421 -40 q 322 25 382 7 q 200 83 260 47 q 102 183 140 118 q 64 353 64 247 q 106 537 64 461 q 216 652 147 613 q 365 692 285 692 q 479 668 433 692 q 560 613 525 644 l 501 538 q 442 581 472 564 q 372 597 413 597 q 235 531 288 597 q 182 353 182 464 q 208 233 182 278 q 278 162 235 188 q 374 118 322 136 q 490 56 457 92 q 524 -51 524 21 q 503 -140 524 -86 q 439 -250 482 -193 z "},"\u03D9":{ha:743,x_min:64,x_max:679,o:"m 371 75 q 511 147 461 75 q 561 336 561 218 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 147 182 218 q 371 75 282 75 m 319 -249 l 319 -12 q 190 44 247 0 q 98 162 132 88 q 64 336 64 236 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 647 164 679 238 q 557 47 614 90 q 429 -11 500 3 q 431 -90 431 -54 q 433 -162 432 -125 q 435 -249 435 -200 l 319 -249 z "},\u03DB:{ha:647,x_min:64,x_max:611,o:"m 488 -256 l 396 -218 q 449 -148 433 -174 q 464 -97 464 -122 q 442 -47 464 -69 q 340 -6 421 -25 q 203 51 267 13 q 102 158 140 90 q 64 331 64 225 q 110 525 64 449 q 235 638 156 601 q 411 675 314 675 l 611 675 l 611 578 q 522 581 572 581 q 418 581 472 581 q 247 519 311 581 q 182 331 182 457 q 242 167 182 221 q 396 89 301 113 q 530 30 493 65 q 567 -69 567 -6 q 547 -151 567 -100 q 488 -256 526 -203 z "},\u03DD:{ha:574,x_min:114,x_max:538,o:"m 114 -249 l 114 675 l 538 675 l 538 582 l 221 582 l 224 285 l 510 285 l 510 194 l 224 194 q 226 -24 224 82 q 229 -249 228 -129 l 114 -249 z "},\u03E1:{ha:692,x_min:24,x_max:658,o:"m 633 -249 l 522 -235 q 542 -104 536 -168 q 547 24 547 -40 q 544 112 547 68 q 533 199 540 156 q 361 119 446 160 q 182 31 276 79 l 135 126 l 513 296 q 454 461 492 383 q 267 375 358 418 q 71 279 175 332 l 24 375 l 410 549 q 270 731 351 647 q 86 874 189 814 l 157 958 q 430 715 318 861 q 600 392 542 569 q 658 22 658 215 q 653 -114 658 -47 q 633 -249 647 -181 z "},"\u03F8":{ha:733,x_min:114,x_max:703,o:"m 114 -249 l 114 892 l 228 892 q 226 713 228 806 q 224 544 225 619 q 328 656 274 619 q 456 692 382 692 q 639 598 575 692 q 703 347 703 504 q 664 151 703 233 q 562 26 625 69 q 425 -17 499 -17 q 319 4 369 -17 q 221 79 268 25 q 226 -85 224 -11 q 229 -249 228 -158 l 114 -249 m 404 79 q 532 151 479 79 q 585 347 585 222 q 546 527 585 458 q 418 596 507 596 q 330 567 375 596 q 254 483 285 539 q 224 343 224 426 l 224 171 q 316 97 271 114 q 404 79 361 79 z "},"\u03F4":{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 260 39 349 -17 q 122 201 172 94 q 72 460 72 308 q 122 715 72 611 q 260 874 172 819 q 461 928 349 928 q 663 874 575 928 q 801 715 750 819 q 851 460 851 611 q 801 201 851 308 q 663 39 750 94 q 461 -17 575 -17 m 461 831 q 277 751 351 831 q 189 526 203 672 l 733 526 q 646 751 719 672 q 461 831 572 831 m 461 81 q 653 172 578 81 q 736 432 729 263 l 186 432 q 269 171 193 261 q 461 81 344 81 z "},\u03D0:{ha:772,x_min:107,x_max:715,o:"m 417 -17 q 308 0 363 -17 q 207 54 253 17 q 134 153 161 92 q 107 304 107 215 l 107 667 q 138 842 107 765 q 231 961 168 918 q 389 1004 294 1004 q 509 978 454 1004 q 598 899 564 951 q 632 767 632 846 q 594 632 632 692 q 478 535 556 572 l 478 529 q 652 447 589 519 q 715 267 715 374 q 676 115 715 179 q 568 17 636 51 q 417 -17 500 -17 m 419 81 q 549 131 497 81 q 601 268 601 182 q 581 363 601 319 q 518 434 561 407 q 407 461 475 461 q 341 453 385 461 q 215 422 297 446 q 215 376 215 400 q 215 326 215 353 q 235 205 215 253 q 288 130 256 157 q 354 92 319 103 q 419 81 389 81 m 218 661 q 217 585 217 619 q 215 518 217 550 q 395 576 329 542 q 490 656 461 610 q 518 758 518 703 q 479 872 518 836 q 385 908 440 908 q 265 847 308 908 q 218 661 221 786 z "},\u03D1:{ha:725,x_min:65,x_max:643,o:"m 203 700 q 228 596 203 633 q 325 543 254 558 q 531 528 396 528 q 508 753 529 669 q 449 874 486 838 q 361 911 413 911 q 280 881 315 911 q 224 802 244 850 q 203 700 203 754 m 356 -17 q 197 38 257 -17 q 110 214 136 93 q 89 299 97 267 q 65 358 81 331 l 169 382 q 191 331 182 364 q 210 250 200 299 q 270 117 231 156 q 364 78 310 78 q 444 108 408 78 q 502 216 479 138 q 529 439 525 294 q 313 453 397 439 q 180 497 228 467 q 113 575 132 526 q 94 694 94 624 q 129 846 94 775 q 224 961 164 917 q 358 1006 285 1006 q 571 878 499 1006 q 643 503 643 751 q 607 196 643 310 q 506 33 571 82 q 356 -17 442 -17 z "},\u03AC:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 336 783 l 390 1044 l 507 1044 l 514 1032 l 419 783 l 336 783 z "},\u03AD:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 283 783 l 338 1044 l 454 1044 l 461 1032 l 367 783 l 283 783 z "},\u03AE:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 343 783 l 397 1044 l 514 1044 l 521 1032 l 426 783 l 343 783 z "},\u03AF:{ha:364,x_min:108,x_max:325,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 108 783 l 163 1044 l 279 1044 l 286 1032 l 192 783 l 108 783 z "},\u03CA:{ha:364,x_min:-32,x_max:374,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 38 815 q -12 835 7 815 q -32 885 -32 856 q -12 934 -32 914 q 38 954 7 954 q 86 934 67 954 q 106 885 106 914 q 86 835 106 856 q 38 815 67 815 m 304 815 q 256 835 275 815 q 236 885 236 856 q 256 934 236 914 q 304 954 275 954 q 354 934 335 954 q 374 885 374 914 q 354 835 374 856 q 304 815 335 815 z "},\u03CC:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 311 783 l 365 1044 l 482 1044 l 489 1032 l 394 783 l 311 783 z "},\u03CD:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 278 783 l 332 1044 l 449 1044 l 456 1032 l 361 783 l 278 783 z "},\u03CB:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 207 815 q 157 835 176 815 q 138 885 138 856 q 157 934 138 914 q 207 954 176 954 q 256 934 236 954 q 275 885 275 914 q 256 835 275 856 q 207 815 236 815 m 474 815 q 425 835 444 815 q 406 885 406 856 q 425 934 406 914 q 474 954 444 954 q 524 934 504 954 q 543 885 543 914 q 524 835 543 856 q 474 815 504 815 z "},\u03CE:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 421 783 l 475 1044 l 592 1044 l 599 1032 l 504 783 l 421 783 z "},\u0390:{ha:364,x_min:-54,x_max:396,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 11 818 q -35 837 -17 818 q -54 882 -54 856 q -35 928 -54 910 q 11 947 -17 947 q 58 928 40 947 q 76 882 76 910 q 58 837 76 856 q 11 818 40 818 m 331 818 q 283 837 301 818 q 265 882 265 856 q 283 928 265 910 q 331 947 301 947 q 377 928 358 947 q 396 882 396 910 q 377 837 396 856 q 331 818 358 818 m 114 783 l 168 1047 l 258 1047 l 265 1033 l 171 783 l 114 783 z "},\u03B0:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 181 818 q 134 837 153 818 q 115 882 115 856 q 134 928 115 910 q 181 947 153 947 q 228 928 210 947 q 246 882 246 910 q 228 837 246 856 q 181 818 210 818 m 500 818 q 453 837 471 818 q 435 882 435 856 q 453 928 435 910 q 500 947 471 947 q 547 928 528 947 q 565 882 565 910 q 547 837 565 856 q 500 818 528 818 m 283 783 l 338 1047 l 428 1047 l 435 1033 l 340 783 l 283 783 z "},\u1F08:{ha:817,x_min:-17,x_max:813,o:"m 343 510 l 300 371 l 574 371 l 531 510 q 483 662 506 586 q 439 817 461 738 l 433 817 q 390 662 413 738 q 343 510 368 586 m 65 0 l 374 911 l 504 911 l 813 0 l 689 0 l 603 278 l 271 278 l 183 0 l 65 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 z "},\u1F09:{ha:796,x_min:-18,x_max:792,o:"m 322 510 l 279 371 l 553 371 l 510 510 q 463 662 485 586 q 418 817 440 738 l 413 817 q 369 662 392 738 q 322 510 347 586 m 44 0 l 353 911 l 483 911 l 792 0 l 668 0 l 582 278 l 250 278 l 163 0 l 44 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FBA:{ha:806,x_min:13,x_max:803,o:"m 333 510 l 290 371 l 564 371 l 521 510 q 474 662 496 586 q 429 817 451 738 l 424 817 q 381 662 403 738 q 333 510 358 586 m 56 0 l 364 911 l 494 911 l 803 0 l 679 0 l 593 278 l 261 278 l 174 0 l 56 0 m 83 603 l 13 904 l 19 917 l 121 917 l 160 603 l 83 603 z "},\u1FBB:{ha:796,x_min:26,x_max:792,o:"m 322 510 l 279 371 l 553 371 l 510 510 q 463 662 485 586 q 418 817 440 738 l 413 817 q 369 662 392 738 q 322 510 347 586 m 44 0 l 353 911 l 483 911 l 792 0 l 668 0 l 582 278 l 250 278 l 163 0 l 44 0 m 26 600 l 67 917 l 168 917 l 175 904 l 104 600 l 26 600 z "},\u1F0A:{ha:1022,x_min:-17,x_max:1019,o:"m 550 510 l 507 371 l 781 371 l 738 510 q 690 662 713 586 q 646 817 668 738 l 640 817 q 597 662 619 738 q 550 510 575 586 m 272 0 l 581 911 l 711 911 l 1019 0 l 896 0 l 810 278 l 478 278 l 390 0 l 272 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 z "},\u1F0B:{ha:1014,x_min:-24,x_max:1010,o:"m 540 510 l 497 371 l 771 371 l 728 510 q 681 662 703 586 q 636 817 658 738 l 631 817 q 588 662 610 738 q 540 510 565 586 m 263 0 l 571 911 l 701 911 l 1010 0 l 886 0 l 800 278 l 468 278 l 381 0 l 263 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F0C:{ha:1e3,x_min:-17,x_max:996,o:"m 526 510 l 483 371 l 757 371 l 714 510 q 667 662 689 586 q 622 817 644 738 l 617 817 q 574 662 596 738 q 526 510 551 586 m 249 0 l 557 911 l 688 911 l 996 0 l 872 0 l 786 278 l 454 278 l 367 0 l 249 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 z "},\u1F0D:{ha:986,x_min:-18,x_max:982,o:"m 513 510 l 469 371 l 743 371 l 700 510 q 653 662 675 586 q 608 817 631 738 l 603 817 q 560 662 582 738 q 513 510 538 586 m 235 0 l 543 911 l 674 911 l 982 0 l 858 0 l 772 278 l 440 278 l 353 0 l 235 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1F0E:{ha:879,x_min:-37,x_max:875,o:"m 406 510 l 363 371 l 636 371 l 593 510 q 546 662 568 586 q 501 817 524 738 l 496 817 q 453 662 475 738 q 406 510 431 586 m 128 0 l 436 911 l 567 911 l 875 0 l 751 0 l 665 278 l 333 278 l 246 0 l 128 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1F0F:{ha:879,x_min:-37,x_max:875,o:"m 406 510 l 363 371 l 636 371 l 593 510 q 546 662 568 586 q 501 817 524 738 l 496 817 q 453 662 475 738 q 406 510 431 586 m 128 0 l 436 911 l 567 911 l 875 0 l 751 0 l 665 278 l 333 278 l 246 0 l 128 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1FB8:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 376 981 q 231 1034 279 981 q 174 1160 182 1088 l 243 1171 q 284 1088 251 1122 q 376 1054 317 1054 q 469 1088 436 1054 q 510 1171 501 1122 l 579 1160 q 522 1034 571 1088 q 376 981 474 981 z "},\u1FB9:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 189 1021 l 189 1100 l 564 1100 l 564 1021 l 189 1021 z "},\u1F18:{ha:924,x_min:-17,x_max:856,o:"m 317 0 l 317 911 l 842 911 l 842 814 l 432 814 l 432 528 l 778 528 l 778 429 l 432 429 l 432 99 l 856 99 l 856 0 l 317 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 z "},\u1F19:{ha:924,x_min:-18,x_max:856,o:"m 317 0 l 317 911 l 842 911 l 842 814 l 432 814 l 432 528 l 778 528 l 778 429 l 432 429 l 432 99 l 856 99 l 856 0 l 317 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FC8:{ha:849,x_min:-22,x_max:781,o:"m 242 0 l 242 911 l 767 911 l 767 814 l 357 814 l 357 528 l 703 528 l 703 429 l 357 429 l 357 99 l 781 99 l 781 0 l 242 0 m 49 603 l -22 904 l -15 917 l 86 917 l 125 603 l 49 603 z "},\u1FC9:{ha:849,x_min:-18,x_max:781,o:"m 242 0 l 242 911 l 767 911 l 767 814 l 357 814 l 357 528 l 703 528 l 703 429 l 357 429 l 357 99 l 781 99 l 781 0 l 242 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u1F1A:{ha:1088,x_min:-17,x_max:1019,o:"m 481 0 l 481 911 l 1006 911 l 1006 814 l 596 814 l 596 528 l 942 528 l 942 429 l 596 429 l 596 99 l 1019 99 l 1019 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 z "},\u1F1B:{ha:1088,x_min:-24,x_max:1019,o:"m 481 0 l 481 911 l 1006 911 l 1006 814 l 596 814 l 596 528 l 942 528 l 942 429 l 596 429 l 596 99 l 1019 99 l 1019 0 l 481 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F1C:{ha:1088,x_min:-17,x_max:1019,o:"m 481 0 l 481 911 l 1006 911 l 1006 814 l 596 814 l 596 528 l 942 528 l 942 429 l 596 429 l 596 99 l 1019 99 l 1019 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 z "},\u1F1D:{ha:1074,x_min:-18,x_max:1006,o:"m 467 0 l 467 911 l 992 911 l 992 814 l 582 814 l 582 528 l 928 528 l 928 429 l 582 429 l 582 99 l 1006 99 l 1006 0 l 467 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1F28:{ha:1097,x_min:-17,x_max:972,o:"m 317 0 l 317 911 l 432 911 l 432 529 l 856 529 l 856 911 l 972 911 l 972 0 l 856 0 l 856 429 l 432 429 l 432 0 l 317 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 z "},\u1F29:{ha:1097,x_min:-18,x_max:972,o:"m 317 0 l 317 911 l 432 911 l 432 529 l 856 529 l 856 911 l 972 911 l 972 0 l 856 0 l 856 429 l 432 429 l 432 0 l 317 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FCA:{ha:1022,x_min:-22,x_max:897,o:"m 242 0 l 242 911 l 357 911 l 357 529 l 781 529 l 781 911 l 897 911 l 897 0 l 781 0 l 781 429 l 357 429 l 357 0 l 242 0 m 49 603 l -22 904 l -15 917 l 86 917 l 125 603 l 49 603 z "},\u1FCB:{ha:1022,x_min:-18,x_max:897,o:"m 242 0 l 242 911 l 357 911 l 357 529 l 781 529 l 781 911 l 897 911 l 897 0 l 781 0 l 781 429 l 357 429 l 357 0 l 242 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u1F2A:{ha:1261,x_min:-17,x_max:1136,o:"m 481 0 l 481 911 l 596 911 l 596 529 l 1019 529 l 1019 911 l 1136 911 l 1136 0 l 1019 0 l 1019 429 l 596 429 l 596 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 z "},\u1F2B:{ha:1261,x_min:-24,x_max:1136,o:"m 481 0 l 481 911 l 596 911 l 596 529 l 1019 529 l 1019 911 l 1136 911 l 1136 0 l 1019 0 l 1019 429 l 596 429 l 596 0 l 481 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F2C:{ha:1261,x_min:-17,x_max:1136,o:"m 481 0 l 481 911 l 596 911 l 596 529 l 1019 529 l 1019 911 l 1136 911 l 1136 0 l 1019 0 l 1019 429 l 596 429 l 596 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 z "},\u1F2D:{ha:1247,x_min:-18,x_max:1122,o:"m 467 0 l 467 911 l 582 911 l 582 529 l 1006 529 l 1006 911 l 1122 911 l 1122 0 l 1006 0 l 1006 429 l 582 429 l 582 0 l 467 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1F2E:{ha:1168,x_min:-37,x_max:1043,o:"m 388 0 l 388 911 l 503 911 l 503 529 l 926 529 l 926 911 l 1043 911 l 1043 0 l 926 0 l 926 429 l 503 429 l 503 0 l 388 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1F2F:{ha:1168,x_min:-37,x_max:1043,o:"m 388 0 l 388 911 l 503 911 l 503 529 l 926 529 l 926 911 l 1043 911 l 1043 0 l 926 0 l 926 429 l 503 429 l 503 0 l 388 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1F38:{ha:557,x_min:-17,x_max:432,o:"m 317 0 l 317 911 l 432 911 l 432 0 l 317 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 z "},\u1F39:{ha:557,x_min:-18,x_max:432,o:"m 317 0 l 317 911 l 432 911 l 432 0 l 317 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FDA:{ha:482,x_min:-14,x_max:357,o:"m 242 0 l 242 911 l 357 911 l 357 0 l 242 0 m 57 603 l -14 904 l -7 917 l 94 917 l 133 603 l 57 603 z "},\u1FDB:{ha:464,x_min:-18,x_max:357,o:"m 242 0 l 242 911 l 357 911 l 357 0 l 242 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u1F3A:{ha:721,x_min:-17,x_max:596,o:"m 481 0 l 481 911 l 596 911 l 596 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 z "},\u1F3B:{ha:721,x_min:-24,x_max:596,o:"m 481 0 l 481 911 l 596 911 l 596 0 l 481 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F3C:{ha:729,x_min:-17,x_max:596,o:"m 481 0 l 481 911 l 596 911 l 596 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 z "},\u1F3D:{ha:707,x_min:-18,x_max:582,o:"m 467 0 l 467 911 l 582 911 l 582 0 l 467 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1F3E:{ha:628,x_min:-37,x_max:503,o:"m 388 0 l 388 911 l 503 911 l 503 0 l 388 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1F3F:{ha:628,x_min:-37,x_max:503,o:"m 388 0 l 388 911 l 503 911 l 503 0 l 388 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1FD8:{ha:365,x_min:-19,x_max:386,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 183 981 q 38 1034 86 981 q -19 1160 -11 1088 l 50 1171 q 91 1088 58 1122 q 183 1054 124 1054 q 276 1088 243 1054 q 317 1171 308 1122 l 386 1160 q 329 1034 378 1088 q 183 981 281 981 z "},\u1FD9:{ha:365,x_min:-4,x_max:371,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m -4 1021 l -4 1100 l 371 1100 l 371 1021 l -4 1021 z "},\u1F48:{ha:1104,x_min:-17,x_max:1033,o:"m 643 -17 q 441 42 529 -17 q 303 207 353 100 q 254 460 254 314 q 303 710 254 606 q 441 872 353 815 q 643 928 529 928 q 846 872 758 928 q 983 710 933 815 q 1033 460 1033 606 q 983 207 1033 314 q 846 42 933 100 q 643 -17 758 -17 m 643 85 q 785 131 725 85 q 879 262 846 178 q 913 460 913 346 q 839 728 913 629 q 643 826 765 826 q 447 728 521 826 q 374 460 374 629 q 407 262 374 346 q 501 131 440 178 q 643 85 563 85 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 z "},\u1F49:{ha:1104,x_min:-18,x_max:1033,o:"m 643 -17 q 441 42 529 -17 q 303 207 353 100 q 254 460 254 314 q 303 710 254 606 q 441 872 353 815 q 643 928 529 928 q 846 872 758 928 q 983 710 933 815 q 1033 460 1033 606 q 983 207 1033 314 q 846 42 933 100 q 643 -17 758 -17 m 643 85 q 785 131 725 85 q 879 262 846 178 q 913 460 913 346 q 839 728 913 629 q 643 826 765 826 q 447 728 521 826 q 374 460 374 629 q 407 262 374 346 q 501 131 440 178 q 643 85 563 85 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FF8:{ha:1039,x_min:-14,x_max:968,o:"m 578 -17 q 376 42 464 -17 q 238 207 288 100 q 189 460 189 314 q 238 710 189 606 q 376 872 288 815 q 578 928 464 928 q 781 872 693 928 q 918 710 868 815 q 968 460 968 606 q 918 207 968 314 q 781 42 868 100 q 578 -17 693 -17 m 578 85 q 720 131 660 85 q 814 262 781 178 q 847 460 847 346 q 774 728 847 629 q 578 826 700 826 q 382 728 456 826 q 308 460 308 629 q 342 262 308 346 q 436 131 375 178 q 578 85 497 85 m 57 603 l -14 904 l -7 917 l 94 917 l 133 603 l 57 603 z "},\u1FF9:{ha:1011,x_min:-18,x_max:949,o:"m 558 -17 q 356 42 444 -17 q 219 207 268 100 q 169 460 169 314 q 219 710 169 606 q 356 872 268 815 q 558 928 444 928 q 761 872 674 928 q 899 710 849 815 q 949 460 949 606 q 899 207 949 314 q 761 42 849 100 q 558 -17 674 -17 m 558 85 q 701 131 640 85 q 794 262 761 178 q 828 460 828 346 q 754 728 828 629 q 558 826 681 826 q 363 728 436 826 q 289 460 289 629 q 322 262 289 346 q 417 131 356 178 q 558 85 478 85 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u1F4A:{ha:1288,x_min:-17,x_max:1217,o:"m 826 -17 q 624 42 713 -17 q 487 207 536 100 q 438 460 438 314 q 487 710 438 606 q 624 872 536 815 q 826 928 713 928 q 1029 872 942 928 q 1167 710 1117 815 q 1217 460 1217 606 q 1167 207 1217 314 q 1029 42 1117 100 q 826 -17 942 -17 m 826 85 q 969 131 908 85 q 1063 262 1029 178 q 1096 460 1096 346 q 1022 728 1096 629 q 826 826 949 826 q 631 728 704 826 q 557 460 557 629 q 590 262 557 346 q 685 131 624 178 q 826 85 746 85 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 z "},\u1F4B:{ha:1288,x_min:-24,x_max:1217,o:"m 826 -17 q 624 42 713 -17 q 487 207 536 100 q 438 460 438 314 q 487 710 438 606 q 624 872 536 815 q 826 928 713 928 q 1029 872 942 928 q 1167 710 1117 815 q 1217 460 1217 606 q 1167 207 1217 314 q 1029 42 1117 100 q 826 -17 942 -17 m 826 85 q 969 131 908 85 q 1063 262 1029 178 q 1096 460 1096 346 q 1022 728 1096 629 q 826 826 949 826 q 631 728 704 826 q 557 460 557 629 q 590 262 557 346 q 685 131 624 178 q 826 85 746 85 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F4C:{ha:1268,x_min:-17,x_max:1197,o:"m 807 -17 q 605 42 693 -17 q 467 207 517 100 q 418 460 418 314 q 467 710 418 606 q 605 872 517 815 q 807 928 693 928 q 1010 872 922 928 q 1147 710 1097 815 q 1197 460 1197 606 q 1147 207 1197 314 q 1010 42 1097 100 q 807 -17 922 -17 m 807 85 q 949 131 889 85 q 1043 262 1010 178 q 1076 460 1076 346 q 1003 728 1076 629 q 807 826 929 826 q 611 728 685 826 q 538 460 538 629 q 571 262 538 346 q 665 131 604 178 q 807 85 726 85 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 z "},\u1F4D:{ha:1254,x_min:-18,x_max:1183,o:"m 793 -17 q 591 42 679 -17 q 453 207 503 100 q 404 460 404 314 q 453 710 404 606 q 591 872 503 815 q 793 928 679 928 q 996 872 908 928 q 1133 710 1083 815 q 1183 460 1183 606 q 1133 207 1183 314 q 996 42 1083 100 q 793 -17 908 -17 m 793 85 q 935 131 875 85 q 1029 262 996 178 q 1063 460 1063 346 q 989 728 1063 629 q 793 826 915 826 q 597 728 671 826 q 524 460 524 629 q 557 262 524 346 q 651 131 590 178 q 793 85 713 85 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1FEC:{ha:978,x_min:-18,x_max:918,o:"m 317 0 l 317 911 l 576 911 q 756 886 679 911 q 875 802 832 861 q 918 643 918 743 q 825 431 918 500 q 582 361 732 361 l 432 361 l 432 0 l 317 0 m 432 456 l 568 456 q 745 501 688 456 q 803 643 803 546 q 742 780 803 742 q 563 818 682 818 l 432 818 l 432 456 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1F59:{ha:917,x_min:-18,x_max:918,o:"m 528 0 l 528 353 l 254 911 l 378 911 l 496 654 q 540 556 518 604 q 583 456 561 507 l 589 456 q 636 556 613 507 q 681 654 660 604 l 797 911 l 918 911 l 644 353 l 644 0 l 528 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FEA:{ha:839,x_min:-14,x_max:840,o:"m 450 0 l 450 353 l 176 911 l 300 911 l 418 654 q 462 556 440 604 q 506 456 483 507 l 511 456 q 558 556 535 507 q 603 654 582 604 l 719 911 l 840 911 l 567 353 l 567 0 l 450 0 m 57 603 l -14 904 l -7 917 l 94 917 l 133 603 l 57 603 z "},\u1FEB:{ha:839,x_min:-18,x_max:840,o:"m 450 0 l 450 353 l 176 911 l 300 911 l 418 654 q 462 556 440 604 q 506 456 483 507 l 511 456 q 558 556 535 507 q 603 654 582 604 l 719 911 l 840 911 l 567 353 l 567 0 l 450 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u1F5B:{ha:1081,x_min:-24,x_max:1083,o:"m 693 0 l 693 353 l 419 911 l 543 911 l 661 654 q 705 556 683 604 q 749 456 726 507 l 754 456 q 801 556 778 507 q 846 654 825 604 l 963 911 l 1083 911 l 810 353 l 810 0 l 693 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F5D:{ha:1064,x_min:-18,x_max:1065,o:"m 675 0 l 675 353 l 401 911 l 525 911 l 643 654 q 687 556 665 604 q 731 456 708 507 l 736 456 q 783 556 760 507 q 828 654 807 604 l 944 911 l 1065 911 l 792 353 l 792 0 l 675 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1F5F:{ha:1007,x_min:-37,x_max:1008,o:"m 618 0 l 618 353 l 344 911 l 468 911 l 586 654 q 630 556 608 604 q 674 456 651 507 l 679 456 q 726 556 703 507 q 771 654 750 604 l 888 911 l 1008 911 l 735 353 l 735 0 l 618 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1FE8:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 331 981 q 185 1034 233 981 q 128 1160 136 1088 l 197 1171 q 238 1088 206 1122 q 331 1054 271 1054 q 423 1088 390 1054 q 464 1171 456 1122 l 533 1160 q 476 1034 525 1088 q 331 981 428 981 z "},\u1FE9:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 m 143 1021 l 143 1100 l 518 1100 l 518 1021 l 143 1021 z "},\u1F68:{ha:1124,x_min:-17,x_max:1061,o:"m 244 0 l 244 94 l 426 94 l 426 100 q 350 194 388 139 q 288 323 313 250 q 264 488 264 396 q 312 715 264 615 q 447 871 360 814 q 653 928 535 928 q 858 871 771 928 q 994 715 946 814 q 1043 488 1043 615 q 1019 323 1043 396 q 957 194 994 250 q 879 100 919 139 l 879 94 l 1061 94 l 1061 0 l 738 0 l 738 85 q 869 242 815 146 q 924 481 924 338 q 891 658 924 579 q 798 781 858 736 q 653 826 738 826 q 508 781 568 826 q 415 658 447 736 q 383 481 383 579 q 437 242 383 338 q 568 85 490 146 l 568 0 l 244 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 z "},\u1F69:{ha:1124,x_min:-18,x_max:1061,o:"m 244 0 l 244 94 l 426 94 l 426 100 q 350 194 388 139 q 288 323 313 250 q 264 488 264 396 q 312 715 264 615 q 447 871 360 814 q 653 928 535 928 q 858 871 771 928 q 994 715 946 814 q 1043 488 1043 615 q 1019 323 1043 396 q 957 194 994 250 q 879 100 919 139 l 879 94 l 1061 94 l 1061 0 l 738 0 l 738 85 q 869 242 815 146 q 924 481 924 338 q 891 658 924 579 q 798 781 858 736 q 653 826 738 826 q 508 781 568 826 q 415 658 447 736 q 383 481 383 579 q 437 242 383 338 q 568 85 490 146 l 568 0 l 244 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 z "},\u1FFA:{ha:1054,x_min:-11,x_max:990,o:"m 174 0 l 174 94 l 356 94 l 356 100 q 279 194 317 139 q 217 323 242 250 q 193 488 193 396 q 241 715 193 615 q 376 871 289 814 q 582 928 464 928 q 788 871 700 928 q 924 715 875 814 q 972 488 972 615 q 948 323 972 396 q 886 194 924 250 q 808 100 849 139 l 808 94 l 990 94 l 990 0 l 667 0 l 667 85 q 799 242 744 146 q 853 481 853 338 q 820 658 853 579 q 727 781 788 736 q 582 826 667 826 q 437 781 497 826 q 344 658 376 736 q 313 481 313 579 q 366 242 313 338 q 497 85 419 146 l 497 0 l 174 0 m 60 603 l -11 904 l -4 917 l 97 917 l 136 603 l 60 603 z "},\u1FFB:{ha:1035,x_min:-18,x_max:972,o:"m 156 0 l 156 94 l 338 94 l 338 100 q 261 194 299 139 q 199 323 224 250 q 175 488 175 396 q 223 715 175 615 q 358 871 271 814 q 564 928 446 928 q 769 871 682 928 q 906 715 857 814 q 954 488 954 615 q 930 323 954 396 q 868 194 906 250 q 790 100 831 139 l 790 94 l 972 94 l 972 0 l 649 0 l 649 85 q 781 242 726 146 q 835 481 835 338 q 802 658 835 579 q 709 781 769 736 q 564 826 649 826 q 419 781 479 826 q 326 658 358 736 q 294 481 294 579 q 348 242 294 338 q 479 85 401 146 l 479 0 l 156 0 m -18 600 l 22 917 l 124 917 l 131 904 l 60 600 l -18 600 z "},\u1F6A:{ha:1307,x_min:-17,x_max:1244,o:"m 428 0 l 428 94 l 610 94 l 610 100 q 533 194 571 139 q 472 323 496 250 q 447 488 447 396 q 495 715 447 615 q 631 871 543 814 q 836 928 718 928 q 1042 871 954 928 q 1178 715 1129 814 q 1226 488 1226 615 q 1202 323 1226 396 q 1140 194 1178 250 q 1063 100 1103 139 l 1063 94 l 1244 94 l 1244 0 l 921 0 l 921 85 q 1053 242 999 146 q 1107 481 1107 338 q 1074 658 1107 579 q 981 781 1042 736 q 836 826 921 826 q 691 781 751 826 q 599 658 631 736 q 567 481 567 579 q 620 242 567 338 q 751 85 674 146 l 751 0 l 428 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 z "},\u1F6B:{ha:1307,x_min:-24,x_max:1244,o:"m 428 0 l 428 94 l 610 94 l 610 100 q 533 194 571 139 q 472 323 496 250 q 447 488 447 396 q 495 715 447 615 q 631 871 543 814 q 836 928 718 928 q 1042 871 954 928 q 1178 715 1129 814 q 1226 488 1226 615 q 1202 323 1226 396 q 1140 194 1178 250 q 1063 100 1103 139 l 1063 94 l 1244 94 l 1244 0 l 921 0 l 921 85 q 1053 242 999 146 q 1107 481 1107 338 q 1074 658 1107 579 q 981 781 1042 736 q 836 826 921 826 q 691 781 751 826 q 599 658 631 736 q 567 481 567 579 q 620 242 567 338 q 751 85 674 146 l 751 0 l 428 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 z "},\u1F6C:{ha:1288,x_min:-17,x_max:1225,o:"m 408 0 l 408 94 l 590 94 l 590 100 q 514 194 551 139 q 452 323 476 250 q 428 488 428 396 q 476 715 428 615 q 611 871 524 814 q 817 928 699 928 q 1022 871 935 928 q 1158 715 1110 814 q 1207 488 1207 615 q 1183 323 1207 396 q 1121 194 1158 250 q 1043 100 1083 139 l 1043 94 l 1225 94 l 1225 0 l 901 0 l 901 85 q 1033 242 979 146 q 1088 481 1088 338 q 1055 658 1088 579 q 962 781 1022 736 q 817 826 901 826 q 672 781 732 826 q 579 658 611 736 q 547 481 547 579 q 601 242 547 338 q 732 85 654 146 l 732 0 l 408 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 z "},\u1F6D:{ha:1269,x_min:-18,x_max:1206,o:"m 389 0 l 389 94 l 571 94 l 571 100 q 494 194 532 139 q 433 323 457 250 q 408 488 408 396 q 456 715 408 615 q 592 871 504 814 q 797 928 679 928 q 1003 871 915 928 q 1139 715 1090 814 q 1188 488 1188 615 q 1163 323 1188 396 q 1101 194 1139 250 q 1024 100 1064 139 l 1024 94 l 1206 94 l 1206 0 l 882 0 l 882 85 q 1014 242 960 146 q 1068 481 1068 338 q 1035 658 1068 579 q 942 781 1003 736 q 797 826 882 826 q 652 781 713 826 q 560 658 592 736 q 528 481 528 579 q 581 242 528 338 q 713 85 635 146 l 713 0 l 389 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 z "},\u1F6E:{ha:1168,x_min:-37,x_max:1104,o:"m 288 0 l 288 94 l 469 94 l 469 100 q 393 194 431 139 q 331 323 356 250 q 307 488 307 396 q 355 715 307 615 q 490 871 403 814 q 696 928 578 928 q 901 871 814 928 q 1038 715 989 814 q 1086 488 1086 615 q 1062 323 1086 396 q 1000 194 1038 250 q 922 100 963 139 l 922 94 l 1104 94 l 1104 0 l 781 0 l 781 85 q 913 242 858 146 q 967 481 967 338 q 934 658 967 579 q 841 781 901 736 q 696 826 781 826 q 551 781 611 826 q 458 658 490 736 q 426 481 426 579 q 480 242 426 338 q 611 85 533 146 l 611 0 l 288 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1F6F:{ha:1168,x_min:-37,x_max:1104,o:"m 288 0 l 288 94 l 469 94 l 469 100 q 393 194 431 139 q 331 323 356 250 q 307 488 307 396 q 355 715 307 615 q 490 871 403 814 q 696 928 578 928 q 901 871 814 928 q 1038 715 989 814 q 1086 488 1086 615 q 1062 323 1086 396 q 1000 194 1038 250 q 922 100 963 139 l 922 94 l 1104 94 l 1104 0 l 781 0 l 781 85 q 913 242 858 146 q 967 481 967 338 q 934 658 967 579 q 841 781 901 736 q 696 826 781 826 q 551 781 611 826 q 458 658 490 736 q 426 481 426 579 q 480 242 426 338 q 611 85 533 146 l 611 0 l 288 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 z "},\u1FBC:{ha:1118,x_min:4,x_max:1081,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 999 -12 q 899 28 928 -12 q 869 144 869 68 l 869 564 l 985 564 q 979 344 982 453 q 976 136 976 235 q 1024 82 976 82 q 1065 90 1040 82 l 1081 3 q 1046 -8 1065 -3 q 999 -12 1026 -12 z "},\u1F88:{ha:1179,x_min:-17,x_max:1142,o:"m 343 510 l 300 371 l 574 371 l 531 510 q 483 662 506 586 q 439 817 461 738 l 433 817 q 390 662 413 738 q 343 510 368 586 m 65 0 l 374 911 l 504 911 l 813 0 l 689 0 l 603 278 l 271 278 l 183 0 l 65 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 m 1060 -12 q 960 28 989 -12 q 931 144 931 68 l 931 564 l 1046 564 q 1040 344 1043 453 q 1038 136 1038 235 q 1085 82 1038 82 q 1126 90 1101 82 l 1142 3 q 1107 -8 1126 -3 q 1060 -12 1088 -12 z "},\u1F89:{ha:1160,x_min:-18,x_max:1121,o:"m 322 510 l 279 371 l 553 371 l 510 510 q 463 662 485 586 q 418 817 440 738 l 413 817 q 369 662 392 738 q 322 510 347 586 m 44 0 l 353 911 l 483 911 l 792 0 l 668 0 l 582 278 l 250 278 l 163 0 l 44 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 m 1039 -12 q 939 28 968 -12 q 910 144 910 68 l 910 564 l 1025 564 q 1019 344 1022 453 q 1017 136 1017 235 q 1064 82 1017 82 q 1106 90 1081 82 l 1121 3 q 1086 -8 1106 -3 q 1039 -12 1067 -12 z "},\u1F8A:{ha:1386,x_min:-17,x_max:1347,o:"m 550 510 l 507 371 l 781 371 l 738 510 q 690 662 713 586 q 646 817 668 738 l 640 817 q 597 662 619 738 q 550 510 575 586 m 272 0 l 581 911 l 711 911 l 1019 0 l 896 0 l 810 278 l 478 278 l 390 0 l 272 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 m 1265 -12 q 1165 28 1194 -12 q 1136 144 1136 68 l 1136 564 l 1251 564 q 1246 344 1249 453 q 1243 136 1243 235 q 1290 82 1243 82 q 1332 90 1307 82 l 1347 3 q 1313 -8 1332 -3 q 1265 -12 1293 -12 z "},\u1F8B:{ha:1376,x_min:-24,x_max:1339,o:"m 540 510 l 497 371 l 771 371 l 728 510 q 681 662 703 586 q 636 817 658 738 l 631 817 q 588 662 610 738 q 540 510 565 586 m 263 0 l 571 911 l 701 911 l 1010 0 l 886 0 l 800 278 l 468 278 l 381 0 l 263 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 m 1257 -12 q 1157 28 1186 -12 q 1128 144 1128 68 l 1128 564 l 1243 564 q 1238 344 1240 453 q 1235 136 1235 235 q 1282 82 1235 82 q 1324 90 1299 82 l 1339 3 q 1304 -8 1324 -3 q 1257 -12 1285 -12 z "},\u1F8C:{ha:1363,x_min:-17,x_max:1325,o:"m 526 510 l 483 371 l 757 371 l 714 510 q 667 662 689 586 q 622 817 644 738 l 617 817 q 574 662 596 738 q 526 510 551 586 m 249 0 l 557 911 l 688 911 l 996 0 l 872 0 l 786 278 l 454 278 l 367 0 l 249 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 m 1243 -12 q 1143 28 1172 -12 q 1114 144 1114 68 l 1114 564 l 1229 564 q 1224 344 1226 453 q 1221 136 1221 235 q 1268 82 1221 82 q 1310 90 1285 82 l 1325 3 q 1290 -8 1310 -3 q 1243 -12 1271 -12 z "},\u1F8D:{ha:1349,x_min:-18,x_max:1311,o:"m 513 510 l 469 371 l 743 371 l 700 510 q 653 662 675 586 q 608 817 631 738 l 603 817 q 560 662 582 738 q 513 510 538 586 m 235 0 l 543 911 l 674 911 l 982 0 l 858 0 l 772 278 l 440 278 l 353 0 l 235 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 m 1229 -12 q 1129 28 1158 -12 q 1100 144 1100 68 l 1100 564 l 1215 564 q 1210 344 1213 453 q 1207 136 1207 235 q 1254 82 1207 82 q 1296 90 1271 82 l 1311 3 q 1276 -8 1296 -3 q 1229 -12 1257 -12 z "},\u1F8E:{ha:1243,x_min:-37,x_max:1204,o:"m 406 510 l 363 371 l 636 371 l 593 510 q 546 662 568 586 q 501 817 524 738 l 496 817 q 453 662 475 738 q 406 510 431 586 m 128 0 l 436 911 l 567 911 l 875 0 l 751 0 l 665 278 l 333 278 l 246 0 l 128 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 m 1122 -12 q 1022 28 1051 -12 q 993 144 993 68 l 993 564 l 1108 564 q 1103 344 1106 453 q 1100 136 1100 235 q 1147 82 1100 82 q 1189 90 1164 82 l 1204 3 q 1169 -8 1189 -3 q 1122 -12 1150 -12 z "},\u1F8F:{ha:1243,x_min:-37,x_max:1204,o:"m 406 510 l 363 371 l 636 371 l 593 510 q 546 662 568 586 q 501 817 524 738 l 496 817 q 453 662 475 738 q 406 510 431 586 m 128 0 l 436 911 l 567 911 l 875 0 l 751 0 l 665 278 l 333 278 l 246 0 l 128 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 m 1122 -12 q 1022 28 1051 -12 q 993 144 993 68 l 993 564 l 1108 564 q 1103 344 1106 453 q 1100 136 1100 235 q 1147 82 1100 82 q 1189 90 1164 82 l 1204 3 q 1169 -8 1189 -3 q 1122 -12 1150 -12 z "},\u1FCC:{ha:1268,x_min:125,x_max:1231,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 m 1149 -12 q 1049 28 1078 -12 q 1019 144 1019 68 l 1019 564 l 1135 564 q 1129 344 1132 453 q 1126 136 1126 235 q 1174 82 1126 82 q 1215 90 1190 82 l 1231 3 q 1196 -8 1215 -3 q 1149 -12 1176 -12 z "},\u1F98:{ha:1460,x_min:-17,x_max:1422,o:"m 317 0 l 317 911 l 432 911 l 432 529 l 856 529 l 856 911 l 972 911 l 972 0 l 856 0 l 856 429 l 432 429 l 432 0 l 317 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 m 1340 -12 q 1240 28 1269 -12 q 1211 144 1211 68 l 1211 564 l 1326 564 q 1321 344 1324 453 q 1318 136 1318 235 q 1365 82 1318 82 q 1407 90 1382 82 l 1422 3 q 1388 -8 1407 -3 q 1340 -12 1368 -12 z "},\u1F99:{ha:1460,x_min:-18,x_max:1422,o:"m 317 0 l 317 911 l 432 911 l 432 529 l 856 529 l 856 911 l 972 911 l 972 0 l 856 0 l 856 429 l 432 429 l 432 0 l 317 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 m 1340 -12 q 1240 28 1269 -12 q 1211 144 1211 68 l 1211 564 l 1326 564 q 1321 344 1324 453 q 1318 136 1318 235 q 1365 82 1318 82 q 1407 90 1382 82 l 1422 3 q 1388 -8 1407 -3 q 1340 -12 1368 -12 z "},\u1F9A:{ha:1625,x_min:-17,x_max:1586,o:"m 481 0 l 481 911 l 596 911 l 596 529 l 1019 529 l 1019 911 l 1136 911 l 1136 0 l 1019 0 l 1019 429 l 596 429 l 596 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 m 1504 -12 q 1404 28 1433 -12 q 1375 144 1375 68 l 1375 564 l 1490 564 q 1485 344 1488 453 q 1482 136 1482 235 q 1529 82 1482 82 q 1571 90 1546 82 l 1586 3 q 1551 -8 1571 -3 q 1504 -12 1532 -12 z "},\u1F9B:{ha:1625,x_min:-24,x_max:1586,o:"m 481 0 l 481 911 l 596 911 l 596 529 l 1019 529 l 1019 911 l 1136 911 l 1136 0 l 1019 0 l 1019 429 l 596 429 l 596 0 l 481 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 m 1504 -12 q 1404 28 1433 -12 q 1375 144 1375 68 l 1375 564 l 1490 564 q 1485 344 1488 453 q 1482 136 1482 235 q 1529 82 1482 82 q 1571 90 1546 82 l 1586 3 q 1551 -8 1571 -3 q 1504 -12 1532 -12 z "},\u1F9C:{ha:1625,x_min:-17,x_max:1586,o:"m 481 0 l 481 911 l 596 911 l 596 529 l 1019 529 l 1019 911 l 1136 911 l 1136 0 l 1019 0 l 1019 429 l 596 429 l 596 0 l 481 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 m 1504 -12 q 1404 28 1433 -12 q 1375 144 1375 68 l 1375 564 l 1490 564 q 1485 344 1488 453 q 1482 136 1482 235 q 1529 82 1482 82 q 1571 90 1546 82 l 1586 3 q 1551 -8 1571 -3 q 1504 -12 1532 -12 z "},\u1F9D:{ha:1611,x_min:-18,x_max:1572,o:"m 467 0 l 467 911 l 582 911 l 582 529 l 1006 529 l 1006 911 l 1122 911 l 1122 0 l 1006 0 l 1006 429 l 582 429 l 582 0 l 467 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 m 1490 -12 q 1390 28 1419 -12 q 1361 144 1361 68 l 1361 564 l 1476 564 q 1471 344 1474 453 q 1468 136 1468 235 q 1515 82 1468 82 q 1557 90 1532 82 l 1572 3 q 1538 -8 1557 -3 q 1490 -12 1518 -12 z "},\u1F9E:{ha:1532,x_min:-37,x_max:1493,o:"m 388 0 l 388 911 l 503 911 l 503 529 l 926 529 l 926 911 l 1043 911 l 1043 0 l 926 0 l 926 429 l 503 429 l 503 0 l 388 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 m 1411 -12 q 1311 28 1340 -12 q 1282 144 1282 68 l 1282 564 l 1397 564 q 1392 344 1394 453 q 1389 136 1389 235 q 1436 82 1389 82 q 1478 90 1453 82 l 1493 3 q 1458 -8 1478 -3 q 1411 -12 1439 -12 z "},\u1F9F:{ha:1532,x_min:-37,x_max:1493,o:"m 388 0 l 388 911 l 503 911 l 503 529 l 926 529 l 926 911 l 1043 911 l 1043 0 l 926 0 l 926 429 l 503 429 l 503 0 l 388 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 m 1411 -12 q 1311 28 1340 -12 q 1282 144 1282 68 l 1282 564 l 1397 564 q 1392 344 1394 453 q 1389 136 1389 235 q 1436 82 1389 82 q 1478 90 1453 82 l 1493 3 q 1458 -8 1478 -3 q 1411 -12 1439 -12 z "},\u1FFC:{ha:1304,x_min:63,x_max:1265,o:"m 63 0 l 63 94 l 244 94 l 244 100 q 168 194 206 139 q 106 323 131 250 q 82 488 82 396 q 130 715 82 615 q 265 871 178 814 q 471 928 353 928 q 676 871 589 928 q 813 715 764 814 q 861 488 861 615 q 837 323 861 396 q 775 194 813 250 q 697 100 738 139 l 697 94 l 879 94 l 879 0 l 556 0 l 556 85 q 688 242 633 146 q 742 481 742 338 q 709 658 742 579 q 616 781 676 736 q 471 826 556 826 q 326 781 386 826 q 233 658 265 736 q 201 481 201 579 q 255 242 201 338 q 386 85 308 146 l 386 0 l 63 0 m 1183 -12 q 1083 28 1113 -12 q 1054 144 1054 68 l 1054 564 l 1169 564 q 1164 344 1167 453 q 1161 136 1161 235 q 1208 82 1161 82 q 1250 90 1225 82 l 1265 3 q 1231 -8 1250 -3 q 1183 -12 1211 -12 z "},\u1FA8:{ha:1488,x_min:-17,x_max:1449,o:"m 244 0 l 244 94 l 426 94 l 426 100 q 350 194 388 139 q 288 323 313 250 q 264 488 264 396 q 312 715 264 615 q 447 871 360 814 q 653 928 535 928 q 858 871 771 928 q 994 715 946 814 q 1043 488 1043 615 q 1019 323 1043 396 q 957 194 994 250 q 879 100 919 139 l 879 94 l 1061 94 l 1061 0 l 738 0 l 738 85 q 869 242 815 146 q 924 481 924 338 q 891 658 924 579 q 798 781 858 736 q 653 826 738 826 q 508 781 568 826 q 415 658 447 736 q 383 481 383 579 q 437 242 383 338 q 568 85 490 146 l 568 0 l 244 0 m 33 589 l 21 642 q 94 685 67 661 q 122 758 122 710 q 88 833 122 806 q -17 861 53 860 l -4 926 q 153 885 97 925 q 210 771 210 846 q 185 678 210 714 q 120 622 160 642 q 33 589 81 601 m 1367 -12 q 1267 28 1296 -12 q 1238 144 1238 68 l 1238 564 l 1353 564 q 1347 344 1350 453 q 1344 136 1344 235 q 1392 82 1344 82 q 1433 90 1408 82 l 1449 3 q 1414 -8 1433 -3 q 1367 -12 1394 -12 z "},\u1FA9:{ha:1488,x_min:-18,x_max:1449,o:"m 244 0 l 244 94 l 426 94 l 426 100 q 350 194 388 139 q 288 323 313 250 q 264 488 264 396 q 312 715 264 615 q 447 871 360 814 q 653 928 535 928 q 858 871 771 928 q 994 715 946 814 q 1043 488 1043 615 q 1019 323 1043 396 q 957 194 994 250 q 879 100 919 139 l 879 94 l 1061 94 l 1061 0 l 738 0 l 738 85 q 869 242 815 146 q 924 481 924 338 q 891 658 924 579 q 798 781 858 736 q 653 826 738 826 q 508 781 568 826 q 415 658 447 736 q 383 481 383 579 q 437 242 383 338 q 568 85 490 146 l 568 0 l 244 0 m 158 589 q 72 622 113 601 q 7 676 32 642 q -18 767 -18 711 q 39 885 -18 844 q 196 926 96 925 l 208 861 q 69 758 69 856 q 98 685 69 711 q 171 642 126 660 l 158 589 m 1367 -12 q 1267 28 1296 -12 q 1238 144 1238 68 l 1238 564 l 1353 564 q 1347 344 1350 453 q 1344 136 1344 235 q 1392 82 1344 82 q 1433 90 1408 82 l 1449 3 q 1414 -8 1433 -3 q 1367 -12 1394 -12 z "},\u1FAA:{ha:1671,x_min:-17,x_max:1632,o:"m 428 0 l 428 94 l 610 94 l 610 100 q 533 194 571 139 q 472 323 496 250 q 447 488 447 396 q 495 715 447 615 q 631 871 543 814 q 836 928 718 928 q 1042 871 954 928 q 1178 715 1129 814 q 1226 488 1226 615 q 1202 323 1226 396 q 1140 194 1178 250 q 1063 100 1103 139 l 1063 94 l 1244 94 l 1244 0 l 921 0 l 921 85 q 1053 242 999 146 q 1107 481 1107 338 q 1074 658 1107 579 q 981 781 1042 736 q 836 826 921 826 q 691 781 751 826 q 599 658 631 736 q 567 481 567 579 q 620 242 567 338 q 751 85 674 146 l 751 0 l 428 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 861 99 853 l -4 926 q 135 886 86 925 q 185 769 185 847 q 140 651 185 693 q 33 589 94 610 m 301 600 l 231 904 l 238 917 l 333 917 l 374 600 l 301 600 m 1550 -12 q 1450 28 1479 -12 q 1421 144 1421 68 l 1421 564 l 1536 564 q 1531 344 1533 453 q 1528 136 1528 235 q 1575 82 1528 82 q 1617 90 1592 82 l 1632 3 q 1597 -8 1617 -3 q 1550 -12 1578 -12 z "},\u1FAB:{ha:1671,x_min:-24,x_max:1632,o:"m 428 0 l 428 94 l 610 94 l 610 100 q 533 194 571 139 q 472 323 496 250 q 447 488 447 396 q 495 715 447 615 q 631 871 543 814 q 836 928 718 928 q 1042 871 954 928 q 1178 715 1129 814 q 1226 488 1226 615 q 1202 323 1226 396 q 1140 194 1178 250 q 1063 100 1103 139 l 1063 94 l 1244 94 l 1244 0 l 921 0 l 921 85 q 1053 242 999 146 q 1107 481 1107 338 q 1074 658 1107 579 q 981 781 1042 736 q 836 826 921 826 q 691 781 751 826 q 599 658 631 736 q 567 481 567 579 q 620 242 567 338 q 751 85 674 146 l 751 0 l 428 0 m 126 589 q 21 651 65 610 q -24 765 -24 693 q 165 926 -24 922 l 176 861 q 61 758 61 853 q 85 689 61 715 q 143 642 108 663 l 126 589 m 301 603 l 231 904 l 238 917 l 333 917 l 374 603 l 301 603 m 1550 -12 q 1450 28 1479 -12 q 1421 144 1421 68 l 1421 564 l 1536 564 q 1531 344 1533 453 q 1528 136 1528 235 q 1575 82 1528 82 q 1617 90 1592 82 l 1632 3 q 1597 -8 1617 -3 q 1550 -12 1578 -12 z "},\u1FAC:{ha:1651,x_min:-17,x_max:1613,o:"m 408 0 l 408 94 l 590 94 l 590 100 q 514 194 551 139 q 452 323 476 250 q 428 488 428 396 q 476 715 428 615 q 611 871 524 814 q 817 928 699 928 q 1022 871 935 928 q 1158 715 1110 814 q 1207 488 1207 615 q 1183 323 1207 396 q 1121 194 1158 250 q 1043 100 1083 139 l 1043 94 l 1225 94 l 1225 0 l 901 0 l 901 85 q 1033 242 979 146 q 1088 481 1088 338 q 1055 658 1088 579 q 962 781 1022 736 q 817 826 901 826 q 672 781 732 826 q 579 658 611 736 q 547 481 547 579 q 601 242 547 338 q 732 85 654 146 l 732 0 l 408 0 m 33 589 l 17 642 q 75 690 51 663 q 99 758 99 717 q -17 863 99 856 l -4 929 q 135 887 86 926 q 185 769 185 847 q 140 651 185 693 q 33 589 94 608 m 235 600 l 275 917 l 372 917 l 379 904 l 307 600 l 235 600 m 1531 -12 q 1431 28 1460 -12 q 1401 144 1401 68 l 1401 564 l 1517 564 q 1511 344 1514 453 q 1508 136 1508 235 q 1556 82 1508 82 q 1597 90 1572 82 l 1613 3 q 1578 -8 1597 -3 q 1531 -12 1558 -12 z "},\u1FAD:{ha:1632,x_min:-18,x_max:1594,o:"m 389 0 l 389 94 l 571 94 l 571 100 q 494 194 532 139 q 433 323 457 250 q 408 488 408 396 q 456 715 408 615 q 592 871 504 814 q 797 928 679 928 q 1003 871 915 928 q 1139 715 1090 814 q 1188 488 1188 615 q 1163 323 1188 396 q 1101 194 1139 250 q 1024 100 1064 139 l 1024 94 l 1206 94 l 1206 0 l 882 0 l 882 85 q 1014 242 960 146 q 1068 481 1068 338 q 1035 658 1068 579 q 942 781 1003 736 q 797 826 882 826 q 652 781 713 826 q 560 658 592 736 q 528 481 528 579 q 581 242 528 338 q 713 85 635 146 l 713 0 l 389 0 m 132 589 q 26 651 71 610 q -18 765 -18 693 q 169 926 -18 922 l 182 861 q 67 758 67 853 q 90 689 67 715 q 149 642 114 663 l 132 589 m 221 600 l 261 917 l 358 917 l 365 904 l 293 600 l 221 600 m 1513 -12 q 1413 28 1442 -12 q 1383 144 1383 68 l 1383 564 l 1499 564 q 1493 344 1496 453 q 1490 136 1490 235 q 1538 82 1490 82 q 1579 90 1554 82 l 1594 3 q 1560 -8 1579 -3 q 1513 -12 1540 -12 z "},\u1FAE:{ha:1531,x_min:-37,x_max:1493,o:"m 288 0 l 288 94 l 469 94 l 469 100 q 393 194 431 139 q 331 323 356 250 q 307 488 307 396 q 355 715 307 615 q 490 871 403 814 q 696 928 578 928 q 901 871 814 928 q 1038 715 989 814 q 1086 488 1086 615 q 1062 323 1086 396 q 1000 194 1038 250 q 922 100 963 139 l 922 94 l 1104 94 l 1104 0 l 781 0 l 781 85 q 913 242 858 146 q 967 481 967 338 q 934 658 967 579 q 841 781 901 736 q 696 826 781 826 q 551 781 611 826 q 458 658 490 736 q 426 481 426 579 q 480 242 426 338 q 611 85 533 146 l 611 0 l 288 0 m 89 554 l 78 600 q 128 624 110 606 q 147 668 147 643 q 122 711 147 696 q 42 726 97 726 l 50 781 q 183 756 136 781 q 229 681 229 732 q 185 594 229 625 q 89 554 142 563 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 m 1411 -12 q 1311 28 1340 -12 q 1282 144 1282 68 l 1282 564 l 1397 564 q 1392 344 1394 453 q 1389 136 1389 235 q 1436 82 1389 82 q 1478 90 1453 82 l 1493 3 q 1458 -8 1478 -3 q 1411 -12 1439 -12 z "},\u1FAF:{ha:1531,x_min:-37,x_max:1493,o:"m 288 0 l 288 94 l 469 94 l 469 100 q 393 194 431 139 q 331 323 356 250 q 307 488 307 396 q 355 715 307 615 q 490 871 403 814 q 696 928 578 928 q 901 871 814 928 q 1038 715 989 814 q 1086 488 1086 615 q 1062 323 1086 396 q 1000 194 1038 250 q 922 100 963 139 l 922 94 l 1104 94 l 1104 0 l 781 0 l 781 85 q 913 242 858 146 q 967 481 967 338 q 934 658 967 579 q 841 781 901 736 q 696 826 781 826 q 551 781 611 826 q 458 658 490 736 q 426 481 426 579 q 480 242 426 338 q 611 85 533 146 l 611 0 l 288 0 m 174 554 q 77 591 121 563 q 33 671 33 619 q 81 753 33 726 q 213 781 128 781 l 221 726 q 141 710 165 726 q 117 663 117 693 q 136 623 117 640 q 186 600 156 606 l 174 554 m 206 811 q 146 826 171 811 q 103 857 121 842 q 65 872 85 872 q 35 860 47 872 q 21 815 24 849 l -37 824 q -11 906 -32 875 q 57 938 10 938 q 117 922 93 938 q 160 892 142 907 q 199 876 179 876 q 228 888 217 876 q 243 933 239 900 l 300 925 q 274 842 294 874 q 206 811 254 811 m 1411 -12 q 1311 28 1340 -12 q 1282 144 1282 68 l 1282 564 l 1397 564 q 1392 344 1394 453 q 1389 136 1389 235 q 1436 82 1389 82 q 1478 90 1453 82 l 1493 3 q 1458 -8 1478 -3 q 1411 -12 1439 -12 z "},\u1F00:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 z "},\u1F01:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 443 778 q 334 824 381 789 q 288 919 288 858 q 340 1017 288 985 q 486 1051 392 1050 l 493 981 q 378 908 378 976 q 399 863 378 882 q 456 833 421 843 l 443 778 z "},\u1F70:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 414 792 l 194 1008 l 201 1021 l 326 1021 l 506 792 l 414 792 z "},\u1F71:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 292 792 l 471 1021 l 596 1021 l 603 1008 l 383 792 l 292 792 z "},\u1F02:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 238 778 l 224 833 q 277 865 257 843 q 297 917 297 888 q 188 988 297 981 l 193 1058 q 332 1024 278 1056 q 386 931 386 993 q 364 855 386 886 q 308 805 342 824 q 238 778 274 786 m 497 783 l 407 1033 l 414 1047 l 515 1047 l 564 783 l 497 783 z "},\u1F03:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 313 778 q 242 803 276 786 q 186 849 208 821 q 164 921 164 878 q 218 1021 164 986 q 357 1058 272 1056 l 363 988 q 253 908 253 981 q 273 862 253 881 q 326 833 293 843 l 313 778 m 489 783 l 399 1033 l 406 1047 l 507 1047 l 556 783 l 489 783 z "},\u1F04:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 261 778 l 249 833 q 301 865 282 843 q 321 917 321 888 q 211 988 321 982 l 217 1058 q 356 1024 301 1056 q 410 931 410 993 q 388 855 410 886 q 331 805 365 824 q 261 778 297 786 m 446 783 l 494 1047 l 596 1047 l 603 1033 l 513 783 l 446 783 z "},\u1F05:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 347 778 q 277 803 311 786 q 221 849 243 821 q 199 921 199 878 q 253 1021 199 986 q 392 1058 307 1056 l 397 988 q 288 908 288 981 q 308 862 288 881 q 361 833 328 843 l 347 778 m 422 783 l 472 1047 l 574 1047 l 579 1033 l 490 783 l 422 783 z "},\u1F06:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 361 781 l 350 826 q 408 878 408 839 q 389 908 408 897 q 315 921 369 919 l 321 976 q 492 888 492 975 q 452 815 492 842 q 361 781 413 789 m 476 1003 q 416 1017 440 1003 q 372 1047 392 1032 q 326 1061 351 1061 q 278 1003 286 1061 l 213 1008 q 243 1096 217 1061 q 321 1131 269 1131 q 381 1116 357 1131 q 426 1087 406 1101 q 471 1072 447 1072 q 519 1132 511 1072 l 585 1126 q 554 1038 581 1072 q 476 1003 528 1003 z "},\u1F07:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 436 781 q 345 813 385 788 q 306 881 306 839 q 476 976 306 975 l 482 921 q 408 907 428 919 q 389 872 389 894 q 447 826 389 842 l 436 781 m 476 1003 q 416 1017 440 1003 q 372 1047 392 1032 q 326 1061 351 1061 q 278 1003 286 1061 l 213 1008 q 243 1096 217 1061 q 321 1131 269 1131 q 381 1116 357 1131 q 426 1087 406 1101 q 471 1072 447 1072 q 519 1132 511 1072 l 585 1126 q 554 1038 581 1072 q 476 1003 528 1003 z "},\u1FB0:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 399 790 q 278 822 325 790 q 209 901 232 853 q 182 1000 186 950 l 253 1013 q 296 913 261 958 q 399 868 331 868 q 501 913 467 868 q 544 1013 536 958 l 615 1000 q 590 901 613 950 q 520 822 567 853 q 399 790 474 790 z "},\u1FB1:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 214 835 l 214 914 l 583 914 l 583 835 l 214 835 z "},\u1FB6:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 499 801 q 435 819 461 801 q 387 860 408 836 q 344 901 365 883 q 300 918 324 918 q 253 888 269 918 q 235 808 238 857 l 158 813 q 194 948 161 894 q 299 1001 226 1001 q 363 984 336 1001 q 411 943 389 967 q 453 902 433 919 q 499 885 474 885 q 544 916 529 885 q 563 994 560 947 l 639 989 q 603 855 636 908 q 499 801 571 801 z "},\u1F10:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 z "},\u1F11:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 393 778 q 284 824 331 789 q 238 919 238 858 q 290 1017 238 985 q 436 1051 342 1050 l 443 981 q 328 908 328 976 q 349 863 328 882 q 406 833 371 843 l 393 778 z "},\u1F72:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 364 792 l 144 1008 l 151 1021 l 276 1021 l 456 792 l 364 792 z "},\u1F73:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 242 792 l 421 1021 l 546 1021 l 553 1008 l 333 792 l 242 792 z "},\u1F12:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 188 778 l 174 833 q 227 865 207 843 q 247 917 247 888 q 138 988 247 981 l 143 1058 q 282 1024 228 1056 q 336 931 336 993 q 314 855 336 886 q 258 805 292 824 q 188 778 224 786 m 447 783 l 357 1033 l 364 1047 l 465 1047 l 514 783 l 447 783 z "},\u1F13:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 263 778 q 192 803 226 786 q 136 849 158 821 q 114 921 114 878 q 168 1021 114 986 q 307 1058 222 1056 l 313 988 q 203 908 203 981 q 223 862 203 881 q 276 833 243 843 l 263 778 m 439 783 l 349 1033 l 356 1047 l 457 1047 l 506 783 l 439 783 z "},\u1F14:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 211 778 l 199 833 q 251 865 232 843 q 271 917 271 888 q 161 988 271 982 l 167 1058 q 306 1024 251 1056 q 360 931 360 993 q 338 855 360 886 q 281 805 315 824 q 211 778 247 786 m 396 783 l 444 1047 l 546 1047 l 553 1033 l 463 783 l 396 783 z "},\u1F15:{ha:622,x_min:65,x_max:594,o:"m 349 -17 q 201 8 265 -17 q 101 76 138 32 q 65 181 65 121 q 108 299 65 256 q 207 356 150 342 l 207 361 q 126 422 153 381 q 99 511 99 464 q 134 612 99 572 q 228 672 169 651 q 354 692 286 692 q 472 672 415 692 q 574 617 528 653 l 528 542 q 447 586 489 571 q 358 601 406 601 q 253 575 296 601 q 211 499 211 549 q 249 424 211 453 q 365 394 286 394 q 406 397 386 394 q 451 400 425 399 l 451 303 q 353 307 397 307 q 178 196 178 307 q 226 108 178 140 q 361 75 275 75 q 454 91 410 75 q 547 144 499 107 l 594 68 q 477 2 533 21 q 349 -17 421 -17 m 297 778 q 227 803 261 786 q 171 849 193 821 q 149 921 149 878 q 203 1021 149 986 q 342 1058 257 1056 l 347 988 q 238 908 238 981 q 258 862 238 881 q 311 833 278 843 l 297 778 m 372 783 l 422 1047 l 524 1047 l 529 1033 l 440 783 l 372 783 z "},\u1F20:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 z "},\u1F21:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 450 778 q 341 824 388 789 q 294 919 294 858 q 347 1017 294 985 q 493 1051 399 1050 l 500 981 q 385 908 385 976 q 406 863 385 882 q 463 833 428 843 l 450 778 z "},\u1F74:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 421 792 l 201 1008 l 208 1021 l 333 1021 l 513 792 l 421 792 z "},\u1F75:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 299 792 l 478 1021 l 603 1021 l 610 1008 l 390 792 l 299 792 z "},\u1F22:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 244 778 l 231 833 q 284 865 264 843 q 304 917 304 888 q 194 988 304 981 l 200 1058 q 339 1024 285 1056 q 393 931 393 993 q 371 855 393 886 q 315 805 349 824 q 244 778 281 786 m 504 783 l 414 1033 l 421 1047 l 522 1047 l 571 783 l 504 783 z "},\u1F23:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 319 778 q 249 803 283 786 q 193 849 215 821 q 171 921 171 878 q 225 1021 171 986 q 364 1058 279 1056 l 369 988 q 260 908 260 981 q 280 862 260 881 q 333 833 300 843 l 319 778 m 496 783 l 406 1033 l 413 1047 l 514 1047 l 563 783 l 496 783 z "},\u1F24:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 268 778 l 256 833 q 308 865 289 843 q 328 917 328 888 q 218 988 328 982 l 224 1058 q 363 1024 308 1056 q 417 931 417 993 q 394 855 417 886 q 338 805 372 824 q 268 778 304 786 m 453 783 l 501 1047 l 603 1047 l 610 1033 l 519 783 l 453 783 z "},\u1F25:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 354 778 q 284 803 318 786 q 228 849 250 821 q 206 921 206 878 q 260 1021 206 986 q 399 1058 314 1056 l 404 988 q 294 908 294 981 q 315 862 294 881 q 368 833 335 843 l 354 778 m 429 783 l 479 1047 l 581 1047 l 586 1033 l 497 783 l 429 783 z "},\u1F26:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 368 781 l 357 826 q 415 878 415 839 q 396 908 415 897 q 322 921 376 919 l 328 976 q 499 888 499 975 q 459 815 499 842 q 368 781 419 789 m 483 1003 q 423 1017 447 1003 q 378 1047 399 1032 q 333 1061 358 1061 q 285 1003 293 1061 l 219 1008 q 250 1096 224 1061 q 328 1131 276 1131 q 388 1116 364 1131 q 433 1087 413 1101 q 478 1072 454 1072 q 526 1132 518 1072 l 592 1126 q 561 1038 588 1072 q 483 1003 535 1003 z "},\u1F27:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 443 781 q 352 813 392 788 q 313 881 313 839 q 483 976 313 975 l 489 921 q 415 907 435 919 q 396 872 396 894 q 454 826 396 842 l 443 781 m 483 1003 q 423 1017 447 1003 q 378 1047 399 1032 q 333 1061 358 1061 q 285 1003 293 1061 l 219 1008 q 250 1096 224 1061 q 328 1131 276 1131 q 388 1116 364 1131 q 433 1087 413 1101 q 478 1072 454 1072 q 526 1132 518 1072 l 592 1126 q 561 1038 588 1072 q 483 1003 535 1003 z "},\u1FC6:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 506 801 q 442 819 468 801 q 394 860 415 836 q 351 901 372 883 q 307 918 331 918 q 260 888 276 918 q 242 808 244 857 l 165 813 q 201 948 168 894 q 306 1001 233 1001 q 369 984 343 1001 q 418 943 396 967 q 460 902 440 919 q 506 885 481 885 q 551 916 536 885 q 569 994 567 947 l 646 989 q 610 855 643 908 q 506 801 578 801 z "},\u1F30:{ha:364,x_min:76,x_max:325,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 z "},\u1F31:{ha:364,x_min:60,x_max:325,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 215 778 q 106 824 153 789 q 60 919 60 858 q 112 1017 60 985 q 258 1051 164 1050 l 265 981 q 150 908 150 976 q 172 863 150 882 q 228 833 193 843 l 215 778 z "},\u1F76:{ha:364,x_min:-33,x_max:325,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 186 792 l -33 1008 l -26 1021 l 99 1021 l 278 792 l 186 792 z "},\u1F77:{ha:364,x_min:64,x_max:375,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 64 792 l 243 1021 l 368 1021 l 375 1008 l 156 792 l 64 792 z "},\u1F32:{ha:364,x_min:-40,x_max:336,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 10 778 l -4 833 q 49 865 29 843 q 69 917 69 888 q -40 988 69 981 l -35 1058 q 104 1024 50 1056 q 158 931 158 993 q 136 855 158 886 q 80 805 114 824 q 10 778 46 786 m 269 783 l 179 1033 l 186 1047 l 288 1047 l 336 783 l 269 783 z "},\u1F33:{ha:364,x_min:-64,x_max:328,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 85 778 q 15 803 49 786 q -42 849 -19 821 q -64 921 -64 878 q -10 1021 -64 986 q 129 1058 44 1056 l 135 988 q 25 908 25 981 q 45 862 25 881 q 99 833 65 843 l 85 778 m 261 783 l 171 1033 l 178 1047 l 279 1047 l 328 783 l 261 783 z "},\u1F34:{ha:364,x_min:-17,x_max:375,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 33 778 l 21 833 q 74 865 54 843 q 93 917 93 888 q -17 988 93 982 l -11 1058 q 128 1024 74 1056 q 182 931 182 993 q 160 855 182 886 q 103 805 138 824 q 33 778 69 786 m 218 783 l 267 1047 l 368 1047 l 375 1033 l 285 783 l 218 783 z "},\u1F35:{ha:364,x_min:-29,x_max:351,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 119 778 q 49 803 83 786 q -7 849 15 821 q -29 921 -29 878 q 25 1021 -29 986 q 164 1058 79 1056 l 169 988 q 60 908 60 981 q 80 862 60 881 q 133 833 100 843 l 119 778 m 194 783 l 244 1047 l 346 1047 l 351 1033 l 263 783 l 194 783 z "},\u1F36:{ha:364,x_min:-15,x_max:357,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 133 781 l 122 826 q 181 878 181 839 q 161 908 181 897 q 88 921 142 919 l 93 976 q 264 888 264 975 q 224 815 264 842 q 133 781 185 789 m 249 1003 q 188 1017 213 1003 q 144 1047 164 1032 q 99 1061 124 1061 q 50 1003 58 1061 l -15 1008 q 15 1096 -11 1061 q 93 1131 42 1131 q 153 1116 129 1131 q 199 1087 178 1101 q 243 1072 219 1072 q 292 1132 283 1072 l 357 1126 q 326 1038 353 1072 q 249 1003 300 1003 z "},\u1F37:{ha:364,x_min:-15,x_max:357,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 208 781 q 117 813 157 788 q 78 881 78 839 q 249 976 78 975 l 254 921 q 181 907 200 919 q 161 872 161 894 q 219 826 161 842 l 208 781 m 249 1003 q 188 1017 213 1003 q 144 1047 164 1032 q 99 1061 124 1061 q 50 1003 58 1061 l -15 1008 q 15 1096 -11 1061 q 93 1131 42 1131 q 153 1116 129 1131 q 199 1087 178 1101 q 243 1072 219 1072 q 292 1132 283 1072 l 357 1126 q 326 1038 353 1072 q 249 1003 300 1003 z "},\u1FD0:{ha:364,x_min:-46,x_max:388,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 171 790 q 51 822 97 790 q -19 901 4 853 q -46 1000 -42 950 l 25 1013 q 68 913 33 958 q 171 868 103 868 q 274 913 239 868 q 317 1013 308 958 l 388 1000 q 362 901 385 950 q 292 822 339 853 q 171 790 246 790 z "},\u1FD1:{ha:364,x_min:-14,x_max:356,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m -14 835 l -14 914 l 356 914 l 356 835 l -14 835 z "},\u1FD6:{ha:364,x_min:-69,x_max:411,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 271 801 q 207 819 233 801 q 159 860 181 836 q 117 901 138 883 q 72 918 96 918 q 26 888 42 918 q 7 808 10 857 l -69 813 q -34 948 -67 894 q 71 1001 -1 1001 q 135 984 108 1001 q 183 943 161 967 q 226 902 206 919 q 271 885 246 885 q 317 916 301 885 q 335 994 332 947 l 411 989 q 376 855 408 908 q 271 801 343 801 z "},\u1FD2:{ha:364,x_min:-54,x_max:396,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 11 818 q -35 837 -17 818 q -54 882 -54 856 q -35 928 -54 910 q 11 947 -17 947 q 58 928 40 947 q 76 882 76 910 q 58 837 76 856 q 11 818 40 818 m 331 818 q 283 837 301 818 q 265 882 265 856 q 283 928 265 910 q 331 947 301 947 q 377 928 358 947 q 396 882 396 910 q 377 837 396 856 q 331 818 358 818 m 171 783 l 76 1033 l 83 1047 l 174 1047 l 228 783 l 171 783 z "},\u1FD3:{ha:364,x_min:-54,x_max:396,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 11 818 q -35 837 -17 818 q -54 882 -54 856 q -35 928 -54 910 q 11 947 -17 947 q 58 928 40 947 q 76 882 76 910 q 58 837 76 856 q 11 818 40 818 m 331 818 q 283 837 301 818 q 265 882 265 856 q 283 928 265 910 q 331 947 301 947 q 377 928 358 947 q 396 882 396 910 q 377 837 396 856 q 331 818 358 818 m 114 783 l 168 1047 l 258 1047 l 265 1033 l 171 783 l 114 783 z "},\u1FD7:{ha:364,x_min:-40,x_max:382,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 675 l 229 675 q 224 397 226 539 q 221 136 221 256 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 m 38 815 q -10 835 8 815 q -29 882 -29 856 q -10 930 -29 910 q 38 950 8 950 q 85 930 65 950 q 104 882 104 910 q 85 835 104 856 q 38 815 65 815 m 304 815 q 257 835 276 815 q 238 882 238 856 q 257 930 238 910 q 304 950 276 950 q 352 930 333 950 q 371 882 371 910 q 352 835 371 856 q 304 815 333 815 m 267 997 q 205 1008 229 997 q 162 1032 181 1018 q 124 1056 143 1046 q 81 1067 106 1067 q 25 1003 35 1067 l -40 1008 q -8 1100 -36 1064 q 75 1136 21 1136 q 137 1126 113 1136 q 180 1102 161 1115 q 217 1078 199 1089 q 261 1068 236 1068 q 317 1132 307 1068 l 382 1126 q 349 1034 378 1071 q 267 997 321 997 z "},\u1F40:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 z "},\u1F41:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 418 778 q 309 824 356 789 q 263 919 263 858 q 315 1017 263 985 q 461 1051 367 1050 l 468 981 q 353 908 353 976 q 374 863 353 882 q 431 833 396 843 l 418 778 z "},\u1F78:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 389 792 l 169 1008 l 176 1021 l 301 1021 l 481 792 l 389 792 z "},\u1F79:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 267 792 l 446 1021 l 571 1021 l 578 1008 l 358 792 l 267 792 z "},\u1F42:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 213 778 l 199 833 q 252 865 232 843 q 272 917 272 888 q 163 988 272 981 l 168 1058 q 307 1024 253 1056 q 361 931 361 993 q 339 855 361 886 q 283 805 317 824 q 213 778 249 786 m 472 783 l 382 1033 l 389 1047 l 490 1047 l 539 783 l 472 783 z "},\u1F43:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 288 778 q 217 803 251 786 q 161 849 183 821 q 139 921 139 878 q 193 1021 139 986 q 332 1058 247 1056 l 338 988 q 228 908 228 981 q 248 862 228 881 q 301 833 268 843 l 288 778 m 464 783 l 374 1033 l 381 1047 l 482 1047 l 531 783 l 464 783 z "},\u1F44:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 236 778 l 224 833 q 276 865 257 843 q 296 917 296 888 q 186 988 296 982 l 192 1058 q 331 1024 276 1056 q 385 931 385 993 q 363 855 385 886 q 306 805 340 824 q 236 778 272 786 m 421 783 l 469 1047 l 571 1047 l 578 1033 l 488 783 l 421 783 z "},\u1F45:{ha:743,x_min:64,x_max:679,o:"m 371 -17 q 217 24 288 -17 q 106 144 147 65 q 64 336 64 224 q 106 529 64 450 q 217 650 147 608 q 371 692 288 692 q 526 650 456 692 q 638 529 596 608 q 679 336 679 450 q 638 144 679 224 q 526 24 596 65 q 371 -17 456 -17 m 371 78 q 511 149 461 78 q 561 336 561 219 q 511 526 561 454 q 371 597 461 597 q 232 526 282 597 q 182 336 182 454 q 232 149 182 219 q 371 78 282 78 m 322 778 q 252 803 286 786 q 196 849 218 821 q 174 921 174 878 q 228 1021 174 986 q 367 1058 282 1056 l 372 988 q 263 908 263 981 q 283 862 263 881 q 336 833 303 843 l 322 778 m 397 783 l 447 1047 l 549 1047 l 554 1033 l 465 783 l 397 783 z "},\u1FE4:{ha:763,x_min:108,x_max:697,o:"m 108 -249 l 108 344 q 149 539 108 463 q 256 653 189 615 q 406 692 324 692 q 622 600 547 692 q 697 347 697 508 q 657 151 697 233 q 553 26 617 69 q 419 -17 490 -17 q 314 4 365 -17 q 215 79 263 25 q 220 -85 218 -11 q 224 -249 222 -158 l 108 -249 m 399 79 q 526 151 474 79 q 579 347 579 222 q 538 527 579 458 q 401 596 496 596 q 273 533 328 596 q 218 343 218 471 l 218 171 q 310 97 265 114 q 399 79 356 79 z "},\u1FE5:{ha:763,x_min:108,x_max:697,o:"m 108 -249 l 108 344 q 149 539 108 463 q 256 653 189 615 q 406 692 324 692 q 622 600 547 692 q 697 347 697 508 q 657 151 697 233 q 553 26 617 69 q 419 -17 490 -17 q 314 4 365 -17 q 215 79 263 25 q 220 -85 218 -11 q 224 -249 222 -158 l 108 -249 m 399 79 q 526 151 474 79 q 579 347 579 222 q 538 527 579 458 q 401 596 496 596 q 273 533 328 596 q 218 343 218 471 l 218 171 q 310 97 265 114 q 399 79 356 79 m 453 778 q 344 824 390 789 q 297 919 297 858 q 349 1017 297 985 q 496 1051 401 1050 l 503 981 q 388 908 388 976 q 409 863 388 882 q 465 833 431 843 l 453 778 z "},\u1F50:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 z "},\u1F51:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 385 778 q 276 824 322 789 q 229 919 229 858 q 281 1017 229 985 q 428 1051 333 1050 l 435 981 q 319 908 319 976 q 341 863 319 882 q 397 833 363 843 l 385 778 z "},\u1F7A:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 356 792 l 136 1008 l 143 1021 l 268 1021 l 447 792 l 356 792 z "},\u1F7B:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 233 792 l 413 1021 l 538 1021 l 544 1008 l 325 792 l 233 792 z "},\u1F52:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 179 778 l 165 833 q 219 865 199 843 q 239 917 239 888 q 129 988 239 981 l 135 1058 q 274 1024 219 1056 q 328 931 328 993 q 306 855 328 886 q 249 805 283 824 q 179 778 215 786 m 439 783 l 349 1033 l 356 1047 l 457 1047 l 506 783 l 439 783 z "},\u1F53:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 254 778 q 184 803 218 786 q 128 849 150 821 q 106 921 106 878 q 160 1021 106 986 q 299 1058 214 1056 l 304 988 q 194 908 194 981 q 215 862 194 881 q 268 833 235 843 l 254 778 m 431 783 l 340 1033 l 347 1047 l 449 1047 l 497 783 l 431 783 z "},\u1F54:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 203 778 l 190 833 q 243 865 224 843 q 263 917 263 888 q 153 988 263 982 l 158 1058 q 297 1024 243 1056 q 351 931 351 993 q 329 855 351 886 q 273 805 307 824 q 203 778 239 786 m 388 783 l 436 1047 l 538 1047 l 544 1033 l 454 783 l 388 783 z "},\u1F55:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 289 778 q 219 803 253 786 q 163 849 185 821 q 140 921 140 878 q 194 1021 140 986 q 333 1058 249 1056 l 339 988 q 229 908 229 981 q 249 862 229 881 q 303 833 269 843 l 289 778 m 364 783 l 414 1047 l 515 1047 l 521 1033 l 432 783 l 364 783 z "},\u1F56:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 303 781 l 292 826 q 350 878 350 839 q 331 908 350 897 q 257 921 311 919 l 263 976 q 433 888 433 975 q 394 815 433 842 q 303 781 354 789 m 418 1003 q 358 1017 382 1003 q 313 1047 333 1032 q 268 1061 293 1061 q 219 1003 228 1061 l 154 1008 q 185 1096 158 1061 q 263 1131 211 1131 q 323 1116 299 1131 q 368 1087 347 1101 q 413 1072 389 1072 q 461 1132 453 1072 l 526 1126 q 496 1038 522 1072 q 418 1003 469 1003 z "},\u1F57:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 378 781 q 287 813 326 788 q 247 881 247 839 q 418 976 247 975 l 424 921 q 350 907 369 919 q 331 872 331 894 q 389 826 331 842 l 378 781 m 418 1003 q 358 1017 382 1003 q 313 1047 333 1032 q 268 1061 293 1061 q 219 1003 228 1061 l 154 1008 q 185 1096 158 1061 q 263 1131 211 1131 q 323 1116 299 1131 q 368 1087 347 1101 q 413 1072 389 1072 q 461 1132 453 1072 l 526 1126 q 496 1038 522 1072 q 418 1003 469 1003 z "},\u1FE6:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 440 801 q 376 819 403 801 q 328 860 350 836 q 286 901 307 883 q 242 918 265 918 q 195 888 211 918 q 176 808 179 857 l 100 813 q 135 948 103 894 q 240 1001 168 1001 q 304 984 278 1001 q 353 943 331 967 q 395 902 375 919 q 440 885 415 885 q 486 916 471 885 q 504 994 501 947 l 581 989 q 545 855 578 908 q 440 801 513 801 z "},\u1FE0:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 340 790 q 220 822 267 790 q 151 901 174 853 q 124 1000 128 950 l 194 1013 q 238 913 203 958 q 340 868 272 868 q 443 913 408 868 q 486 1013 478 958 l 557 1000 q 531 901 554 950 q 462 822 508 853 q 340 790 415 790 z "},\u1FE1:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 156 835 l 156 914 l 525 914 l 525 835 l 156 835 z "},\u1FE2:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 181 818 q 134 837 153 818 q 115 882 115 856 q 134 928 115 910 q 181 947 153 947 q 228 928 210 947 q 246 882 246 910 q 228 837 246 856 q 181 818 210 818 m 500 818 q 453 837 471 818 q 435 882 435 856 q 453 928 435 910 q 500 947 471 947 q 547 928 528 947 q 565 882 565 910 q 547 837 565 856 q 500 818 528 818 m 340 783 l 246 1033 l 253 1047 l 343 1047 l 397 783 l 340 783 z "},\u1FE3:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 181 818 q 134 837 153 818 q 115 882 115 856 q 134 928 115 910 q 181 947 153 947 q 228 928 210 947 q 246 882 246 910 q 228 837 246 856 q 181 818 210 818 m 500 818 q 453 837 471 818 q 435 882 435 856 q 453 928 435 910 q 500 947 471 947 q 547 928 528 947 q 565 882 565 910 q 547 837 565 856 q 500 818 528 818 m 283 783 l 338 1047 l 428 1047 l 435 1033 l 340 783 l 283 783 z "},\u1FE7:{ha:708,x_min:83,x_max:632,o:"m 346 -17 q 157 50 225 -17 q 89 250 89 117 q 92 371 89 311 q 94 490 94 431 q 92 576 94 531 q 83 675 90 622 l 194 675 q 203 601 201 640 q 206 518 206 563 q 201 384 206 461 q 197 244 197 307 q 242 116 197 154 q 347 78 288 78 q 469 140 421 78 q 517 333 517 203 q 505 492 517 411 q 461 665 493 572 l 572 692 q 617 516 601 604 q 632 338 632 428 q 553 74 632 165 q 346 -17 474 -17 m 207 815 q 159 835 178 815 q 140 882 140 856 q 159 930 140 910 q 207 950 178 950 q 254 930 235 950 q 274 882 274 910 q 254 835 274 856 q 207 815 235 815 m 474 815 q 426 835 446 815 q 407 882 407 856 q 426 930 407 910 q 474 950 446 950 q 522 930 503 950 q 540 882 540 910 q 522 835 540 856 q 474 815 503 815 m 436 997 q 374 1008 399 997 q 331 1032 350 1018 q 294 1056 313 1046 q 250 1067 275 1067 q 194 1003 204 1067 l 129 1008 q 162 1100 133 1064 q 244 1136 190 1136 q 306 1126 282 1136 q 349 1102 331 1115 q 387 1078 368 1089 q 431 1068 406 1068 q 486 1132 476 1068 l 551 1126 q 519 1034 547 1071 q 436 997 490 997 z "},\u1F60:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 z "},\u1F61:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 528 778 q 419 824 465 789 q 372 919 372 858 q 424 1017 372 985 q 571 1051 476 1050 l 578 981 q 463 908 463 976 q 484 863 463 882 q 540 833 506 843 l 528 778 z "},\u1F7C:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 499 792 l 279 1008 l 286 1021 l 411 1021 l 590 792 l 499 792 z "},\u1F7D:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 376 792 l 556 1021 l 681 1021 l 688 1008 l 468 792 l 376 792 z "},\u1F62:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 322 778 l 308 833 q 362 865 342 843 q 382 917 382 888 q 272 988 382 981 l 278 1058 q 417 1024 363 1056 q 471 931 471 993 q 449 855 471 886 q 392 805 426 824 q 322 778 358 786 m 582 783 l 492 1033 l 499 1047 l 600 1047 l 649 783 l 582 783 z "},\u1F63:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 397 778 q 327 803 361 786 q 271 849 293 821 q 249 921 249 878 q 303 1021 249 986 q 442 1058 357 1056 l 447 988 q 338 908 338 981 q 358 862 338 881 q 411 833 378 843 l 397 778 m 574 783 l 483 1033 l 490 1047 l 592 1047 l 640 783 l 574 783 z "},\u1F64:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 346 778 l 333 833 q 386 865 367 843 q 406 917 406 888 q 296 988 406 982 l 301 1058 q 440 1024 386 1056 q 494 931 494 993 q 472 855 494 886 q 416 805 450 824 q 346 778 382 786 m 531 783 l 579 1047 l 681 1047 l 688 1033 l 597 783 l 531 783 z "},\u1F65:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 432 778 q 362 803 396 786 q 306 849 328 821 q 283 921 283 878 q 338 1021 283 986 q 476 1058 392 1056 l 482 988 q 372 908 372 981 q 392 862 372 881 q 446 833 413 843 l 432 778 m 507 783 l 557 1047 l 658 1047 l 664 1033 l 575 783 l 507 783 z "},\u1F66:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 446 781 l 435 826 q 493 878 493 839 q 474 908 493 897 q 400 921 454 919 l 406 976 q 576 888 576 975 q 537 815 576 842 q 446 781 497 789 m 561 1003 q 501 1017 525 1003 q 456 1047 476 1032 q 411 1061 436 1061 q 363 1003 371 1061 l 297 1008 q 328 1096 301 1061 q 406 1131 354 1131 q 466 1116 442 1131 q 511 1087 490 1101 q 556 1072 532 1072 q 604 1132 596 1072 l 669 1126 q 639 1038 665 1072 q 561 1003 613 1003 z "},\u1F67:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 521 781 q 430 813 469 788 q 390 881 390 839 q 561 976 390 975 l 567 921 q 493 907 513 919 q 474 872 474 894 q 532 826 474 842 l 521 781 m 561 1003 q 501 1017 525 1003 q 456 1047 476 1032 q 411 1061 436 1061 q 363 1003 371 1061 l 297 1008 q 328 1096 301 1061 q 406 1131 354 1131 q 466 1116 442 1131 q 511 1087 490 1101 q 556 1072 532 1072 q 604 1132 596 1072 l 669 1126 q 639 1038 665 1072 q 561 1003 613 1003 z "},\u1FF6:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 583 801 q 519 819 546 801 q 472 860 493 836 q 429 901 450 883 q 385 918 408 918 q 338 888 354 918 q 319 808 322 857 l 243 813 q 278 948 246 894 q 383 1001 311 1001 q 447 984 421 1001 q 496 943 474 967 q 538 902 518 919 q 583 885 558 885 q 629 916 614 885 q 647 994 644 947 l 724 989 q 688 855 721 908 q 583 801 656 801 z "},\u1FB3:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 z "},\u1F80:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 z "},\u1F81:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 443 778 q 334 824 381 789 q 288 919 288 858 q 340 1017 288 985 q 486 1051 392 1050 l 493 981 q 378 908 378 976 q 399 863 378 882 q 456 833 421 843 l 443 778 z "},\u1FB2:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 414 792 l 194 1008 l 201 1021 l 326 1021 l 506 792 l 414 792 z "},\u1FB4:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 292 792 l 471 1021 l 596 1021 l 603 1008 l 383 792 l 292 792 z "},\u1F82:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 238 778 l 224 833 q 277 865 257 843 q 297 917 297 888 q 188 988 297 981 l 193 1058 q 332 1024 278 1056 q 386 931 386 993 q 364 855 386 886 q 308 805 342 824 q 238 778 274 786 m 497 783 l 407 1033 l 414 1047 l 515 1047 l 564 783 l 497 783 z "},\u1F83:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 313 778 q 242 803 276 786 q 186 849 208 821 q 164 921 164 878 q 218 1021 164 986 q 357 1058 272 1056 l 363 988 q 253 908 253 981 q 273 862 253 881 q 326 833 293 843 l 313 778 m 489 783 l 399 1033 l 406 1047 l 507 1047 l 556 783 l 489 783 z "},\u1F84:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 261 778 l 249 833 q 301 865 282 843 q 321 917 321 888 q 211 988 321 982 l 217 1058 q 356 1024 301 1056 q 410 931 410 993 q 388 855 410 886 q 331 805 365 824 q 261 778 297 786 m 446 783 l 494 1047 l 596 1047 l 603 1033 l 513 783 l 446 783 z "},\u1F85:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 347 778 q 277 803 311 786 q 221 849 243 821 q 199 921 199 878 q 253 1021 199 986 q 392 1058 307 1056 l 397 988 q 288 908 288 981 q 308 862 288 881 q 361 833 328 843 l 347 778 m 422 783 l 472 1047 l 574 1047 l 579 1033 l 490 783 l 422 783 z "},\u1F86:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 361 781 l 350 826 q 408 878 408 839 q 389 908 408 897 q 315 921 369 919 l 321 976 q 492 888 492 975 q 452 815 492 842 q 361 781 413 789 m 476 1003 q 416 1017 440 1003 q 372 1047 392 1032 q 326 1061 351 1061 q 278 1003 286 1061 l 213 1008 q 243 1096 217 1061 q 321 1131 269 1131 q 381 1116 357 1131 q 426 1087 406 1101 q 471 1072 447 1072 q 519 1132 511 1072 l 585 1126 q 554 1038 581 1072 q 476 1003 528 1003 z "},\u1F87:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 436 781 q 345 813 385 788 q 306 881 306 839 q 476 976 306 975 l 482 921 q 408 907 428 919 q 389 872 389 894 q 447 826 389 842 l 436 781 m 476 1003 q 416 1017 440 1003 q 372 1047 392 1032 q 326 1061 351 1061 q 278 1003 286 1061 l 213 1008 q 243 1096 217 1061 q 321 1131 269 1131 q 381 1116 357 1131 q 426 1087 406 1101 q 471 1072 447 1072 q 519 1132 511 1072 l 585 1126 q 554 1038 581 1072 q 476 1003 528 1003 z "},\u1FB7:{ha:778,x_min:64,x_max:758,o:"m 324 -17 q 136 72 208 -17 q 64 325 64 160 q 106 524 64 442 q 215 649 147 606 q 360 692 282 692 q 481 651 422 692 q 568 515 539 611 l 571 515 l 600 675 l 713 675 q 675 488 694 586 q 642 300 656 389 q 628 149 628 211 q 648 96 628 114 q 694 78 668 78 q 719 81 706 78 q 742 89 732 85 l 758 1 q 723 -10 744 -4 q 671 -17 701 -17 q 574 17 611 -17 q 538 121 538 50 l 533 121 q 324 -17 457 -17 m 347 79 q 432 108 392 79 q 499 184 472 136 q 531 289 526 232 l 542 415 q 496 528 524 489 q 436 581 468 567 q 372 596 404 596 q 280 565 324 596 q 209 475 236 535 q 182 326 182 415 q 226 144 182 208 q 347 79 269 79 m 461 -279 q 354 -150 354 -279 l 354 -86 l 443 -86 q 441 -124 442 -104 q 440 -160 440 -144 q 453 -192 440 -182 q 482 -203 465 -203 q 493 -202 488 -203 q 513 -199 499 -201 l 525 -267 q 498 -276 511 -272 q 461 -279 485 -279 m 499 801 q 435 819 461 801 q 387 860 408 836 q 344 901 365 883 q 300 918 324 918 q 253 888 269 918 q 235 808 238 857 l 158 813 q 194 948 161 894 q 299 1001 226 1001 q 363 984 336 1001 q 411 943 389 967 q 453 902 433 919 q 499 885 474 885 q 544 916 529 885 q 563 994 560 947 l 639 989 q 603 855 636 908 q 499 801 571 801 z "},\u1FC3:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 z "},\u1F90:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 z "},\u1F91:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 450 778 q 341 824 388 789 q 294 919 294 858 q 347 1017 294 985 q 493 1051 399 1050 l 500 981 q 385 908 385 976 q 406 863 385 882 q 463 833 428 843 l 450 778 z "},\u1FC2:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 421 792 l 201 1008 l 208 1021 l 333 1021 l 513 792 l 421 792 z "},\u1FC4:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 299 792 l 478 1021 l 603 1021 l 610 1008 l 390 792 l 299 792 z "},\u1F92:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 244 778 l 231 833 q 284 865 264 843 q 304 917 304 888 q 194 988 304 981 l 200 1058 q 339 1024 285 1056 q 393 931 393 993 q 371 855 393 886 q 315 805 349 824 q 244 778 281 786 m 504 783 l 414 1033 l 421 1047 l 522 1047 l 571 783 l 504 783 z "},\u1F93:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 319 778 q 249 803 283 786 q 193 849 215 821 q 171 921 171 878 q 225 1021 171 986 q 364 1058 279 1056 l 369 988 q 260 908 260 981 q 280 862 260 881 q 333 833 300 843 l 319 778 m 496 783 l 406 1033 l 413 1047 l 514 1047 l 563 783 l 496 783 z "},\u1F94:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 268 778 l 256 833 q 308 865 289 843 q 328 917 328 888 q 218 988 328 982 l 224 1058 q 363 1024 308 1056 q 417 931 417 993 q 394 855 417 886 q 338 805 372 824 q 268 778 304 786 m 453 783 l 501 1047 l 603 1047 l 610 1033 l 519 783 l 453 783 z "},\u1F95:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 354 778 q 284 803 318 786 q 228 849 250 821 q 206 921 206 878 q 260 1021 206 986 q 399 1058 314 1056 l 404 988 q 294 908 294 981 q 315 862 294 881 q 368 833 335 843 l 354 778 m 429 783 l 479 1047 l 581 1047 l 586 1033 l 497 783 l 429 783 z "},\u1F96:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 368 781 l 357 826 q 415 878 415 839 q 396 908 415 897 q 322 921 376 919 l 328 976 q 499 888 499 975 q 459 815 499 842 q 368 781 419 789 m 483 1003 q 423 1017 447 1003 q 378 1047 399 1032 q 333 1061 358 1061 q 285 1003 293 1061 l 219 1008 q 250 1096 224 1061 q 328 1131 276 1131 q 388 1116 364 1131 q 433 1087 413 1101 q 478 1072 454 1072 q 526 1132 518 1072 l 592 1126 q 561 1038 588 1072 q 483 1003 535 1003 z "},\u1F97:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 443 781 q 352 813 392 788 q 313 881 313 839 q 483 976 313 975 l 489 921 q 415 907 435 919 q 396 872 396 894 q 454 826 396 842 l 443 781 m 483 1003 q 423 1017 447 1003 q 378 1047 399 1032 q 333 1061 358 1061 q 285 1003 293 1061 l 219 1008 q 250 1096 224 1061 q 328 1131 276 1131 q 388 1116 364 1131 q 433 1087 413 1101 q 478 1072 454 1072 q 526 1132 518 1072 l 592 1126 q 561 1038 588 1072 q 483 1003 535 1003 z "},\u1FC7:{ha:751,x_min:104,x_max:646,o:"m 531 -249 q 535 -22 533 -137 q 538 204 538 93 q 539 413 539 315 q 514 550 539 507 q 429 593 489 593 q 329 560 374 593 q 228 442 285 528 l 228 0 l 114 0 l 114 490 q 113 576 114 531 q 104 675 111 622 l 208 675 l 218 535 l 222 535 q 331 652 275 613 q 463 692 388 692 q 603 624 561 692 q 646 428 646 557 l 646 -249 l 531 -249 m 225 -279 q 118 -150 118 -279 l 118 -86 l 207 -86 q 205 -124 206 -104 q 204 -160 204 -144 q 217 -192 204 -182 q 246 -203 229 -203 q 257 -202 251 -203 q 276 -199 263 -201 l 289 -267 q 262 -276 275 -272 q 225 -279 249 -279 m 506 801 q 442 819 468 801 q 394 860 415 836 q 351 901 372 883 q 307 918 331 918 q 260 888 276 918 q 242 808 244 857 l 165 813 q 201 948 168 894 q 306 1001 233 1001 q 369 984 343 1001 q 418 943 396 967 q 460 902 440 919 q 506 885 481 885 q 551 916 536 885 q 569 994 567 947 l 646 989 q 610 855 643 908 q 506 801 578 801 z "},\u1FF3:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 z "},\u1FA0:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 z "},\u1FA1:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 528 778 q 419 824 465 789 q 372 919 372 858 q 424 1017 372 985 q 571 1051 476 1050 l 578 981 q 463 908 463 976 q 484 863 463 882 q 540 833 506 843 l 528 778 z "},\u1FF2:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 499 792 l 279 1008 l 286 1021 l 411 1021 l 590 792 l 499 792 z "},\u1FF4:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 376 792 l 556 1021 l 681 1021 l 688 1008 l 468 792 l 376 792 z "},\u1FA2:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 322 778 l 308 833 q 362 865 342 843 q 382 917 382 888 q 272 988 382 981 l 278 1058 q 417 1024 363 1056 q 471 931 471 993 q 449 855 471 886 q 392 805 426 824 q 322 778 358 786 m 582 783 l 492 1033 l 499 1047 l 600 1047 l 649 783 l 582 783 z "},\u1FA3:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 397 778 q 327 803 361 786 q 271 849 293 821 q 249 921 249 878 q 303 1021 249 986 q 442 1058 357 1056 l 447 988 q 338 908 338 981 q 358 862 338 881 q 411 833 378 843 l 397 778 m 574 783 l 483 1033 l 490 1047 l 592 1047 l 640 783 l 574 783 z "},\u1FA4:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 346 778 l 333 833 q 386 865 367 843 q 406 917 406 888 q 296 988 406 982 l 301 1058 q 440 1024 386 1056 q 494 931 494 993 q 472 855 494 886 q 416 805 450 824 q 346 778 382 786 m 531 783 l 579 1047 l 681 1047 l 688 1033 l 597 783 l 531 783 z "},\u1FA5:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 432 778 q 362 803 396 786 q 306 849 328 821 q 283 921 283 878 q 338 1021 283 986 q 476 1058 392 1056 l 482 988 q 372 908 372 981 q 392 862 372 881 q 446 833 413 843 l 432 778 m 507 783 l 557 1047 l 658 1047 l 664 1033 l 575 783 l 507 783 z "},\u1FA6:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 446 781 l 435 826 q 493 878 493 839 q 474 908 493 897 q 400 921 454 919 l 406 976 q 576 888 576 975 q 537 815 576 842 q 446 781 497 789 m 561 1003 q 501 1017 525 1003 q 456 1047 476 1032 q 411 1061 436 1061 q 363 1003 371 1061 l 297 1008 q 328 1096 301 1061 q 406 1131 354 1131 q 466 1116 442 1131 q 511 1087 490 1101 q 556 1072 532 1072 q 604 1132 596 1072 l 669 1126 q 639 1038 665 1072 q 561 1003 613 1003 z "},\u1FA7:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 521 781 q 430 813 469 788 q 390 881 390 839 q 561 976 390 975 l 567 921 q 493 907 513 919 q 474 872 474 894 q 532 826 474 842 l 521 781 m 561 1003 q 501 1017 525 1003 q 456 1047 476 1032 q 411 1061 436 1061 q 363 1003 371 1061 l 297 1008 q 328 1096 301 1061 q 406 1131 354 1131 q 466 1116 442 1131 q 511 1087 490 1101 q 556 1072 532 1072 q 604 1132 596 1072 l 669 1126 q 639 1038 665 1072 q 561 1003 613 1003 z "},\u1FF7:{ha:974,x_min:71,x_max:903,o:"m 285 -17 q 131 69 192 -17 q 71 311 71 156 q 105 510 71 408 q 192 692 139 613 l 296 646 q 181 300 181 481 q 214 138 181 197 q 304 78 247 78 q 366 100 336 78 q 415 172 396 122 q 433 306 433 222 q 431 382 433 344 q 422 469 428 419 l 547 469 q 539 382 542 419 q 536 306 536 344 q 555 169 536 219 q 603 99 574 119 q 664 78 633 78 q 753 138 721 78 q 786 315 786 199 q 762 485 786 406 q 681 649 738 564 l 785 692 q 871 517 839 611 q 903 317 903 424 q 846 70 903 157 q 685 -17 789 -17 q 560 30 617 -17 q 489 171 504 76 l 483 171 q 412 30 465 76 q 285 -17 358 -17 m 544 -279 q 438 -150 438 -279 l 438 -86 l 526 -86 q 524 -124 525 -104 q 524 -160 524 -144 q 536 -192 524 -182 q 565 -203 549 -203 q 576 -202 571 -203 q 596 -199 582 -201 l 608 -267 q 581 -276 594 -272 q 544 -279 568 -279 m 583 801 q 519 819 546 801 q 472 860 493 836 q 429 901 450 883 q 385 918 408 918 q 338 888 354 918 q 319 808 322 857 l 243 813 q 278 948 246 894 q 383 1001 311 1001 q 447 984 421 1001 q 496 943 474 967 q 538 902 518 919 q 583 885 558 885 q 629 916 614 885 q 647 994 644 947 l 724 989 q 688 855 721 908 q 583 801 656 801 z "},\u03D7:{ha:725,x_min:78,x_max:688,o:"m 114 0 l 114 490 q 112 581 114 531 q 101 675 110 631 l 214 675 q 224 606 221 649 q 226 518 226 563 l 226 307 l 232 307 q 351 481 286 400 q 489 617 417 561 q 633 692 561 674 l 644 583 q 390 392 526 544 q 609 301 531 379 q 688 90 688 224 q 588 -172 688 -78 q 313 -265 488 -265 q 180 -248 238 -265 q 78 -200 122 -231 l 114 -125 q 303 -176 192 -176 q 503 -103 435 -176 q 572 89 572 -29 q 508 256 572 196 q 329 319 443 315 q 303 285 317 303 q 276 249 290 268 q 234 155 246 208 q 221 35 222 101 l 221 0 l 114 0 z "},"\u03CF":{ha:813,x_min:88,x_max:774,o:"m 125 0 l 125 911 l 240 911 l 240 454 l 244 454 l 624 911 l 754 911 l 446 538 q 615 482 542 526 q 731 358 689 438 q 774 158 774 279 q 719 -51 774 36 q 571 -183 665 -137 q 354 -229 476 -229 q 88 -165 185 -229 l 128 -82 q 227 -120 168 -107 q 347 -133 286 -133 q 510 -97 440 -133 q 618 6 579 -60 q 657 158 657 71 q 583 372 657 301 q 372 447 510 442 l 240 289 l 240 0 l 125 0 z "},"\u037E":{ha:346,x_min:65,x_max:275,o:"z "},"\u0387":{ha:346,x_min:90,x_max:256,o:"m 174 485 q 115 509 139 485 q 90 571 90 533 q 115 635 90 611 q 174 660 139 660 q 231 635 207 660 q 256 571 256 611 q 231 509 256 533 q 174 485 207 485 z "},"\u0374":{ha:346,x_min:114,x_max:257,o:"m 114 624 l 144 958 l 257 958 l 236 831 l 189 624 l 114 624 z "},"\u0375":{ha:346,x_min:89,x_max:232,o:"m 89 0 l 110 128 l 157 336 l 232 336 l 201 0 l 89 0 z "},"\u0384":{ha:753,x_min:314,x_max:492,o:"m 314 783 l 368 1044 l 485 1044 l 492 1032 l 397 783 l 314 783 z "},"\u0385":{ha:753,x_min:160,x_max:610,o:"m 225 818 q 178 837 197 818 q 160 882 160 856 q 178 928 160 910 q 225 947 197 947 q 272 928 254 947 q 290 882 290 910 q 272 837 290 856 q 225 818 254 818 m 544 818 q 497 837 515 818 q 479 882 479 856 q 497 928 479 910 q 544 947 515 947 q 591 928 572 947 q 610 882 610 910 q 591 837 610 856 q 544 818 572 818 m 328 783 l 382 1047 l 472 1047 l 479 1033 l 385 783 l 328 783 z "},\u037A:{ha:753,x_min:339,x_max:510,o:"m 446 -279 q 339 -150 339 -279 l 339 -86 l 428 -86 q 426 -124 426 -104 q 425 -160 425 -144 q 438 -192 425 -182 q 467 -203 450 -203 q 478 -202 472 -203 q 497 -199 483 -201 l 510 -267 q 483 -276 496 -272 q 446 -279 469 -279 z "},\u1FBE:{ha:364,x_min:114,x_max:325,o:"m 243 -12 q 143 28 172 -12 q 114 144 114 68 l 114 564 l 229 564 q 224 344 226 453 q 221 136 221 235 q 268 82 221 82 q 310 90 285 82 l 325 3 q 290 -8 310 -3 q 243 -12 271 -12 z "},"\u1FBD":{ha:753,x_min:282,x_max:488,o:"z "},"\u1FBF":{ha:753,x_min:282,x_max:488,o:"z "},"\u1FFE":{ha:753,x_min:265,x_max:471,o:"m 421 778 q 312 824 358 789 q 265 919 265 858 q 317 1017 265 985 q 464 1051 369 1050 l 471 981 q 356 908 356 976 q 377 863 356 882 q 433 833 399 843 l 421 778 z "},"\u1FEF":{ha:753,x_min:261,x_max:439,o:"m 356 786 l 261 1032 l 268 1044 l 385 1044 l 439 786 l 356 786 z "},"\u1FFD":{ha:753,x_min:314,x_max:492,o:"m 314 783 l 368 1044 l 485 1044 l 492 1032 l 397 783 l 314 783 z "},"\u1FCD":{ha:753,x_min:165,x_max:542,o:"m 215 778 l 201 833 q 255 865 235 843 q 275 917 275 888 q 165 988 275 981 l 171 1058 q 310 1024 256 1056 q 364 931 364 993 q 342 855 364 886 q 285 805 319 824 q 215 778 251 786 m 475 783 l 385 1033 l 392 1047 l 493 1047 l 542 783 l 475 783 z "},"\u1FDD":{ha:753,x_min:142,x_max:533,o:"m 290 778 q 220 803 254 786 q 164 849 186 821 q 142 921 142 878 q 196 1021 142 986 q 335 1058 250 1056 l 340 988 q 231 908 231 981 q 251 862 231 881 q 304 833 271 843 l 290 778 m 467 783 l 376 1033 l 383 1047 l 485 1047 l 533 783 l 467 783 z "},"\u1FCE":{ha:753,x_min:189,x_max:581,o:"m 239 778 l 226 833 q 279 865 260 843 q 299 917 299 888 q 189 988 299 982 l 194 1058 q 333 1024 279 1056 q 388 931 388 993 q 365 855 388 886 q 309 805 343 824 q 239 778 275 786 m 424 783 l 472 1047 l 574 1047 l 581 1033 l 490 783 l 424 783 z "},"\u1FDE":{ha:753,x_min:176,x_max:557,o:"m 325 778 q 255 803 289 786 q 199 849 221 821 q 176 921 176 878 q 231 1021 176 986 q 369 1058 285 1056 l 375 988 q 265 908 265 981 q 285 862 265 881 q 339 833 306 843 l 325 778 m 400 783 l 450 1047 l 551 1047 l 557 1033 l 468 783 l 400 783 z "},"\u1FCF":{ha:753,x_min:190,x_max:563,o:"m 339 781 l 328 826 q 386 878 386 839 q 367 908 386 897 q 293 921 347 919 l 299 976 q 469 888 469 975 q 430 815 469 842 q 339 781 390 789 m 454 1003 q 394 1017 418 1003 q 349 1047 369 1032 q 304 1061 329 1061 q 256 1003 264 1061 l 190 1008 q 221 1096 194 1061 q 299 1131 247 1131 q 359 1116 335 1131 q 404 1087 383 1101 q 449 1072 425 1072 q 497 1132 489 1072 l 563 1126 q 532 1038 558 1072 q 454 1003 506 1003 z "},"\u1FDF":{ha:753,x_min:190,x_max:563,o:"m 414 781 q 323 813 363 788 q 283 881 283 839 q 454 976 283 975 l 460 921 q 386 907 406 919 q 367 872 367 894 q 425 826 367 842 l 414 781 m 454 1003 q 394 1017 418 1003 q 349 1047 369 1032 q 304 1061 329 1061 q 256 1003 264 1061 l 190 1008 q 221 1096 194 1061 q 299 1131 247 1131 q 359 1116 335 1131 q 404 1087 383 1101 q 449 1072 425 1072 q 497 1132 489 1072 l 563 1126 q 532 1038 558 1072 q 454 1003 506 1003 z "},"\u1FC0":{ha:753,x_min:136,x_max:617,o:"m 476 801 q 413 819 439 801 q 365 860 386 836 q 322 901 343 883 q 278 918 301 918 q 231 888 247 918 q 213 808 215 857 l 136 813 q 172 948 139 894 q 276 1001 204 1001 q 340 984 314 1001 q 389 943 367 967 q 431 902 411 919 q 476 885 451 885 q 522 916 507 885 q 540 994 538 947 l 617 989 q 581 855 614 908 q 476 801 549 801 z "},"\u1FED":{ha:753,x_min:151,x_max:601,o:"m 217 818 q 170 837 189 818 q 151 882 151 856 q 170 928 151 910 q 217 947 189 947 q 264 928 246 947 q 282 882 282 910 q 264 837 282 856 q 217 818 246 818 m 536 818 q 489 837 507 818 q 471 882 471 856 q 489 928 471 910 q 536 947 507 947 q 583 928 564 947 q 601 882 601 910 q 583 837 601 856 q 536 818 564 818 m 376 783 l 282 1033 l 289 1047 l 379 1047 l 433 783 l 376 783 z "},"\u1FEE":{ha:753,x_min:151,x_max:601,o:"m 217 818 q 170 837 189 818 q 151 882 151 856 q 170 928 151 910 q 217 947 189 947 q 264 928 246 947 q 282 882 282 910 q 264 837 282 856 q 217 818 246 818 m 536 818 q 489 837 507 818 q 471 882 471 856 q 489 928 471 910 q 536 947 507 947 q 583 928 564 947 q 601 882 601 910 q 583 837 601 856 q 536 818 564 818 m 319 783 l 374 1047 l 464 1047 l 471 1033 l 376 783 l 319 783 z "},"\u1FC1":{ha:753,x_min:165,x_max:588,o:"m 243 815 q 195 835 214 815 q 176 882 176 856 q 195 930 176 910 q 243 950 214 950 q 290 930 271 950 q 310 882 310 910 q 290 835 310 856 q 243 815 271 815 m 510 815 q 463 835 482 815 q 443 882 443 856 q 463 930 443 910 q 510 950 482 950 q 558 930 539 950 q 576 882 576 910 q 558 835 576 856 q 510 815 539 815 m 472 997 q 410 1008 435 997 q 367 1032 386 1018 q 330 1056 349 1046 q 286 1067 311 1067 q 231 1003 240 1067 l 165 1008 q 198 1100 169 1064 q 281 1136 226 1136 q 342 1126 318 1136 q 385 1102 367 1115 q 423 1078 404 1089 q 467 1068 442 1068 q 522 1132 513 1068 l 588 1126 q 555 1034 583 1071 q 472 997 526 997 z "},\u0410:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 z "},\u0411:{ha:806,x_min:125,x_max:749,o:"m 125 0 l 125 911 l 688 911 l 688 814 l 240 814 l 240 528 l 415 528 q 588 503 513 528 q 706 423 663 478 q 749 276 749 368 q 660 67 749 133 q 421 0 571 0 l 125 0 m 240 92 l 401 92 q 576 136 518 92 q 635 274 635 181 q 575 400 635 361 q 399 439 515 439 l 240 439 l 240 92 z "},\u0412:{ha:817,x_min:125,x_max:761,o:"m 125 0 l 125 911 l 396 911 q 559 889 489 911 q 669 818 629 867 q 708 689 708 769 q 674 565 708 618 q 575 490 640 511 l 575 485 q 711 416 661 469 q 761 271 761 363 q 717 120 761 181 q 596 30 674 60 q 415 0 518 0 l 125 0 m 240 524 l 375 524 q 543 564 492 524 q 594 674 594 604 q 541 786 594 753 q 381 819 488 819 l 240 819 l 240 524 m 240 92 l 399 92 q 582 135 517 92 q 647 271 647 179 q 583 395 647 356 q 399 435 518 435 l 240 435 l 240 92 z "},\u0413:{ha:692,x_min:125,x_max:650,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 0 l 125 0 z "},\u0414:{ha:886,x_min:36,x_max:850,o:"m 311 406 q 262 217 288 292 q 208 99 236 142 l 632 99 l 632 814 l 386 814 q 364 672 375 735 q 340 546 353 608 q 311 406 328 483 m 150 0 l 150 -261 l 49 -261 l 36 29 l 36 99 l 78 99 q 117 138 97 107 q 160 237 138 168 q 208 426 183 306 q 242 590 228 517 q 269 738 257 663 q 296 911 282 814 l 749 911 l 749 99 l 850 99 l 850 29 l 838 -261 l 736 -261 l 736 0 l 150 0 z "},\u0415:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 z "},\u0416:{ha:1153,x_min:8,x_max:1144,o:"m 8 0 l 286 483 l 190 701 q 131 794 157 775 q 76 813 104 813 q 49 807 63 813 l 28 917 q 51 922 38 919 q 78 925 64 925 q 188 892 139 925 q 279 758 236 860 l 378 526 l 521 526 l 521 911 l 632 911 l 632 526 l 775 526 l 874 758 q 966 892 918 860 q 1075 925 1014 925 q 1102 922 1089 925 q 1125 917 1115 919 l 1106 807 q 1092 811 1100 810 q 1078 813 1085 813 q 1023 794 1050 813 q 964 701 996 775 l 867 483 l 1144 0 l 1017 0 l 781 432 l 632 432 l 632 0 l 521 0 l 521 432 l 372 432 l 136 0 l 8 0 z "},\u0417:{ha:764,x_min:53,x_max:708,o:"m 390 -17 q 203 13 285 -17 q 53 118 122 43 l 117 190 q 240 108 175 131 q 379 85 304 85 q 532 132 469 85 q 594 264 594 179 q 531 394 594 353 q 349 435 467 435 l 246 435 l 246 524 l 328 524 q 495 563 443 524 q 547 679 547 603 q 497 788 547 750 q 369 826 447 826 q 251 803 306 826 q 156 743 197 781 l 94 815 q 215 896 142 864 q 372 928 288 928 q 581 867 500 928 q 663 694 663 806 q 625 567 663 619 q 526 489 588 514 l 526 483 q 654 410 600 468 q 708 258 708 353 q 665 108 708 169 q 549 15 621 47 q 390 -17 476 -17 z "},\u0418:{ha:914,x_min:125,x_max:786,o:"m 125 0 l 125 911 l 239 911 l 239 440 q 235 293 239 368 q 224 149 231 218 l 229 149 l 326 338 l 660 911 l 786 911 l 786 0 l 671 0 l 671 476 q 676 622 671 550 q 688 763 682 694 l 682 763 l 585 575 l 251 0 l 125 0 z "},\u0419:{ha:911,x_min:125,x_max:786,o:"m 125 0 l 125 911 l 239 911 l 239 440 q 235 293 239 368 q 224 149 231 218 l 229 149 l 326 338 l 660 911 l 786 911 l 786 0 l 671 0 l 671 476 q 676 622 671 550 q 688 763 682 694 l 682 763 l 585 575 l 251 0 l 125 0 m 461 986 q 340 1013 385 986 q 274 1081 294 1039 q 251 1168 254 1122 l 351 1168 q 378 1085 354 1121 q 461 1050 403 1050 q 544 1085 519 1050 q 571 1168 569 1121 l 671 1168 q 648 1081 668 1122 q 583 1013 628 1039 q 461 986 539 986 z "},\u041A:{ha:804,x_min:125,x_max:800,o:"m 125 0 l 125 911 l 240 911 l 240 526 l 400 526 l 517 758 q 583 864 553 828 q 647 913 614 900 q 718 925 679 925 q 771 917 753 925 l 751 810 q 737 813 744 813 q 719 813 729 813 q 685 805 701 813 q 650 774 668 797 q 606 701 632 750 l 490 485 l 800 0 l 671 0 l 399 432 l 240 432 l 240 0 l 125 0 z "},\u041B:{ha:875,x_min:0,x_max:750,o:"m 78 -12 q 38 -10 56 -12 q 0 -1 19 -7 l 24 106 q 44 101 35 103 q 63 99 53 99 q 108 115 88 99 q 149 182 129 131 q 196 339 169 233 q 255 622 229 483 q 301 911 281 761 l 750 911 l 750 0 l 635 0 l 635 814 l 392 814 q 353 569 375 689 q 303 326 331 449 q 242 115 272 189 q 172 15 211 42 q 78 -12 133 -12 z "},\u041C:{ha:1010,x_min:125,x_max:885,o:"m 125 0 l 125 911 l 271 911 l 443 424 q 474 331 458 376 q 504 235 489 286 l 510 235 q 538 331 525 286 q 568 424 551 376 l 740 911 l 885 911 l 885 0 l 776 0 l 776 501 q 779 592 776 542 q 786 691 782 642 q 793 781 790 740 l 788 781 l 717 561 l 546 90 l 461 90 l 290 561 l 219 781 l 214 781 q 222 691 218 740 q 228 592 226 642 q 231 501 231 542 l 231 0 l 125 0 z "},\u041D:{ha:906,x_min:125,x_max:781,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 z "},\u041E:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 z "},\u041F:{ha:896,x_min:125,x_max:771,o:"m 125 0 l 125 911 l 771 911 l 771 0 l 656 0 l 656 814 l 240 814 l 240 0 l 125 0 z "},\u0420:{ha:786,x_min:125,x_max:726,o:"m 125 0 l 125 911 l 385 911 q 564 886 488 911 q 683 802 640 861 q 726 643 726 743 q 633 431 726 500 q 390 361 540 361 l 240 361 l 240 0 l 125 0 m 240 456 l 376 456 q 553 501 496 456 q 611 643 611 546 q 551 780 611 742 q 371 818 490 818 l 240 818 l 240 456 z "},\u0421:{ha:793,x_min:72,x_max:747,o:"m 471 -17 q 267 40 357 -17 q 124 201 176 96 q 72 456 72 307 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 626 17 692 51 q 471 -17 560 -17 z "},\u0422:{ha:744,x_min:39,x_max:706,o:"m 314 0 l 314 814 l 39 814 l 39 911 l 706 911 l 706 814 l 431 814 l 431 0 l 314 0 z "},\u0423:{ha:714,x_min:7,x_max:714,o:"m 189 -17 q 138 -13 158 -17 q 99 -3 118 -10 l 122 101 q 147 94 133 97 q 181 92 161 92 q 253 109 225 92 q 299 165 281 126 l 318 214 l 7 911 l 131 911 l 300 506 l 369 326 l 375 326 l 439 506 l 596 911 l 714 911 l 415 165 q 328 32 381 81 q 189 -17 275 -17 z "},\u0424:{ha:1017,x_min:65,x_max:951,o:"m 457 -17 l 457 114 q 169 210 272 121 q 65 460 65 300 q 169 706 65 619 q 457 799 272 793 l 457 928 l 560 928 l 560 799 q 848 706 744 793 q 951 460 951 619 q 848 210 951 300 q 560 114 744 121 l 560 -17 l 457 -17 m 176 460 q 249 274 176 342 q 457 203 322 207 l 457 710 q 249 642 322 706 q 176 460 176 578 m 840 460 q 768 642 840 578 q 560 710 696 706 l 560 203 q 768 274 696 207 q 840 460 840 342 z "},\u0425:{ha:713,x_min:21,x_max:692,o:"m 21 0 l 286 471 l 39 911 l 167 911 l 290 678 q 324 617 308 647 q 361 546 340 586 l 367 546 q 401 617 386 586 q 432 678 415 647 l 553 911 l 675 911 l 426 465 l 692 0 l 564 0 l 431 246 q 394 315 413 279 q 353 392 375 350 l 347 392 q 310 315 328 350 q 275 246 292 279 l 143 0 l 21 0 z "},\u0426:{ha:892,x_min:125,x_max:856,o:"m 742 -261 l 742 0 l 125 0 l 125 911 l 240 911 l 240 99 l 639 99 l 639 911 l 754 911 l 754 99 l 856 99 l 856 29 l 843 -261 l 742 -261 z "},\u0427:{ha:831,x_min:93,x_max:706,o:"m 590 0 l 590 383 q 514 372 556 378 q 415 367 472 367 q 176 433 258 367 q 93 664 93 500 l 93 911 l 207 911 l 207 664 q 264 506 207 550 q 426 463 321 463 q 520 467 481 463 q 590 478 560 472 l 590 911 l 706 911 l 706 0 l 590 0 z "},\u0428:{ha:1218,x_min:125,x_max:1094,o:"m 125 0 l 125 911 l 239 911 l 239 99 l 553 99 l 553 911 l 665 911 l 665 99 l 981 99 l 981 911 l 1094 911 l 1094 0 l 125 0 z "},\u0429:{ha:1222,x_min:125,x_max:1188,o:"m 125 0 l 125 911 l 239 911 l 239 99 l 553 99 l 553 911 l 665 911 l 665 99 l 981 99 l 981 911 l 1094 911 l 1094 99 l 1188 99 l 1188 29 l 1175 -261 l 1074 -261 l 1074 0 l 125 0 z "},\u042A:{ha:1e3,x_min:39,x_max:939,o:"m 331 0 l 331 814 l 39 814 l 39 911 l 447 911 l 447 538 l 597 538 q 772 510 694 538 q 894 427 849 483 q 939 281 939 371 q 848 67 939 135 q 606 0 757 0 l 331 0 m 447 94 l 592 94 q 766 138 707 94 q 825 278 825 181 q 763 403 825 361 q 582 444 701 444 l 447 444 l 447 94 z "},\u042B:{ha:1108,x_min:125,x_max:983,o:"m 125 0 l 125 911 l 240 911 l 240 538 l 382 538 q 558 511 482 538 q 676 428 633 485 q 718 281 718 372 q 627 67 718 135 q 383 0 536 0 l 125 0 m 240 94 l 369 94 q 544 138 485 94 q 604 278 604 181 q 544 404 604 364 q 365 444 485 444 l 240 444 l 240 94 m 868 0 l 868 911 l 983 911 l 983 0 l 868 0 z "},\u042C:{ha:806,x_min:125,x_max:744,o:"m 125 0 l 125 911 l 240 911 l 240 538 l 408 538 q 584 511 508 538 q 702 428 660 485 q 744 281 744 372 q 653 67 744 135 q 410 0 563 0 l 125 0 m 240 94 l 394 94 q 570 138 510 94 q 631 278 631 181 q 571 404 631 364 q 392 444 511 444 l 240 444 l 240 94 z "},\u042D:{ha:793,x_min:44,x_max:721,o:"m 338 -17 q 173 17 244 -17 q 44 115 101 51 l 108 185 q 209 110 154 136 q 335 85 264 85 q 526 171 454 85 q 604 429 599 257 l 222 429 l 222 528 l 603 528 q 522 749 590 672 q 333 826 453 826 q 221 805 274 826 q 129 743 168 783 l 69 815 q 183 895 114 863 q 338 928 253 928 q 539 874 453 928 q 673 715 625 819 q 721 456 721 610 q 672 196 721 301 q 535 37 622 90 q 338 -17 449 -17 z "},\u042E:{ha:1261,x_min:125,x_max:1189,o:"m 814 85 q 950 131 893 85 q 1038 262 1007 178 q 1069 460 1069 346 q 1001 728 1069 629 q 814 826 933 826 q 628 728 696 826 q 560 460 560 629 q 590 262 560 346 q 678 131 621 178 q 814 85 736 85 m 814 -17 q 625 38 707 -17 q 496 192 543 92 q 443 429 449 292 l 240 429 l 240 0 l 125 0 l 125 911 l 240 911 l 240 529 l 446 529 q 561 822 463 717 q 814 928 660 928 q 1010 872 926 928 q 1142 710 1094 815 q 1189 460 1189 606 q 1142 207 1189 314 q 1010 42 1094 100 q 814 -17 926 -17 z "},\u042F:{ha:808,x_min:31,x_max:683,o:"m 568 0 l 568 385 l 400 385 l 164 0 l 31 0 l 285 397 q 138 483 196 421 q 79 656 79 546 q 120 806 79 750 q 233 887 161 863 q 399 911 306 911 l 683 911 l 683 0 l 568 0 m 415 479 l 568 479 l 568 818 l 415 818 q 252 782 310 818 q 194 656 194 746 q 252 523 194 567 q 415 479 310 479 z "},\u0400:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 407 981 l 181 1156 l 186 1168 l 326 1168 l 510 981 l 407 981 z "},\u0401:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 260 993 q 211 1013 231 993 q 192 1061 192 1032 q 211 1110 192 1092 q 260 1129 231 1129 q 309 1110 290 1129 q 328 1061 328 1092 q 309 1013 328 1032 q 260 993 290 993 m 546 993 q 497 1013 515 993 q 478 1061 478 1032 q 497 1110 478 1092 q 546 1129 515 1129 q 594 1110 575 1129 q 614 1061 614 1092 q 594 1013 614 1032 q 546 993 575 993 z "},\u0402:{ha:954,x_min:39,x_max:886,o:"m 636 -17 q 588 -12 613 -17 q 547 -3 563 -8 l 568 89 q 593 83 578 86 q 622 79 608 79 q 690 97 656 79 q 748 155 725 114 q 771 265 771 196 q 713 415 771 368 q 547 461 654 461 q 469 458 507 461 q 403 447 432 454 l 403 0 l 286 0 l 286 814 l 39 814 l 39 911 l 721 911 l 721 814 l 403 814 l 403 543 q 476 553 436 550 q 563 557 515 557 q 728 527 656 557 q 844 433 801 497 q 886 267 886 369 q 850 103 886 165 q 757 12 814 40 q 636 -17 700 -17 z "},\u0403:{ha:692,x_min:125,x_max:650,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 0 l 125 0 m 300 981 l 483 1168 l 624 1168 l 629 1156 l 403 981 l 300 981 z "},\u0404:{ha:793,x_min:72,x_max:749,o:"m 469 -17 q 263 37 353 -17 q 123 196 174 90 q 72 456 72 301 q 124 715 72 610 q 266 874 175 819 q 475 928 357 928 q 622 894 557 928 q 726 815 688 860 l 664 740 q 581 803 628 779 q 476 826 533 826 q 280 749 356 826 q 189 528 204 672 l 571 528 l 571 429 l 188 429 q 269 171 194 257 q 474 85 344 85 q 590 113 539 85 q 685 188 642 140 l 749 115 q 626 18 694 53 q 469 -17 558 -17 z "},\u0405:{ha:742,x_min:58,x_max:688,o:"m 378 -17 q 199 19 281 -17 q 58 119 118 56 l 124 194 q 240 114 172 143 q 379 85 307 85 q 519 126 469 85 q 569 233 569 167 q 549 308 569 281 q 495 356 529 336 q 418 394 461 375 l 288 451 q 201 500 244 471 q 131 575 158 529 q 103 686 103 621 q 140 810 103 756 q 241 897 176 865 q 389 928 306 928 q 542 897 472 928 q 658 818 611 867 l 596 743 q 501 803 553 781 q 389 826 450 826 q 266 790 313 826 q 219 693 219 754 q 242 622 219 650 q 300 575 265 593 q 371 542 335 557 l 500 486 q 635 398 582 451 q 688 243 688 344 q 650 112 688 171 q 544 18 613 53 q 378 -17 475 -17 z "},\u0406:{ha:365,x_min:125,x_max:240,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 z "},\u0407:{ha:365,x_min:-28,x_max:394,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 m 40 993 q -8 1013 11 993 q -28 1061 -28 1032 q -8 1110 -28 1092 q 40 1129 11 1129 q 90 1110 71 1129 q 108 1061 108 1092 q 90 1013 108 1032 q 40 993 71 993 m 326 993 q 277 1013 296 993 q 258 1061 258 1032 q 277 1110 258 1092 q 326 1129 296 1129 q 375 1110 356 1129 q 394 1061 394 1092 q 375 1013 394 1032 q 326 993 356 993 z "},\u0408:{ha:667,x_min:46,x_max:546,o:"m 288 -17 q 46 131 121 -17 l 124 182 q 281 85 181 85 q 392 131 356 85 q 429 282 429 176 l 429 911 l 546 911 l 546 271 q 519 126 546 192 q 436 22 493 61 q 288 -17 379 -17 z "},\u0409:{ha:1246,x_min:0,x_max:1185,o:"m 78 -12 q 38 -10 56 -12 q 0 -1 19 -7 l 24 106 q 44 101 35 103 q 63 99 53 99 q 108 115 88 99 q 149 182 129 131 q 196 339 169 233 q 255 622 229 483 q 301 911 281 761 l 722 911 l 722 538 l 849 538 q 1024 511 949 538 q 1142 428 1100 485 q 1185 281 1185 372 q 1094 67 1185 135 q 850 0 1003 0 l 607 0 l 607 814 l 392 814 q 353 569 375 689 q 303 326 331 449 q 242 115 272 189 q 172 15 211 42 q 78 -12 133 -12 m 722 94 l 835 94 q 1010 138 950 94 q 1071 278 1071 181 q 1011 404 1071 364 q 832 444 951 444 l 722 444 l 722 94 z "},\u040A:{ha:1290,x_min:125,x_max:1229,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 650 529 l 650 911 l 767 911 l 767 538 l 893 538 q 1069 511 993 538 q 1187 428 1144 485 q 1229 281 1229 372 q 1138 67 1229 135 q 894 0 1047 0 l 650 0 l 650 429 l 240 429 l 240 0 l 125 0 m 767 94 l 879 94 q 1055 138 994 94 q 1115 278 1115 181 q 1056 404 1115 364 q 876 444 996 444 l 767 444 l 767 94 z "},\u040B:{ha:967,x_min:39,x_max:874,o:"m 286 0 l 286 814 l 39 814 l 39 911 l 721 911 l 721 814 l 403 814 l 403 543 q 481 553 439 550 q 565 557 524 557 q 794 490 715 557 q 874 271 874 424 l 874 0 l 760 0 l 760 271 q 708 417 760 374 q 554 461 657 461 q 474 458 515 461 q 403 447 433 454 l 403 0 l 286 0 z "},\u040C:{ha:804,x_min:125,x_max:800,o:"m 125 0 l 125 911 l 240 911 l 240 526 l 400 526 l 517 758 q 583 864 553 828 q 647 913 614 900 q 718 925 679 925 q 771 917 753 925 l 751 810 q 737 813 744 813 q 719 813 729 813 q 685 805 701 813 q 650 774 668 797 q 606 701 632 750 l 490 485 l 800 0 l 671 0 l 399 432 l 240 432 l 240 0 l 125 0 m 331 986 l 514 1174 l 654 1174 l 660 1161 l 433 986 l 331 986 z "},\u040D:{ha:911,x_min:125,x_max:786,o:"m 125 0 l 125 911 l 239 911 l 239 440 q 235 293 239 368 q 224 149 231 218 l 229 149 l 326 338 l 660 911 l 786 911 l 786 0 l 671 0 l 671 476 q 676 622 671 550 q 688 763 682 694 l 682 763 l 585 575 l 251 0 l 125 0 m 465 986 l 239 1161 l 244 1174 l 385 1174 l 568 986 l 465 986 z "},\u040E:{ha:714,x_min:7,x_max:714,o:"m 189 -17 q 138 -13 158 -17 q 99 -3 118 -10 l 122 101 q 147 94 133 97 q 181 92 161 92 q 253 109 225 92 q 299 165 281 126 l 318 214 l 7 911 l 131 911 l 300 506 l 369 326 l 375 326 l 439 506 l 596 911 l 714 911 l 415 165 q 328 32 381 81 q 189 -17 275 -17 m 357 981 q 235 1007 281 981 q 170 1075 190 1033 q 147 1163 150 1117 l 247 1163 q 274 1080 250 1115 q 357 1044 299 1044 q 440 1080 415 1044 q 467 1163 465 1115 l 567 1163 q 544 1075 564 1117 q 479 1007 524 1033 q 357 981 435 981 z "},\u040F:{ha:896,x_min:125,x_max:771,o:"m 399 -261 l 399 0 l 125 0 l 125 911 l 240 911 l 240 99 l 656 99 l 656 911 l 771 911 l 771 0 l 511 0 l 500 -261 l 399 -261 z "},\u0462:{ha:853,x_min:39,x_max:792,o:"m 231 0 l 231 704 l 39 704 l 39 799 l 231 799 l 231 974 l 347 974 l 347 799 l 672 799 l 672 704 l 347 704 l 347 515 l 456 515 q 631 492 556 515 q 749 415 707 468 q 792 275 792 363 q 704 65 792 129 q 464 0 617 0 l 231 0 m 347 92 l 450 92 q 622 133 565 92 q 678 269 678 174 q 620 392 678 356 q 440 429 563 429 l 347 429 l 347 92 z "},\u0472:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 260 39 349 -17 q 122 201 172 94 q 72 460 72 308 q 122 715 72 611 q 260 874 172 819 q 461 928 349 928 q 663 874 575 928 q 801 715 750 819 q 851 460 851 611 q 801 201 851 308 q 663 39 750 94 q 461 -17 575 -17 m 461 831 q 277 751 351 831 q 189 526 203 672 l 733 526 q 646 751 719 672 q 461 831 572 831 m 461 81 q 653 172 578 81 q 736 432 729 263 l 186 432 q 269 171 193 261 q 461 81 344 81 z "},\u0474:{ha:735,x_min:0,x_max:779,o:"m 286 0 l 0 911 l 124 911 l 264 419 q 307 268 288 338 q 353 118 326 199 l 358 118 q 397 268 381 199 q 439 419 414 338 l 533 735 q 601 882 563 836 q 713 928 640 928 q 779 915 750 928 l 756 808 q 740 814 749 811 q 719 817 731 817 q 672 791 689 817 q 639 714 654 765 l 428 0 l 286 0 z "},\u0490:{ha:692,x_min:125,x_max:663,o:"m 125 0 l 125 911 l 543 911 l 564 1150 l 663 1150 l 650 814 l 240 814 l 240 0 l 125 0 z "},\u0492:{ha:724,x_min:46,x_max:681,o:"m 156 0 l 156 421 l 46 421 l 46 506 l 156 511 l 156 911 l 681 911 l 681 814 l 271 814 l 271 511 l 479 511 l 479 421 l 271 421 l 271 0 l 156 0 z "},"\u04F6":{ha:692,x_min:125,x_max:650,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 99 l 342 99 l 342 29 l 329 -261 l 228 -261 l 228 0 l 125 0 z "},\u0496:{ha:1214,x_min:8,x_max:1178,o:"m 8 0 l 286 483 l 190 701 q 131 794 157 775 q 76 813 104 813 q 49 807 63 813 l 28 917 q 51 922 38 919 q 78 925 64 925 q 188 892 139 925 q 279 758 236 860 l 378 526 l 521 526 l 521 911 l 632 911 l 632 526 l 775 526 l 874 758 q 966 892 918 860 q 1075 925 1014 925 q 1102 922 1089 925 q 1125 917 1115 919 l 1106 807 q 1092 811 1100 810 q 1078 813 1085 813 q 1023 794 1050 813 q 964 701 996 775 l 867 483 l 1088 99 l 1178 99 l 1178 29 l 1165 -261 l 1064 -261 l 1064 0 l 1017 0 l 781 432 l 632 432 l 632 0 l 521 0 l 521 432 l 372 432 l 136 0 l 8 0 z "},\u0498:{ha:769,x_min:53,x_max:708,o:"m 335 -261 l 335 -15 q 181 23 250 -8 q 53 118 113 54 l 117 190 q 240 108 175 131 q 379 85 304 85 q 532 132 469 85 q 594 264 594 179 q 531 394 594 353 q 349 435 467 435 l 246 435 l 246 524 l 328 524 q 495 563 443 524 q 547 679 547 603 q 497 788 547 750 q 369 826 447 826 q 251 803 306 826 q 156 743 197 781 l 94 815 q 215 896 142 864 q 372 928 288 928 q 581 867 500 928 q 663 694 663 806 q 625 567 663 619 q 526 489 588 514 l 526 483 q 654 410 600 468 q 708 258 708 353 q 674 123 708 181 q 580 31 639 65 q 447 -12 521 -3 l 436 -261 l 335 -261 z "},\u049A:{ha:872,x_min:125,x_max:831,o:"m 125 0 l 125 911 l 240 911 l 240 526 l 400 526 l 517 758 q 583 864 553 828 q 647 913 614 900 q 718 925 679 925 q 771 917 753 925 l 751 810 q 737 813 744 813 q 719 813 729 813 q 685 805 701 813 q 650 774 668 797 q 606 701 632 750 l 490 485 l 738 99 l 831 99 l 831 29 l 818 -261 l 717 -261 l 717 0 l 671 0 l 399 432 l 240 432 l 240 0 l 125 0 z "},\u04A0:{ha:993,x_min:39,x_max:990,o:"m 315 0 l 315 815 l 314 814 l 39 814 l 39 911 l 431 911 l 431 526 l 590 526 l 707 758 q 774 864 743 828 q 837 913 804 900 q 908 925 869 925 q 961 917 943 925 l 942 810 q 927 813 935 813 q 910 813 919 813 q 875 805 892 813 q 840 774 858 797 q 796 701 822 750 l 681 485 l 990 0 l 861 0 l 589 432 l 431 432 l 431 0 l 315 0 z "},\u04C3:{ha:819,x_min:125,x_max:771,o:"m 461 -229 q 360 -214 394 -229 l 382 -125 q 412 -132 393 -129 q 444 -135 431 -135 q 538 -108 490 -135 q 617 -19 585 -81 q 649 144 649 42 q 609 308 649 244 q 499 401 569 371 q 339 432 429 432 l 240 432 l 240 0 l 125 0 l 125 911 l 240 911 l 240 526 l 400 526 l 517 758 q 583 864 553 828 q 647 913 614 900 q 718 925 679 925 q 771 917 753 925 l 751 810 q 737 813 744 813 q 719 813 729 813 q 685 805 701 813 q 650 774 668 797 q 606 701 632 750 l 501 507 q 635 442 576 488 q 729 323 694 396 q 764 144 764 250 q 721 -71 764 11 q 609 -191 678 -153 q 461 -229 540 -229 z "},\u04A2:{ha:918,x_min:125,x_max:882,o:"m 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 99 l 882 99 l 882 29 l 869 -261 l 768 -261 l 768 0 l 664 0 l 664 429 l 240 429 l 240 0 l 125 0 z "},\u04C7:{ha:906,x_min:125,x_max:781,o:"m 593 -229 q 538 -224 563 -229 q 494 -212 513 -218 l 517 -121 q 547 -129 531 -125 q 581 -133 563 -133 q 648 -97 632 -133 q 664 0 664 -61 l 664 429 l 240 429 l 240 0 l 125 0 l 125 911 l 240 911 l 240 529 l 664 529 l 664 911 l 781 911 l 781 -4 q 738 -168 781 -107 q 593 -229 694 -229 z "},\u04AA:{ha:793,x_min:72,x_max:747,o:"m 415 -261 l 415 -12 q 238 60 315 1 q 117 219 161 119 q 72 456 72 319 q 125 708 72 603 q 269 871 178 814 q 476 928 361 928 q 623 895 558 928 q 726 815 688 863 l 664 744 q 581 805 628 783 q 478 826 535 826 q 328 781 393 826 q 228 654 264 736 q 192 458 192 572 q 227 260 192 344 q 327 131 263 176 q 479 85 392 85 q 594 109 543 85 q 688 181 644 133 l 747 114 q 648 30 701 63 q 528 -12 594 -3 l 517 -261 l 415 -261 z "},\u04AE:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 353 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 389 353 l 389 0 l 272 0 z "},\u04B0:{ha:661,x_min:-1,x_max:663,o:"m 272 0 l 272 329 l 79 329 l 79 414 l 203 418 l 240 418 l -1 911 l 122 911 l 240 654 q 284 556 263 604 q 328 456 306 507 l 333 456 q 381 556 357 507 q 425 654 404 604 l 542 911 l 663 911 l 421 418 l 583 418 l 583 329 l 389 329 l 389 0 l 272 0 z "},\u04B2:{ha:765,x_min:21,x_max:731,o:"m 21 0 l 286 471 l 39 911 l 167 911 l 290 678 q 324 617 308 647 q 361 546 340 586 l 367 546 q 401 617 386 586 q 432 678 415 647 l 553 911 l 675 911 l 426 465 l 636 99 l 731 99 l 731 29 l 718 -261 l 618 -261 l 618 0 l 564 0 l 431 246 q 394 315 413 279 q 353 392 375 350 l 347 392 q 310 315 328 350 q 275 246 292 279 l 143 0 l 21 0 z "},\u04B6:{ha:843,x_min:93,x_max:807,o:"m 590 0 l 590 383 q 514 372 556 378 q 415 367 472 367 q 176 433 258 367 q 93 664 93 500 l 93 911 l 207 911 l 207 664 q 264 506 207 550 q 426 463 321 463 q 520 467 481 463 q 590 478 560 472 l 590 911 l 706 911 l 706 99 l 807 99 l 807 29 l 794 -261 l 696 -261 l 696 0 l 590 0 z "},\u04BA:{ha:831,x_min:125,x_max:738,o:"m 125 0 l 125 911 l 240 911 l 240 553 q 313 563 274 558 q 406 567 353 567 q 584 538 510 567 q 698 444 658 510 q 738 269 738 379 l 738 0 l 624 0 l 624 269 q 565 428 624 385 q 394 471 506 471 q 306 467 344 471 q 240 457 268 463 l 240 0 l 125 0 z "},\u04C0:{ha:365,x_min:125,x_max:240,o:"m 125 0 l 125 911 l 240 911 l 240 0 l 125 0 z "},\u04C1:{ha:1153,x_min:8,x_max:1144,o:"m 8 0 l 286 483 l 190 701 q 131 794 157 775 q 76 813 104 813 q 49 807 63 813 l 28 917 q 51 922 38 919 q 78 925 64 925 q 188 892 139 925 q 279 758 236 860 l 378 526 l 521 526 l 521 911 l 632 911 l 632 526 l 775 526 l 874 758 q 966 892 918 860 q 1075 925 1014 925 q 1102 922 1089 925 q 1125 917 1115 919 l 1106 807 q 1092 811 1100 810 q 1078 813 1085 813 q 1023 794 1050 813 q 964 701 996 775 l 867 483 l 1144 0 l 1017 0 l 781 432 l 632 432 l 632 0 l 521 0 l 521 432 l 372 432 l 136 0 l 8 0 m 579 981 q 458 1007 503 981 q 392 1075 413 1033 q 369 1163 372 1117 l 469 1163 q 497 1080 472 1115 q 579 1044 521 1044 q 663 1080 638 1044 q 689 1163 688 1115 l 789 1163 q 766 1075 786 1117 q 701 1007 746 1033 q 579 981 657 981 z "},\u04D0:{ha:756,x_min:4,x_max:751,o:"m 282 510 l 239 371 l 513 371 l 469 510 q 422 662 444 586 q 378 817 400 738 l 372 817 q 329 662 351 738 q 282 510 307 586 m 4 0 l 313 911 l 443 911 l 751 0 l 628 0 l 542 278 l 210 278 l 122 0 l 4 0 m 378 981 q 256 1007 301 981 q 191 1075 211 1033 q 168 1163 171 1117 l 268 1163 q 295 1080 271 1115 q 378 1044 319 1044 q 461 1080 436 1044 q 488 1163 486 1115 l 588 1163 q 565 1075 585 1117 q 500 1007 544 1033 q 378 981 456 981 z "},\u04D4:{ha:1142,x_min:11,x_max:1074,o:"m 403 522 l 318 358 l 557 358 l 557 819 l 551 819 q 403 522 478 671 m 11 0 l 489 911 l 1060 911 l 1060 814 l 674 814 l 674 528 l 996 528 l 996 429 l 674 429 l 674 99 l 1074 99 l 1074 0 l 557 0 l 557 265 l 271 265 l 133 0 l 11 0 z "},\u04D6:{ha:732,x_min:125,x_max:664,o:"m 125 0 l 125 911 l 650 911 l 650 814 l 240 814 l 240 528 l 586 528 l 586 429 l 240 429 l 240 99 l 664 99 l 664 0 l 125 0 m 394 981 q 273 1007 318 981 q 208 1075 228 1033 q 185 1163 188 1117 l 285 1163 q 312 1080 288 1115 q 394 1044 336 1044 q 478 1080 453 1044 q 504 1163 503 1115 l 604 1163 q 581 1075 601 1117 q 517 1007 561 1033 q 394 981 472 981 z "},\u04D8:{ha:906,x_min:81,x_max:828,o:"m 454 -17 q 182 101 283 -17 q 81 442 81 218 q 81 465 81 453 q 83 486 82 476 l 714 486 q 638 743 708 654 q 447 832 568 832 q 306 805 367 832 q 196 733 244 778 l 135 803 q 269 892 192 857 q 451 928 347 928 q 726 807 625 928 q 828 458 828 686 q 726 103 828 224 q 454 -17 624 -17 m 454 79 q 633 159 565 79 q 713 399 701 239 l 197 399 q 272 161 200 243 q 454 79 343 79 z "},\u04E2:{ha:911,x_min:125,x_max:786,o:"m 125 0 l 125 911 l 239 911 l 239 440 q 235 293 239 368 q 224 149 231 218 l 229 149 l 326 338 l 660 911 l 786 911 l 786 0 l 671 0 l 671 476 q 676 622 671 550 q 688 763 682 694 l 682 763 l 585 575 l 251 0 l 125 0 m 274 1026 l 274 1106 l 649 1106 l 649 1026 l 274 1026 z "},\u04E6:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 259 42 347 -17 q 122 207 171 100 q 72 460 72 314 q 122 710 72 606 q 259 872 171 815 q 461 928 347 928 q 664 872 576 928 q 801 710 751 815 q 851 460 851 606 q 801 207 851 314 q 664 42 751 100 q 461 -17 576 -17 m 461 85 q 603 131 543 85 q 697 262 664 178 q 731 460 731 346 q 657 728 731 629 q 461 826 583 826 q 265 728 339 826 q 192 460 192 629 q 225 262 192 346 q 319 131 258 178 q 461 85 381 85 m 318 993 q 269 1013 289 993 q 250 1061 250 1032 q 269 1110 250 1092 q 318 1129 289 1129 q 367 1110 349 1129 q 386 1061 386 1092 q 367 1013 386 1032 q 318 993 349 993 m 604 993 q 555 1013 574 993 q 536 1061 536 1032 q 555 1110 536 1092 q 604 1129 574 1129 q 653 1110 633 1129 q 672 1061 672 1092 q 653 1013 672 1032 q 604 993 633 993 z "},\u04E8:{ha:922,x_min:72,x_max:851,o:"m 461 -17 q 260 39 349 -17 q 122 201 172 94 q 72 460 72 308 q 122 715 72 611 q 260 874 172 819 q 461 928 349 928 q 663 874 575 928 q 801 715 750 819 q 851 460 851 611 q 801 201 851 308 q 663 39 750 94 q 461 -17 575 -17 m 461 831 q 277 751 351 831 q 189 526 203 672 l 733 526 q 646 751 719 672 q 461 831 572 831 m 461 81 q 653 172 578 81 q 736 432 729 263 l 186 432 q 269 171 193 261 q 461 81 344 81 z "},\u04EE:{ha:714,x_min:7,x_max:714,o:"m 189 -17 q 138 -13 158 -17 q 99 -3 118 -10 l 122 101 q 147 94 133 97 q 181 92 161 92 q 253 109 225 92 q 299 165 281 126 l 318 214 l 7 911 l 131 911 l 300 506 l 369 326 l 375 326 l 439 506 l 596 911 l 714 911 l 415 165 q 328 32 381 81 q 189 -17 275 -17 m 163 1021 l 163 1100 l 538 1100 l 538 1021 l 163 1021 z "},\u04F2:{ha:714,x_min:7,x_max:714,o:"m 189 -17 q 138 -13 158 -17 q 99 -3 118 -10 l 122 101 q 147 94 133 97 q 181 92 161 92 q 253 109 225 92 q 299 165 281 126 l 318 214 l 7 911 l 131 911 l 300 506 l 369 326 l 375 326 l 439 506 l 596 911 l 714 911 l 415 165 q 328 32 381 81 q 189 -17 275 -17 m 158 981 l 306 1168 l 418 1168 l 425 1156 l 239 981 l 158 981 m 418 981 l 567 1168 l 678 1168 l 685 1156 l 499 981 l 418 981 z "},\u0430:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 z "},\u0431:{ha:756,x_min:74,x_max:689,o:"m 183 388 q 236 159 183 240 q 392 78 289 78 q 520 149 469 78 q 571 335 571 221 q 524 501 571 439 q 389 563 476 563 q 288 536 340 563 q 183 440 236 510 q 183 415 183 428 q 183 388 183 401 m 392 -17 q 157 94 240 -17 q 74 410 74 206 q 103 686 74 581 q 189 849 133 792 q 323 935 244 907 q 497 976 401 963 q 581 992 554 985 q 638 1014 607 1000 l 660 910 q 599 883 633 892 q 521 867 564 874 q 381 840 440 854 q 281 794 321 825 q 219 702 242 763 q 189 538 197 642 q 294 622 233 593 q 418 650 354 650 q 613 567 538 650 q 689 335 689 483 q 649 149 689 228 q 541 26 608 69 q 392 -17 474 -17 z "},\u0432:{ha:706,x_min:114,x_max:651,o:"m 114 0 l 114 675 l 374 675 q 553 635 485 675 q 622 504 622 596 q 592 412 622 449 q 510 360 563 375 l 510 354 q 609 304 567 342 q 651 194 651 267 q 576 47 651 93 q 385 0 501 0 l 114 0 m 226 394 l 354 394 q 474 422 438 394 q 510 493 510 449 q 475 567 510 540 q 363 593 440 593 l 226 593 l 226 394 m 226 82 l 372 82 q 497 113 457 82 q 538 200 538 144 q 494 278 538 250 q 364 307 450 307 l 226 307 l 226 82 z "},\u0433:{ha:571,x_min:114,x_max:535,o:"m 114 0 l 114 675 l 535 675 l 535 582 l 228 582 l 228 0 l 114 0 z "},\u0434:{ha:740,x_min:26,x_max:708,o:"m 254 354 q 224 192 243 254 q 182 93 206 129 l 496 93 l 496 582 l 281 582 l 254 354 m 138 0 l 138 -239 l 39 -239 l 26 21 l 26 93 l 60 93 q 95 128 79 104 q 126 210 111 153 q 154 376 142 268 l 190 675 l 610 675 l 610 93 l 708 93 l 708 21 l 697 -239 l 599 -239 l 599 0 l 138 0 z "},\u0435:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 z "},\u0436:{ha:956,x_min:18,x_max:939,o:"m 18 0 l 224 354 l 169 489 q 125 561 147 544 q 78 578 103 578 q 67 577 71 578 q 56 574 63 576 l 35 681 q 75 689 51 689 q 170 659 128 689 q 247 547 213 629 l 308 397 l 426 397 l 426 675 l 529 675 l 529 397 l 647 397 l 710 547 q 786 659 744 629 q 882 689 828 689 q 921 681 907 689 l 901 574 q 891 577 896 576 q 879 578 886 578 q 832 561 854 578 q 786 489 810 544 l 732 354 l 939 0 l 814 0 l 651 304 l 529 304 l 529 0 l 426 0 l 426 304 l 304 304 l 142 0 l 18 0 z "},\u0437:{ha:633,x_min:51,x_max:579,o:"m 306 -17 q 174 1 238 -17 q 51 69 110 19 l 101 143 q 197 90 147 106 q 297 75 246 75 q 416 108 367 75 q 465 196 465 140 q 421 279 465 251 q 293 307 376 307 l 199 307 l 199 394 l 276 394 q 398 423 358 394 q 438 499 438 451 q 399 576 438 551 q 299 601 360 601 q 198 585 240 601 q 115 542 156 569 l 67 617 q 173 672 115 651 q 304 692 231 692 q 426 672 371 692 q 516 612 482 651 q 550 511 550 572 q 521 419 550 460 q 438 358 492 379 l 438 353 q 539 299 499 339 q 579 186 579 260 q 541 78 579 124 q 441 8 503 33 q 306 -17 379 -17 z "},\u0438:{ha:785,x_min:114,x_max:671,o:"m 114 0 l 114 675 l 225 675 l 225 394 q 222 276 225 339 q 214 142 218 214 l 219 142 q 263 221 239 178 q 307 294 288 264 l 546 675 l 671 675 l 671 0 l 560 0 l 560 281 q 563 398 560 335 q 571 533 565 461 l 565 533 q 522 453 546 496 q 478 379 497 411 l 238 0 l 114 0 z "},\u0439:{ha:785,x_min:114,x_max:671,o:"m 114 0 l 114 675 l 225 675 l 225 394 q 222 276 225 339 q 214 142 218 214 l 219 142 q 263 221 239 178 q 307 294 288 264 l 546 675 l 671 675 l 671 0 l 560 0 l 560 281 q 563 398 560 335 q 571 533 565 461 l 565 533 q 522 453 546 496 q 478 379 497 411 l 238 0 l 114 0 m 396 794 q 272 825 318 794 q 203 904 225 856 q 178 1006 181 953 l 272 1006 q 301 903 275 946 q 396 861 328 861 q 492 903 465 861 q 519 1006 518 946 l 614 1006 q 589 904 611 953 q 520 825 567 856 q 396 794 474 794 z "},\u043A:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 675 l 228 675 l 228 397 l 369 397 l 436 547 q 491 638 464 607 q 549 678 518 668 q 615 689 579 689 q 656 681 639 689 l 635 574 q 624 577 629 576 q 613 578 619 578 q 563 563 586 578 q 515 489 540 547 l 457 356 l 675 0 l 550 0 l 374 304 l 228 304 l 228 0 l 114 0 z "},\u043B:{ha:738,x_min:14,x_max:624,o:"m 75 -12 q 14 -1 40 -12 l 36 103 q 50 99 43 101 q 67 97 57 97 q 125 131 103 97 q 157 238 147 165 q 183 456 171 347 q 208 675 196 565 l 624 675 l 624 0 l 508 0 l 508 582 l 299 582 q 277 395 289 489 q 254 208 265 301 q 75 -12 225 -12 z "},\u043C:{ha:879,x_min:114,x_max:767,o:"m 114 0 l 114 675 l 251 675 l 382 361 q 412 281 397 322 q 439 194 426 240 l 444 194 q 473 281 458 240 q 501 361 488 322 l 628 675 l 767 675 l 767 0 l 661 0 l 661 303 q 665 418 661 350 q 674 539 669 486 l 668 539 q 638 453 654 496 q 607 371 622 410 l 483 64 l 397 64 l 271 371 q 241 453 257 410 q 210 539 225 496 l 204 539 q 213 418 210 486 q 217 303 217 350 l 217 0 l 114 0 z "},\u043D:{ha:781,x_min:114,x_max:667,o:"m 114 0 l 114 675 l 228 675 l 228 401 l 553 401 l 553 675 l 667 675 l 667 0 l 553 0 l 553 300 l 228 300 l 228 0 l 114 0 z "},\u043E:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 z "},\u043F:{ha:768,x_min:114,x_max:654,o:"m 114 0 l 114 675 l 654 675 l 654 0 l 540 0 l 540 582 l 228 582 l 228 0 l 114 0 z "},\u0440:{ha:771,x_min:114,x_max:704,o:"m 114 -285 l 114 675 l 208 675 l 218 597 l 222 597 q 323 664 268 636 q 438 692 378 692 q 636 598 568 692 q 704 347 704 504 q 663 151 704 233 q 556 26 622 69 q 413 -17 490 -17 q 319 4 365 -17 q 225 61 272 25 l 228 -57 l 228 -285 l 114 -285 m 393 79 q 531 151 476 79 q 586 347 586 222 q 545 527 586 458 q 408 596 504 596 q 322 572 365 596 q 228 504 278 549 l 228 150 q 317 95 274 111 q 393 79 360 79 z "},\u0441:{ha:633,x_min:64,x_max:599,o:"m 382 -17 q 219 25 292 -17 q 106 146 147 67 q 64 336 64 225 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 502 8 557 32 q 382 -17 447 -17 z "},\u0442:{ha:639,x_min:36,x_max:603,o:"m 263 0 l 263 582 l 36 582 l 36 675 l 603 675 l 603 582 l 376 582 l 376 0 l 263 0 z "},\u0443:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 z "},\u0444:{ha:1019,x_min:65,x_max:954,o:"m 454 -285 l 454 -68 l 457 33 q 395 -2 429 13 q 321 -17 361 -17 q 135 76 206 -17 q 65 336 65 168 q 101 526 65 446 q 194 649 136 606 q 321 692 253 692 q 394 678 361 692 q 457 643 426 664 l 454 743 l 454 989 l 565 989 l 565 743 l 563 640 q 633 678 594 664 q 708 692 671 692 q 891 598 828 692 q 954 347 954 504 q 919 151 954 233 q 824 26 883 69 q 696 -17 765 -17 q 630 -3 664 -17 q 563 32 596 10 l 565 -68 l 565 -285 l 454 -285 m 346 79 q 403 90 376 79 q 457 128 429 101 l 457 550 q 399 585 429 575 q 340 596 369 596 q 228 524 274 596 q 183 338 183 453 q 226 148 183 217 q 346 79 269 79 m 676 79 q 792 151 747 79 q 836 347 836 222 q 799 527 836 458 q 681 596 763 596 q 624 586 653 596 q 563 549 594 576 l 563 125 q 624 89 593 99 q 676 79 654 79 z "},\u0445:{ha:619,x_min:19,x_max:600,o:"m 19 0 l 240 353 l 36 675 l 160 675 l 250 526 q 282 471 265 500 q 317 414 299 442 l 322 414 q 353 471 338 442 q 383 526 368 500 l 465 675 l 585 675 l 381 340 l 600 0 l 476 0 l 378 157 q 342 218 360 188 q 304 278 324 249 l 299 278 q 264 219 281 249 q 231 157 247 189 l 139 0 l 19 0 z "},\u0446:{ha:775,x_min:114,x_max:743,o:"m 633 -239 l 633 0 l 114 0 l 114 675 l 228 675 l 228 93 l 531 93 l 531 675 l 644 675 l 644 93 l 743 93 l 743 21 l 732 -239 l 633 -239 z "},\u0447:{ha:711,x_min:82,x_max:597,o:"m 483 0 l 483 269 q 422 259 449 263 q 351 256 396 256 q 153 310 224 256 q 82 490 82 364 l 82 675 l 196 675 l 196 490 q 238 382 196 415 q 374 349 281 349 q 429 352 404 349 q 483 361 454 356 l 483 675 l 597 675 l 597 0 l 483 0 z "},\u0448:{ha:1040,x_min:114,x_max:926,o:"m 114 0 l 114 675 l 228 675 l 228 93 l 465 93 l 465 675 l 575 675 l 575 93 l 814 93 l 814 675 l 926 675 l 926 0 l 114 0 z "},\u0449:{ha:1057,x_min:114,x_max:1025,o:"m 114 0 l 114 675 l 228 675 l 228 93 l 465 93 l 465 675 l 575 675 l 575 93 l 814 93 l 814 675 l 926 675 l 926 93 l 1025 93 l 1025 21 l 1014 -239 l 915 -239 l 915 0 l 114 0 z "},\u044A:{ha:828,x_min:36,x_max:769,o:"m 275 0 l 275 582 l 36 582 l 36 675 l 389 675 l 389 426 l 501 426 q 696 376 622 426 q 769 215 769 326 q 696 51 769 103 q 501 0 622 0 l 275 0 m 389 92 l 490 92 q 658 215 658 92 q 617 308 658 279 q 490 338 575 338 l 389 338 l 389 92 z "},\u044B:{ha:936,x_min:114,x_max:822,o:"m 114 0 l 114 675 l 228 675 l 228 426 l 324 426 q 517 376 443 426 q 592 215 592 326 q 517 51 592 103 q 324 0 443 0 l 114 0 m 228 92 l 311 92 q 479 215 479 92 q 438 308 479 279 q 311 338 397 338 l 228 338 l 228 92 m 708 0 l 708 675 l 822 675 l 822 0 l 708 0 z "},\u044C:{ha:682,x_min:114,x_max:624,o:"m 114 0 l 114 675 l 228 675 l 228 426 l 356 426 q 549 376 475 426 q 624 215 624 326 q 549 51 624 103 q 356 0 475 0 l 114 0 m 228 92 l 343 92 q 511 215 511 92 q 470 308 511 279 q 343 338 429 338 l 228 338 l 228 92 z "},\u044D:{ha:633,x_min:33,x_max:569,o:"m 256 -17 q 132 6 189 -17 q 33 71 75 29 l 82 140 q 154 93 114 111 q 244 75 194 75 q 392 134 336 75 q 454 307 449 193 l 161 307 l 161 397 l 451 397 q 385 551 439 500 q 254 601 332 601 q 168 585 204 601 q 101 542 132 568 l 47 610 q 135 667 83 643 q 261 692 188 692 q 416 653 346 692 q 528 536 486 615 q 569 336 569 457 q 528 141 569 219 q 417 23 488 63 q 256 -17 346 -17 z "},\u044E:{ha:1025,x_min:114,x_max:961,o:"m 664 78 q 795 149 747 78 q 843 336 843 221 q 795 525 843 453 q 664 597 747 597 q 531 525 582 597 q 481 336 481 453 q 531 149 481 221 q 664 78 582 78 m 669 -17 q 526 20 590 -17 q 422 127 463 57 q 374 296 382 197 l 228 296 l 228 0 l 114 0 l 114 675 l 228 675 l 228 397 l 375 397 q 474 615 392 538 q 669 692 556 692 q 816 650 750 692 q 922 529 882 608 q 961 336 961 450 q 922 146 961 225 q 816 25 882 67 q 669 -17 750 -17 z "},\u044F:{ha:715,x_min:46,x_max:600,o:"m 486 0 l 486 264 l 361 264 l 176 0 l 46 0 l 250 279 q 141 347 186 299 q 96 475 96 394 q 131 594 96 550 q 226 656 165 638 q 361 675 286 675 l 600 675 l 600 0 l 486 0 m 381 353 l 486 353 l 486 586 l 381 586 q 256 559 301 586 q 211 474 211 532 q 256 384 211 415 q 381 353 301 353 z "},\u0450:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 382 792 l 163 1008 l 169 1021 l 294 1021 l 474 792 l 382 792 z "},\u0451:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 233 815 q 183 835 203 815 q 164 885 164 856 q 183 934 164 914 q 233 954 203 954 q 282 934 263 954 q 301 885 301 914 q 282 835 301 856 q 233 815 263 815 m 500 815 q 451 835 471 815 q 432 885 432 856 q 451 934 432 914 q 500 954 471 954 q 550 934 531 954 q 569 885 569 914 q 550 835 569 856 q 500 815 531 815 z "},\u0452:{ha:778,x_min:15,x_max:711,o:"m 432 -301 q 384 -296 407 -301 q 347 -285 361 -290 l 369 -197 q 396 -205 382 -201 q 425 -208 410 -208 q 510 -167 472 -208 q 569 -31 547 -126 q 592 225 592 64 q 573 413 592 344 q 517 510 554 481 q 425 539 481 539 q 336 513 378 539 q 246 435 294 486 l 246 0 l 132 0 l 132 774 l 15 774 l 15 857 l 132 864 l 132 989 l 246 989 l 246 864 l 499 864 l 499 774 l 246 774 l 246 667 l 242 526 q 343 605 289 572 q 461 638 397 638 q 647 542 582 638 q 711 238 711 446 q 677 -78 711 40 q 581 -249 643 -197 q 432 -301 518 -301 z "},\u0453:{ha:571,x_min:114,x_max:546,o:"m 114 0 l 114 675 l 535 675 l 535 582 l 228 582 l 228 0 l 114 0 m 235 793 l 414 1022 l 539 1022 l 546 1010 l 326 793 l 235 793 z "},\u0454:{ha:633,x_min:63,x_max:599,o:"m 381 -17 q 218 23 290 -17 q 104 141 146 63 q 63 336 63 219 q 108 534 63 456 q 227 652 153 613 q 389 692 301 692 q 503 668 456 692 q 585 613 550 644 l 531 542 q 468 583 500 568 q 393 599 436 599 q 253 547 310 599 q 182 397 196 496 l 490 397 l 490 307 l 179 307 q 243 135 186 194 q 389 76 300 76 q 481 95 440 76 q 551 142 521 114 l 599 69 q 497 6 553 29 q 381 -17 442 -17 z "},\u0455:{ha:582,x_min:39,x_max:538,o:"m 290 -17 q 151 9 217 -17 q 39 81 86 35 l 92 147 q 184 92 136 111 q 294 72 232 72 q 394 103 361 72 q 428 178 428 135 q 406 235 428 213 q 349 274 383 258 q 275 304 314 290 q 179 347 225 322 q 105 408 133 371 q 76 500 76 444 q 138 637 76 582 q 310 692 200 692 q 426 670 372 692 q 519 615 481 649 l 467 550 q 394 589 432 575 q 310 603 356 603 q 216 574 246 603 q 186 506 186 544 q 226 436 186 460 q 329 390 267 413 q 430 347 382 372 q 508 284 478 322 q 538 185 538 246 q 509 85 538 131 q 426 11 481 39 q 290 -17 371 -17 z "},\u0456:{ha:342,x_min:94,x_max:247,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 171 814 q 116 834 138 814 q 94 889 94 854 q 116 943 94 922 q 171 964 138 964 q 226 943 204 964 q 247 889 247 922 q 226 834 247 854 q 171 814 204 814 z "},\u0457:{ha:342,x_min:-32,x_max:374,o:"m 114 0 l 114 675 l 228 675 l 228 0 l 114 0 m 38 815 q -12 835 7 815 q -32 885 -32 856 q -12 934 -32 914 q 38 954 7 954 q 86 934 67 954 q 106 885 106 914 q 86 835 106 856 q 38 815 67 815 m 304 815 q 256 835 275 815 q 236 885 236 856 q 256 934 236 914 q 304 954 275 954 q 354 934 335 954 q 374 885 374 914 q 354 835 374 856 q 304 815 335 815 z "},\u0458:{ha:343,x_min:-56,x_max:247,o:"m 44 -301 q -12 -296 14 -301 q -56 -282 -37 -290 l -32 -197 q -2 -205 -19 -201 q 32 -208 15 -208 q 99 -173 82 -208 q 115 -76 115 -137 l 115 675 l 229 675 l 229 -76 q 188 -240 229 -179 q 44 -301 146 -301 m 171 814 q 116 834 138 814 q 94 889 94 854 q 116 943 94 922 q 171 964 138 964 q 226 943 204 964 q 247 889 247 922 q 226 834 247 854 q 171 814 204 814 z "},\u0459:{ha:1021,x_min:14,x_max:963,o:"m 75 -12 q 14 -1 40 -12 l 36 103 q 50 99 43 101 q 67 97 57 97 q 122 130 99 97 q 157 238 146 163 q 183 452 172 343 q 206 675 194 561 l 606 675 l 606 426 l 694 426 q 888 376 814 426 q 963 215 963 326 q 888 51 963 103 q 694 0 814 0 l 490 0 l 490 582 l 301 582 q 281 386 292 483 q 254 192 269 289 q 75 -12 221 -12 m 606 92 l 682 92 q 851 215 851 92 q 810 308 851 279 q 682 338 768 338 l 606 338 l 606 92 z "},\u045A:{ha:1053,x_min:114,x_max:996,o:"m 114 0 l 114 675 l 228 675 l 228 401 l 524 401 l 524 675 l 638 675 l 638 426 l 726 426 q 922 376 847 426 q 996 215 996 326 q 922 51 996 103 q 726 0 847 0 l 524 0 l 524 300 l 228 300 l 228 0 l 114 0 m 638 92 l 715 92 q 883 215 883 92 q 842 308 883 279 q 715 338 801 338 l 638 338 l 638 92 z "},\u045B:{ha:756,x_min:15,x_max:672,o:"m 132 0 l 132 774 l 15 774 l 15 857 l 132 864 l 132 989 l 246 989 l 246 864 l 499 864 l 499 774 l 246 774 l 246 667 l 242 526 q 344 606 290 574 q 465 638 397 638 q 622 571 572 638 q 672 375 672 504 l 672 0 l 558 0 l 558 360 q 528 497 558 454 q 431 539 497 539 q 338 513 379 539 q 246 435 296 486 l 246 0 l 132 0 z "},\u045C:{ha:688,x_min:114,x_max:675,o:"m 114 0 l 114 675 l 228 675 l 228 397 l 369 397 l 436 547 q 491 638 464 607 q 549 678 518 668 q 615 689 579 689 q 656 681 639 689 l 635 574 q 624 577 629 576 q 613 578 619 578 q 563 563 586 578 q 515 489 540 547 l 457 356 l 675 0 l 550 0 l 374 304 l 228 304 l 228 0 l 114 0 m 265 793 l 444 1022 l 569 1022 l 576 1010 l 357 793 l 265 793 z "},\u045D:{ha:785,x_min:114,x_max:671,o:"m 114 0 l 114 675 l 225 675 l 225 394 q 222 276 225 339 q 214 142 218 214 l 219 142 q 263 221 239 178 q 307 294 288 264 l 546 675 l 671 675 l 671 0 l 560 0 l 560 281 q 563 398 560 335 q 571 533 565 461 l 565 533 q 522 453 546 496 q 478 379 497 411 l 238 0 l 114 0 m 411 793 l 192 1010 l 199 1022 l 324 1022 l 503 793 l 411 793 z "},\u045E:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 338 793 q 213 824 260 793 q 144 903 167 854 q 119 1004 122 951 l 214 1004 q 243 902 217 944 q 338 860 269 860 q 433 902 407 860 q 461 1004 460 944 l 556 1004 q 531 903 553 951 q 462 824 508 854 q 338 793 415 793 z "},\u045F:{ha:775,x_min:114,x_max:661,o:"m 338 -239 l 333 0 l 114 0 l 114 675 l 228 675 l 228 93 l 547 93 l 547 675 l 661 675 l 661 0 l 447 0 l 435 -239 l 338 -239 z "},\u0463:{ha:800,x_min:36,x_max:742,o:"m 247 0 l 247 610 l 36 610 l 36 703 l 247 703 l 247 864 l 361 864 l 361 703 l 622 703 l 622 610 l 361 610 l 361 426 l 474 426 q 668 376 594 426 q 742 215 742 326 q 668 51 742 103 q 474 0 594 0 l 247 0 m 361 92 l 461 92 q 631 215 631 92 q 589 308 631 279 q 461 338 547 338 l 361 338 l 361 92 z "},\u0473:{ha:753,x_min:65,x_max:689,o:"m 376 -17 q 222 23 293 -17 q 108 142 151 63 q 65 338 65 221 q 108 533 65 454 q 222 652 151 613 q 376 692 293 692 q 532 652 461 692 q 646 533 603 613 q 689 338 689 454 q 646 142 689 221 q 532 23 603 63 q 376 -17 461 -17 m 376 599 q 244 545 297 599 q 176 397 190 492 l 578 397 q 510 545 564 492 q 376 599 456 599 m 376 76 q 517 137 461 76 q 581 307 574 197 l 174 307 q 236 137 181 197 q 376 76 292 76 z "},\u0475:{ha:663,x_min:17,x_max:692,o:"m 260 0 l 17 675 l 135 675 l 263 292 q 294 192 278 242 q 326 93 311 142 l 332 93 q 358 192 344 142 q 385 292 371 242 l 451 497 q 517 644 479 597 q 625 692 556 692 q 660 689 646 692 q 692 679 675 686 l 669 576 q 635 585 656 585 q 586 560 604 585 q 551 483 568 535 l 400 0 l 260 0 z "},\u0491:{ha:578,x_min:114,x_max:554,o:"m 114 0 l 114 675 l 439 675 l 461 914 l 554 914 l 542 582 l 228 582 l 228 0 l 114 0 z "},\u0493:{ha:599,x_min:39,x_max:561,o:"m 140 0 l 140 292 l 39 292 l 39 374 l 140 382 l 140 675 l 561 675 l 561 582 l 254 582 l 254 382 l 442 382 l 442 292 l 254 292 l 254 0 l 140 0 z "},"\u04F7":{ha:571,x_min:114,x_max:535,o:"m 114 0 l 114 675 l 535 675 l 535 582 l 228 582 l 228 93 l 325 93 l 325 21 l 314 -239 l 215 -239 l 215 0 l 114 0 z "},\u0497:{ha:1010,x_min:18,x_max:983,o:"m 18 0 l 224 354 l 169 489 q 125 561 147 544 q 78 578 103 578 q 67 577 71 578 q 56 574 63 576 l 35 681 q 75 689 51 689 q 170 659 128 689 q 247 547 213 629 l 308 397 l 426 397 l 426 675 l 529 675 l 529 397 l 647 397 l 710 547 q 786 659 744 629 q 882 689 828 689 q 921 681 907 689 l 901 574 q 891 577 896 576 q 879 578 886 578 q 832 561 854 578 q 786 489 810 544 l 732 354 l 885 93 l 983 93 l 983 21 l 972 -239 l 874 -239 l 874 0 l 814 0 l 651 304 l 529 304 l 529 0 l 426 0 l 426 304 l 304 304 l 142 0 l 18 0 z "},\u0499:{ha:633,x_min:51,x_max:579,o:"m 258 -239 l 253 -14 q 149 10 200 -8 q 51 69 99 29 l 101 143 q 197 90 147 106 q 297 75 246 75 q 416 108 367 75 q 465 196 465 140 q 421 279 465 251 q 293 307 376 307 l 199 307 l 199 394 l 276 394 q 398 423 358 394 q 438 499 438 451 q 399 576 438 551 q 299 601 360 601 q 198 585 240 601 q 115 542 156 569 l 67 617 q 173 672 115 651 q 304 692 231 692 q 426 672 371 692 q 516 612 482 651 q 550 511 550 572 q 521 419 550 460 q 438 358 492 379 l 438 353 q 539 299 499 339 q 579 186 579 260 q 517 53 579 106 q 365 -12 456 1 l 353 -239 l 258 -239 z "},\u049B:{ha:744,x_min:114,x_max:718,o:"m 114 0 l 114 675 l 228 675 l 228 397 l 369 397 l 436 547 q 491 638 464 607 q 549 678 518 668 q 615 689 579 689 q 656 681 639 689 l 635 574 q 624 577 629 576 q 613 578 619 578 q 563 563 586 578 q 515 489 540 547 l 457 356 l 618 93 l 718 93 l 718 21 l 706 -239 l 608 -239 l 608 0 l 550 0 l 374 304 l 228 304 l 228 0 l 114 0 z "},\u04A1:{ha:847,x_min:36,x_max:836,o:"m 275 0 l 275 582 l 36 582 l 36 675 l 389 675 l 389 397 l 531 397 l 597 547 q 652 638 625 607 q 710 678 679 668 q 776 689 740 689 q 817 681 800 689 l 796 574 q 785 577 790 576 q 774 578 781 578 q 724 563 747 578 q 676 489 701 547 l 618 356 l 836 0 l 711 0 l 535 304 l 389 304 l 389 0 l 275 0 z "},\u04C4:{ha:701,x_min:114,x_max:664,o:"m 386 -301 q 338 -297 363 -301 q 294 -283 314 -293 l 317 -199 q 345 -206 333 -204 q 371 -208 357 -208 q 502 -137 454 -208 q 550 51 550 -67 q 490 239 550 174 q 332 304 429 304 l 228 304 l 228 0 l 114 0 l 114 675 l 228 675 l 228 397 l 369 397 l 436 547 q 491 638 464 607 q 549 678 518 668 q 615 689 579 689 q 656 681 639 689 l 635 574 q 624 577 629 576 q 613 578 619 578 q 563 563 586 578 q 515 489 540 547 l 467 376 q 611 264 558 346 q 664 51 664 182 q 589 -210 664 -119 q 386 -301 514 -301 z "},\u04A3:{ha:797,x_min:115,x_max:765,o:"m 115 0 l 115 675 l 229 675 l 229 401 l 554 401 l 554 675 l 668 675 l 668 93 l 765 93 l 765 21 l 753 -239 l 654 -239 l 654 0 l 554 0 l 554 300 l 229 300 l 229 0 l 115 0 z "},\u04C8:{ha:781,x_min:114,x_max:667,o:"m 493 -217 q 441 -212 464 -217 q 401 -201 418 -207 l 422 -112 q 449 -120 435 -117 q 479 -124 464 -124 q 538 -89 524 -124 q 553 10 553 -54 l 553 300 l 228 300 l 228 0 l 114 0 l 114 675 l 228 675 l 228 401 l 553 401 l 553 675 l 667 675 l 667 3 q 627 -158 667 -99 q 493 -217 588 -217 z "},\u04AB:{ha:633,x_min:64,x_max:599,o:"m 325 -239 l 319 -11 q 136 99 208 8 q 64 336 64 189 q 109 529 64 450 q 228 650 154 608 q 389 692 303 692 q 503 669 456 692 q 586 613 551 647 l 529 543 q 470 582 503 567 q 393 597 438 597 q 285 565 333 597 q 210 473 238 532 q 182 336 182 414 q 240 149 182 221 q 392 78 299 78 q 478 96 438 78 q 549 142 518 114 l 599 72 q 523 17 565 40 q 432 -12 481 -6 l 419 -239 l 325 -239 z "},\u04AF:{ha:649,x_min:17,x_max:632,o:"m 271 -285 l 271 0 l 17 675 l 135 675 l 261 307 q 293 208 276 257 q 325 111 310 158 l 331 111 q 363 208 346 158 q 393 307 379 257 l 519 675 l 632 675 l 385 0 l 385 -285 l 271 -285 z "},\u04B1:{ha:649,x_min:17,x_max:632,o:"m 271 -285 l 271 0 l 65 0 l 65 83 l 174 90 l 238 90 l 17 675 l 135 675 l 261 307 q 293 208 276 257 q 325 111 310 158 l 331 111 q 363 208 346 158 q 393 307 379 257 l 519 675 l 632 675 l 418 90 l 582 90 l 582 0 l 385 0 l 385 -285 l 271 -285 z "},\u04B3:{ha:669,x_min:19,x_max:642,o:"m 19 0 l 240 353 l 36 675 l 160 675 l 250 526 q 282 471 265 500 q 317 414 299 442 l 322 414 q 353 471 338 442 q 383 526 368 500 l 465 675 l 585 675 l 381 340 l 540 93 l 642 93 l 642 21 l 631 -239 l 533 -239 l 533 0 l 476 0 l 378 157 q 342 218 360 188 q 304 278 324 249 l 299 278 q 264 219 281 249 q 231 157 247 189 l 139 0 l 19 0 z "},\u04B7:{ha:722,x_min:82,x_max:696,o:"m 483 0 l 483 269 q 422 259 449 263 q 351 256 396 256 q 153 310 224 256 q 82 490 82 364 l 82 675 l 196 675 l 196 490 q 238 382 196 415 q 374 349 281 349 q 429 352 404 349 q 483 361 454 356 l 483 675 l 597 675 l 597 93 l 696 93 l 696 21 l 683 -239 l 586 -239 l 586 0 l 483 0 z "},\u04BB:{ha:756,x_min:114,x_max:654,o:"m 114 0 l 114 989 l 228 989 l 228 719 l 224 581 q 326 659 272 626 q 449 692 379 692 q 605 624 556 692 q 654 428 654 557 l 654 0 l 540 0 l 540 413 q 510 550 540 507 q 413 593 479 593 q 320 567 361 593 q 228 489 279 540 l 228 0 l 114 0 z "},\u04C2:{ha:956,x_min:18,x_max:939,o:"m 18 0 l 224 354 l 169 489 q 125 561 147 544 q 78 578 103 578 q 67 577 71 578 q 56 574 63 576 l 35 681 q 75 689 51 689 q 170 659 128 689 q 247 547 213 629 l 308 397 l 426 397 l 426 675 l 529 675 l 529 397 l 647 397 l 710 547 q 786 659 744 629 q 882 689 828 689 q 921 681 907 689 l 901 574 q 891 577 896 576 q 879 578 886 578 q 832 561 854 578 q 786 489 810 544 l 732 354 l 939 0 l 814 0 l 651 304 l 529 304 l 529 0 l 426 0 l 426 304 l 304 304 l 142 0 l 18 0 m 478 793 q 353 824 400 793 q 285 903 307 854 q 260 1004 263 951 l 354 1004 q 383 902 357 944 q 478 860 410 860 q 574 902 547 860 q 601 1004 600 944 l 696 1004 q 671 903 693 951 q 602 824 649 854 q 478 793 556 793 z "},"\u04CF":{ha:354,x_min:114,x_max:300,o:"m 235 -12 q 142 27 171 -12 q 114 139 114 67 l 114 989 l 228 989 l 228 131 q 238 93 228 104 q 261 82 247 82 q 272 83 267 82 q 285 85 276 83 l 300 -1 q 235 -12 275 -12 z "},\u04D1:{ha:700,x_min:71,x_max:601,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 488 429 271 406 q 475 510 488 472 q 433 572 463 547 q 347 596 403 596 q 238 574 289 596 q 146 526 186 551 l 101 604 q 217 664 149 636 q 367 692 286 692 q 546 616 490 692 q 601 414 601 540 l 601 0 l 507 0 l 497 81 l 493 81 q 388 12 443 40 q 269 -17 333 -17 m 301 78 q 394 100 350 78 q 488 165 439 122 l 488 347 q 307 313 374 335 q 212 258 240 290 q 183 182 183 226 q 218 102 183 126 q 301 78 253 78 m 364 793 q 240 824 286 793 q 171 903 193 854 q 146 1004 149 951 l 240 1004 q 269 902 243 944 q 364 860 296 860 q 460 902 433 860 q 488 1004 486 944 l 582 1004 q 557 903 579 951 q 488 824 535 854 q 364 793 442 793 z "},\u04D5:{ha:1081,x_min:71,x_max:1029,o:"m 269 -17 q 128 33 185 -17 q 71 175 71 83 q 171 347 71 289 q 481 429 271 406 q 469 510 481 472 q 427 572 457 549 q 342 596 397 596 q 237 574 288 596 q 146 526 186 551 l 101 604 q 215 664 149 636 q 356 692 282 692 q 481 653 431 692 q 550 549 531 614 q 644 653 588 614 q 771 692 701 692 q 964 605 899 692 q 1029 374 1029 518 q 1028 338 1029 356 q 1024 307 1026 321 l 588 307 q 651 140 592 203 q 797 76 710 76 q 886 90 846 76 q 963 128 926 103 l 1003 53 q 906 3 960 22 q 783 -17 853 -17 q 642 21 699 -17 q 544 110 585 58 q 406 15 476 47 q 269 -17 335 -17 m 301 78 q 405 103 350 78 q 506 178 460 129 q 489 242 494 206 q 481 317 483 279 l 479 347 q 253 288 319 328 q 186 182 186 249 q 219 102 186 126 q 301 78 253 78 m 589 394 l 925 394 q 883 547 925 496 q 768 599 842 599 q 650 543 700 599 q 589 394 600 488 z "},\u04D7:{ha:689,x_min:63,x_max:636,o:"m 369 599 q 288 578 328 599 q 220 514 249 558 q 182 397 192 469 l 533 397 q 490 547 533 496 q 369 599 447 599 m 388 -17 q 223 25 297 -17 q 106 147 149 67 q 63 338 63 226 q 106 526 63 447 q 220 649 150 606 q 368 692 290 692 q 567 606 499 692 q 636 375 636 519 q 635 340 636 357 q 631 307 633 324 l 179 307 q 252 135 188 193 q 401 76 317 76 q 492 90 450 76 q 569 128 535 104 l 611 53 q 512 3 567 22 q 388 -17 457 -17 m 367 793 q 242 824 289 793 q 174 903 196 854 q 149 1004 151 951 l 243 1004 q 272 902 246 944 q 367 860 299 860 q 463 902 436 860 q 490 1004 489 944 l 585 1004 q 560 903 582 951 q 491 824 538 854 q 367 793 444 793 z "},\u04D9:{ha:689,x_min:51,x_max:625,o:"m 333 -17 q 180 25 243 -17 q 84 140 117 67 q 51 311 51 214 q 53 346 51 329 q 57 379 54 363 l 508 379 q 442 542 499 488 q 307 597 386 597 q 215 584 257 597 q 136 547 172 571 l 94 622 q 195 673 139 654 q 321 692 251 692 q 477 650 408 692 q 585 529 546 608 q 625 338 625 450 q 584 148 625 228 q 477 26 543 68 q 333 -17 411 -17 m 332 76 q 447 126 394 76 q 508 289 499 175 l 154 289 q 201 133 154 190 q 332 76 249 76 z "},\u04E3:{ha:785,x_min:114,x_max:671,o:"m 114 0 l 114 675 l 225 675 l 225 394 q 222 276 225 339 q 214 142 218 214 l 219 142 q 263 221 239 178 q 307 294 288 264 l 546 675 l 671 675 l 671 0 l 560 0 l 560 281 q 563 398 560 335 q 571 533 565 461 l 565 533 q 522 453 546 496 q 478 379 497 411 l 238 0 l 114 0 m 211 836 l 211 915 l 581 915 l 581 836 l 211 836 z "},\u04E7:{ha:753,x_min:64,x_max:689,o:"m 376 -17 q 223 25 294 -17 q 108 146 151 67 q 64 336 64 225 q 108 529 64 450 q 223 650 151 608 q 376 692 294 692 q 531 650 460 692 q 645 529 601 608 q 689 336 689 450 q 645 146 689 225 q 531 25 601 67 q 376 -17 460 -17 m 376 78 q 517 149 464 78 q 571 336 571 221 q 517 525 571 453 q 376 597 464 597 q 236 525 290 597 q 182 336 182 453 q 236 149 182 221 q 376 78 290 78 m 243 815 q 193 835 213 815 q 174 885 174 856 q 193 934 174 914 q 243 954 213 954 q 292 934 272 954 q 311 885 311 914 q 292 835 311 856 q 243 815 272 815 m 510 815 q 461 835 481 815 q 442 885 442 856 q 461 934 442 914 q 510 954 481 954 q 560 934 540 954 q 579 885 579 914 q 560 835 579 856 q 510 815 540 815 z "},\u04E9:{ha:753,x_min:65,x_max:689,o:"m 376 -17 q 222 23 293 -17 q 108 142 151 63 q 65 338 65 221 q 108 533 65 454 q 222 652 151 613 q 376 692 293 692 q 532 652 461 692 q 646 533 603 613 q 689 338 689 454 q 646 142 689 221 q 532 23 603 63 q 376 -17 461 -17 m 376 599 q 244 545 297 599 q 176 397 190 492 l 578 397 q 510 545 564 492 q 376 599 456 599 m 376 76 q 517 137 461 76 q 581 307 574 197 l 174 307 q 236 137 181 197 q 376 76 292 76 z "},\u04EF:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 153 835 l 153 914 l 522 914 l 522 835 l 153 835 z "},\u04F3:{ha:649,x_min:17,x_max:632,o:"m 125 -290 q 83 -286 103 -290 q 46 -276 63 -282 l 71 -187 q 119 -196 96 -196 q 214 -155 176 -196 q 272 -51 251 -114 l 288 -1 l 17 675 l 135 675 l 272 301 q 305 208 288 258 q 338 111 322 158 l 343 111 q 372 207 358 157 q 400 301 386 257 l 521 675 l 632 675 l 378 -56 q 322 -175 354 -122 q 241 -259 289 -228 q 125 -290 193 -290 m 182 792 l 301 1021 l 396 1021 l 403 1008 l 250 792 l 182 792 m 406 792 l 525 1021 l 619 1021 l 626 1008 l 475 792 l 406 792 z "},"\u2116":{ha:1240,x_min:82,x_max:1222,o:"m 126 -17 q 109 -15 115 -17 q 92 -12 103 -14 l 82 78 q 117 90 106 78 q 129 136 129 103 l 129 886 l 264 886 l 500 346 q 542 242 522 297 q 582 133 563 186 l 588 133 q 577 290 581 222 q 572 419 574 358 q 571 544 571 479 l 571 765 q 678 903 571 903 q 697 901 690 903 q 714 897 704 900 l 724 807 q 688 795 699 807 q 676 750 676 783 l 676 0 l 540 0 l 306 542 q 263 644 283 590 q 224 753 243 699 l 218 753 q 228 596 225 664 q 232 467 231 528 q 233 340 233 407 l 233 119 q 208 17 233 51 q 126 -17 183 -17 m 1008 383 q 901 410 950 383 q 824 486 853 436 q 794 607 794 536 q 824 731 794 681 q 901 806 853 781 q 1008 832 950 832 q 1115 806 1067 832 q 1193 731 1164 781 q 1222 607 1222 681 q 1193 486 1222 536 q 1115 410 1164 436 q 1008 383 1067 383 m 1008 460 q 1095 499 1063 460 q 1128 607 1128 539 q 1095 716 1128 678 q 1008 754 1063 754 q 922 716 954 754 q 889 607 889 678 q 922 499 889 539 q 1008 460 954 460 m 833 203 l 833 283 l 1185 283 l 1185 203 l 833 203 z "},".":{ha:346,x_min:90,x_max:256,o:"m 174 -17 q 115 8 139 -17 q 90 69 90 32 q 115 134 90 110 q 174 158 139 158 q 231 134 207 158 q 256 69 256 110 q 231 8 256 32 q 174 -17 207 -17 z "},",":{ha:346,x_min:65,x_max:275,o:"m 93 -236 l 65 -169 q 158 -99 125 -143 q 190 0 192 -56 q 183 -1 188 -1 q 176 -1 179 -1 q 119 19 143 -1 q 94 78 94 39 q 119 137 94 115 q 179 158 144 158 q 249 122 224 158 q 275 24 275 86 q 226 -133 275 -65 q 93 -236 178 -200 z "},":":{ha:346,x_min:90,x_max:256,o:"m 174 485 q 115 509 139 485 q 90 571 90 533 q 115 635 90 611 q 174 660 139 660 q 231 635 207 660 q 256 571 256 611 q 231 509 256 533 q 174 485 207 485 m 174 -17 q 115 8 139 -17 q 90 69 90 32 q 115 134 90 110 q 174 158 139 158 q 231 134 207 158 q 256 69 256 110 q 231 8 256 32 q 174 -17 207 -17 z "},";":{ha:346,x_min:65,x_max:275,o:"m 174 485 q 115 509 139 485 q 90 571 90 533 q 115 635 90 611 q 174 660 139 660 q 231 635 207 660 q 256 571 256 611 q 231 509 256 533 q 174 485 207 485 m 93 -236 l 65 -169 q 158 -99 125 -143 q 190 0 192 -56 q 183 -1 188 -1 q 176 -1 179 -1 q 119 19 143 -1 q 94 78 94 39 q 119 137 94 115 q 179 158 144 158 q 249 122 224 158 q 275 24 275 86 q 226 -133 275 -65 q 93 -236 178 -200 z "},"\u2026":{ha:1317,x_min:131,x_max:1226,o:"m 214 -17 q 155 8 179 -17 q 131 69 131 32 q 155 134 131 110 q 214 158 179 158 q 272 134 247 158 q 296 69 296 110 q 272 8 296 32 q 214 -17 247 -17 m 679 -17 q 620 8 644 -17 q 596 69 596 32 q 620 134 596 110 q 679 158 644 158 q 737 134 713 158 q 761 69 761 110 q 737 8 761 32 q 679 -17 713 -17 m 1144 -17 q 1085 8 1110 -17 q 1061 69 1061 32 q 1085 134 1061 110 q 1144 158 1110 158 q 1202 134 1178 158 q 1226 69 1226 110 q 1202 8 1226 32 q 1144 -17 1178 -17 z "},"!":{ha:401,x_min:118,x_max:283,o:"m 161 275 l 146 800 l 143 931 l 258 931 l 256 800 l 240 275 l 161 275 m 201 -17 q 142 8 167 -17 q 118 69 118 32 q 142 134 118 110 q 201 158 167 158 q 259 134 235 158 q 283 69 283 110 q 259 8 283 32 q 201 -17 235 -17 z "},"\xA1":{ha:401,x_min:118,x_max:283,o:"m 143 -256 l 146 -125 l 161 400 l 240 400 l 256 -125 l 258 -256 l 143 -256 m 201 517 q 142 542 167 517 q 118 606 118 567 q 142 667 118 643 q 201 692 167 692 q 259 667 235 692 q 283 606 283 643 q 259 542 283 567 q 201 517 235 517 z "},"?":{ha:590,x_min:53,x_max:524,o:"m 222 275 q 229 390 213 340 q 276 482 246 440 q 337 561 306 524 q 390 636 368 599 q 413 718 413 674 q 378 813 413 774 q 278 853 344 853 q 191 831 232 853 q 118 772 150 810 l 53 832 q 156 915 97 882 q 292 947 215 947 q 460 888 397 947 q 524 725 524 828 q 501 627 524 671 q 447 544 479 583 q 383 465 414 506 q 334 379 353 425 q 322 275 315 333 l 222 275 m 275 -17 q 217 8 240 -17 q 193 69 193 32 q 217 134 193 110 q 275 158 240 158 q 334 134 310 158 q 358 69 358 110 q 334 8 358 32 q 275 -17 310 -17 z "},"\xBF":{ha:590,x_min:67,x_max:538,o:"m 299 -272 q 130 -212 193 -272 q 67 -50 67 -153 q 89 48 67 4 q 144 131 111 92 q 207 210 176 169 q 256 296 238 250 q 267 400 274 342 l 368 400 q 361 285 378 335 q 315 193 344 235 q 253 114 285 151 q 200 39 222 76 q 178 -43 178 1 q 211 -137 178 -99 q 313 -176 244 -176 q 399 -156 358 -176 q 471 -97 439 -135 l 538 -157 q 434 -239 493 -206 q 299 -272 375 -272 m 315 517 q 256 542 281 517 q 232 606 232 567 q 256 667 232 643 q 315 692 281 692 q 373 667 349 692 q 397 606 397 643 q 373 542 397 567 q 315 517 349 517 z "},"'":{ha:346,x_min:111,x_max:233,o:"m 138 599 l 115 831 l 111 958 l 233 958 l 229 831 l 207 599 l 138 599 z "},'"':{ha:592,x_min:111,x_max:479,o:"m 138 599 l 115 831 l 111 958 l 233 958 l 229 831 l 207 599 l 138 599 m 383 599 l 361 831 l 357 958 l 479 958 l 475 831 l 453 599 l 383 599 z "},"\u2018":{ha:346,x_min:79,x_max:260,o:"m 167 604 q 102 638 125 604 q 79 731 79 671 q 117 874 79 813 q 226 976 154 935 l 260 922 q 181 848 207 888 q 154 750 154 808 q 167 751 158 751 q 217 733 194 751 q 240 682 240 715 q 219 625 240 646 q 167 604 199 604 z "},"\u2019":{ha:346,x_min:88,x_max:268,o:"m 119 599 l 88 651 q 166 726 140 686 q 192 825 192 765 q 181 824 188 824 q 129 842 151 824 q 107 893 107 860 q 128 950 107 929 q 181 971 149 971 q 244 938 221 971 q 268 844 268 906 q 230 701 268 761 q 119 599 192 640 z "},"\u201C":{ha:592,x_min:79,x_max:506,o:"m 167 604 q 102 638 125 604 q 79 731 79 671 q 117 874 79 813 q 226 976 154 935 l 260 922 q 181 848 207 888 q 154 750 154 808 q 167 751 158 751 q 217 733 194 751 q 240 682 240 715 q 219 625 240 646 q 167 604 199 604 m 413 604 q 348 638 371 604 q 325 731 325 671 q 363 874 325 813 q 472 976 400 935 l 506 922 q 426 848 453 888 q 400 750 400 808 q 413 751 404 751 q 463 733 440 751 q 486 682 486 715 q 465 625 486 646 q 413 604 444 604 z "},"\u201D":{ha:592,x_min:88,x_max:514,o:"m 119 599 l 88 651 q 166 726 140 686 q 192 825 192 765 q 181 824 188 824 q 129 842 151 824 q 107 893 107 860 q 128 950 107 929 q 181 971 149 971 q 244 938 221 971 q 268 844 268 906 q 230 701 268 761 q 119 599 192 640 m 365 599 l 333 651 q 412 726 386 686 q 438 825 438 765 q 426 824 433 824 q 375 842 397 824 q 353 893 353 860 q 374 950 353 929 q 426 971 394 971 q 490 938 467 971 q 514 844 514 906 q 476 701 514 761 q 365 599 438 640 z "},"\u201A":{ha:346,x_min:88,x_max:268,o:"m 119 -201 l 88 -149 q 166 -74 140 -114 q 192 25 192 -35 q 181 24 188 24 q 129 42 151 24 q 107 93 107 60 q 128 150 107 129 q 181 171 149 171 q 244 138 221 171 q 268 44 268 106 q 230 -99 268 -39 q 119 -201 192 -160 z "},"\u201E":{ha:592,x_min:88,x_max:514,o:"m 119 -201 l 88 -149 q 166 -74 140 -114 q 192 25 192 -35 q 181 24 188 24 q 129 42 151 24 q 107 93 107 60 q 128 150 107 129 q 181 171 149 171 q 244 138 221 171 q 268 44 268 106 q 230 -99 268 -39 q 119 -201 192 -160 m 365 -201 l 333 -149 q 412 -74 386 -114 q 438 25 438 -35 q 426 24 433 24 q 375 42 397 24 q 353 93 353 60 q 374 150 353 129 q 426 171 394 171 q 490 138 467 171 q 514 44 514 106 q 476 -99 514 -39 q 365 -201 438 -160 z "},"\u201B":{ha:346,x_min:79,x_max:260,o:"m 226 599 q 117 701 154 640 q 79 844 79 761 q 102 938 79 906 q 167 971 125 971 q 219 950 199 971 q 240 893 240 929 q 217 842 240 860 q 167 824 194 824 q 154 825 158 824 q 181 726 154 765 q 260 651 207 686 l 226 599 z "},"\u275B":{ha:500,x_min:24,x_max:476,o:"m 264 283 q 87 359 150 283 q 24 561 24 435 q 97 815 24 706 q 319 981 171 925 l 351 922 q 203 822 258 885 q 140 672 147 760 q 199 704 165 692 q 271 717 232 717 q 417 662 357 717 q 476 514 476 607 q 417 348 476 413 q 264 283 358 283 z "},"\u275C":{ha:500,x_min:24,x_max:476,o:"m 181 283 l 149 342 q 298 442 243 379 q 360 592 353 504 q 301 560 335 572 q 229 547 268 547 q 83 602 143 547 q 24 750 24 657 q 83 917 24 853 q 236 981 142 981 q 414 906 351 981 q 476 703 476 831 q 403 450 476 560 q 181 283 329 340 z "},"\u275D":{ha:1e3,x_min:24,x_max:976,o:"m 264 283 q 87 359 150 283 q 24 561 24 435 q 97 815 24 706 q 319 981 171 925 l 351 922 q 203 822 258 885 q 140 672 147 760 q 199 704 165 692 q 271 717 232 717 q 417 662 357 717 q 476 514 476 607 q 417 348 476 413 q 264 283 358 283 m 764 283 q 587 359 650 283 q 524 561 524 435 q 597 815 524 706 q 819 981 671 925 l 851 922 q 703 822 758 885 q 640 672 647 760 q 699 704 665 692 q 771 717 732 717 q 917 662 857 717 q 976 514 976 607 q 917 348 976 413 q 764 283 858 283 z "},"\u275E":{ha:975,x_min:24,x_max:976,o:"m 181 283 l 149 342 q 298 442 243 379 q 360 592 353 504 q 301 560 335 572 q 229 547 268 547 q 83 602 143 547 q 24 750 24 657 q 83 917 24 853 q 236 981 142 981 q 414 906 351 981 q 476 703 476 831 q 403 450 476 560 q 181 283 329 340 m 681 283 l 649 342 q 798 442 743 379 q 860 592 853 504 q 801 560 835 572 q 729 547 768 547 q 583 602 643 547 q 524 750 524 657 q 583 917 524 853 q 736 981 642 981 q 914 906 851 981 q 976 703 976 831 q 903 450 976 560 q 681 283 829 340 z "},"\u275F":{ha:500,x_min:24,x_max:476,o:"m 181 -272 l 149 -214 q 298 -114 243 -176 q 360 36 353 -51 q 301 4 335 17 q 229 -8 268 -8 q 83 47 143 -8 q 24 194 24 101 q 83 361 24 297 q 236 425 142 425 q 414 350 351 425 q 476 147 476 275 q 403 -106 476 4 q 181 -272 329 -215 z "},"\u2760":{ha:1e3,x_min:24,x_max:976,o:"m 181 -272 l 149 -214 q 298 -114 243 -176 q 360 36 353 -51 q 301 4 335 17 q 229 -8 268 -8 q 83 47 143 -8 q 24 194 24 101 q 83 361 24 297 q 236 425 142 425 q 414 350 351 425 q 476 147 476 275 q 403 -106 476 4 q 181 -272 329 -215 m 681 -272 l 649 -214 q 798 -114 743 -176 q 860 36 853 -51 q 801 4 835 17 q 729 -8 768 -8 q 583 47 643 -8 q 524 194 524 101 q 583 361 524 297 q 736 425 642 425 q 914 350 851 425 q 976 147 976 275 q 903 -106 976 4 q 681 -272 829 -215 z "},"\u2039":{ha:376,x_min:63,x_max:301,o:"m 251 92 l 63 307 l 63 393 l 251 608 l 301 567 l 138 350 l 301 131 l 251 92 z "},"\u203A":{ha:376,x_min:75,x_max:314,o:"m 124 92 l 75 131 l 239 350 l 75 567 l 124 608 l 314 393 l 314 307 l 124 92 z "},"\xAB":{ha:596,x_min:63,x_max:521,o:"m 251 92 l 63 307 l 63 393 l 251 608 l 301 567 l 138 350 l 301 131 l 251 92 m 471 92 l 282 307 l 282 393 l 471 608 l 521 567 l 357 350 l 521 131 l 471 92 z "},"\xBB":{ha:596,x_min:75,x_max:533,o:"m 124 92 l 75 131 l 239 350 l 75 567 l 124 608 l 314 393 l 314 307 l 124 92 m 343 92 l 294 131 l 458 350 l 294 567 l 343 608 l 533 393 l 533 307 l 343 92 z "},"-":{ha:432,x_min:57,x_max:376,o:"m 57 304 l 57 392 l 376 392 l 376 304 l 57 304 z "},"\u2013":{ha:667,x_min:57,x_max:610,o:"m 57 310 l 57 389 l 610 389 l 610 310 l 57 310 z "},"\u2014":{ha:1111,x_min:57,x_max:1054,o:"m 57 310 l 57 389 l 1054 389 l 1054 310 l 57 310 z "},"\u2E3A":{ha:2083,x_min:57,x_max:2026,o:"m 57 310 l 57 389 l 2026 389 l 2026 310 l 57 310 z "},"\u2E3B":{ha:3056,x_min:57,x_max:2999,o:"m 2999 389 l 2999 310 l 57 310 l 57 389 l 2999 389 z "},"\u2012":{ha:690,x_min:57,x_max:635,o:"m 57 310 l 57 389 l 635 389 l 635 310 l 57 310 z "},"\u2015":{ha:1111,x_min:57,x_max:1054,o:"m 57 310 l 57 389 l 1054 389 l 1054 310 l 57 310 z "},"\xB7":{ha:346,x_min:90,x_max:256,o:"m 174 360 q 115 384 139 360 q 90 446 90 408 q 115 510 90 486 q 174 535 139 535 q 231 510 207 535 q 256 446 256 486 q 231 384 256 408 q 174 360 207 360 z "},"\u2022":{ha:422,x_min:56,x_max:367,o:"m 211 199 q 102 244 149 199 q 56 365 56 290 q 102 487 56 440 q 211 533 149 533 q 320 487 274 533 q 367 365 367 440 q 320 244 367 290 q 211 199 274 199 z "},"\u2023":{ha:422,x_min:47,x_max:413,o:"m 47 163 l 47 567 l 51 567 l 413 367 l 413 363 l 51 163 l 47 163 z "},"\u25E6":{ha:422,x_min:19,x_max:403,o:"m 211 165 q 113 192 156 165 q 44 263 69 218 q 19 364 19 308 q 44 465 19 421 q 113 536 69 510 q 211 563 156 563 q 311 536 268 563 q 378 465 354 510 q 403 364 403 421 q 378 263 403 308 q 311 192 354 218 q 211 165 268 165 m 211 232 q 295 269 263 232 q 328 364 328 307 q 295 458 328 421 q 211 496 263 496 q 128 458 160 496 q 96 364 96 421 q 128 269 96 307 q 211 232 160 232 z "},"\u25AA":{ha:422,x_min:49,x_max:375,o:"m 49 203 l 49 525 l 375 525 l 375 203 l 49 203 z "},"\u25AB":{ha:422,x_min:31,x_max:392,o:"m 31 185 l 31 543 l 392 543 l 392 185 l 31 185 m 100 247 l 324 247 l 324 481 l 100 481 l 100 247 z "},"\u25B4":{ha:422,x_min:10,x_max:413,o:"m 10 203 l 10 207 l 210 568 l 214 568 l 413 207 l 413 203 l 10 203 z "},"\u25B5":{ha:422,x_min:-21,x_max:443,o:"m -21 185 l -21 189 l 210 597 l 214 597 l 443 189 l 443 185 l -21 185 m 83 246 l 339 246 l 211 479 l 83 246 z "},"\u25B8":{ha:422,x_min:47,x_max:413,o:"m 47 163 l 47 567 l 51 567 l 413 367 l 413 363 l 51 163 l 47 163 z "},"\u25B9":{ha:422,x_min:25,x_max:436,o:"m 25 133 l 25 597 l 28 597 l 436 367 l 436 363 l 28 133 l 25 133 m 85 236 l 319 365 l 85 493 l 85 236 z "},"\u25BE":{ha:422,x_min:10,x_max:413,o:"m 210 160 l 10 521 l 10 525 l 413 525 l 413 521 l 214 160 l 210 160 z "},"\u25BF":{ha:422,x_min:-21,x_max:443,o:"m 210 131 l -21 539 l -21 543 l 443 543 l 443 539 l 214 131 l 210 131 m 211 249 l 339 482 l 83 482 l 211 249 z "},"\u25C2":{ha:422,x_min:10,x_max:376,o:"m 372 163 l 10 363 l 10 367 l 372 567 l 376 567 l 376 163 l 372 163 z "},"\u25C3":{ha:422,x_min:-14,x_max:399,o:"m 394 133 l -14 363 l -14 367 l 394 597 l 399 597 l 399 133 l 394 133 m 338 236 l 338 493 l 104 365 l 338 236 z "},"\u25D8":{ha:422,x_min:28,x_max:394,o:"m 28 183 l 28 544 l 394 544 l 394 183 l 28 183 m 211 200 q 331 247 283 200 q 378 364 378 293 q 331 481 378 435 q 211 528 283 528 q 92 481 140 528 q 44 364 44 435 q 92 247 44 293 q 211 200 140 200 z "},"\u25AC":{ha:422,x_min:0,x_max:422,o:"m 0 272 l 0 428 l 422 428 l 422 272 l 0 272 z "},_:{ha:694,x_min:17,x_max:678,o:"m 17 -175 l 17 -99 l 678 -99 l 678 -175 l 17 -175 z "},"\u2017":{ha:694,x_min:17,x_max:678,o:"m 17 -175 l 17 -99 l 678 -99 l 678 -175 l 17 -175 m 17 -344 l 17 -268 l 678 -268 l 678 -344 l 17 -344 z "},"\u203E":{ha:694,x_min:17,x_max:678,o:"m 17 789 l 17 865 l 678 865 l 678 789 l 17 789 z "},"\u203F":{ha:782,x_min:0,x_max:782,o:"m 392 -324 q 158 -272 257 -324 q 0 -144 60 -221 l 49 -90 q 195 -201 106 -160 q 392 -243 285 -243 q 588 -201 499 -243 q 733 -90 678 -158 l 782 -144 q 624 -272 722 -221 q 392 -324 526 -324 z "},"(":{ha:421,x_min:114,x_max:368,o:"m 297 -244 q 163 49 211 -104 q 114 386 114 203 q 163 724 114 569 q 297 1017 211 878 l 368 983 q 248 698 288 851 q 208 386 208 544 q 248 74 208 228 q 368 -211 288 -79 l 297 -244 z "},")":{ha:421,x_min:53,x_max:307,o:"m 124 -244 l 53 -211 q 173 74 133 -79 q 213 386 213 228 q 173 698 213 544 q 53 983 133 851 l 124 1017 q 258 724 210 878 q 307 386 307 569 q 258 49 307 203 q 124 -244 210 -104 z "},"[":{ha:421,x_min:131,x_max:379,o:"m 131 -211 l 131 983 l 379 983 l 379 918 l 217 918 l 217 -146 l 379 -146 l 379 -211 l 131 -211 z "},"]":{ha:421,x_min:43,x_max:290,o:"m 43 -211 l 43 -146 l 204 -146 l 204 918 l 43 918 l 43 983 l 290 983 l 290 -211 l 43 -211 z "},"{":{ha:421,x_min:47,x_max:379,o:"m 317 -211 q 194 -172 235 -211 q 154 -26 154 -133 q 160 111 154 50 q 167 242 167 172 q 142 315 167 282 q 47 350 118 349 l 47 422 q 142 457 118 424 q 167 529 167 490 q 160 661 167 600 q 154 799 154 722 q 194 944 154 906 q 317 983 235 983 l 379 983 l 379 918 l 342 918 q 267 889 286 918 q 247 792 247 860 q 251 669 247 728 q 256 540 256 611 q 236 437 256 472 q 172 389 217 401 l 172 383 q 236 335 217 371 q 256 232 256 299 q 251 103 256 161 q 247 -19 247 44 q 267 -117 247 -87 q 342 -146 286 -146 l 379 -146 l 379 -211 l 317 -211 z "},"}":{ha:421,x_min:43,x_max:374,o:"m 43 -211 l 43 -146 l 79 -146 q 155 -117 136 -146 q 174 -19 174 -87 q 170 103 174 44 q 167 232 167 161 q 185 335 167 299 q 249 383 204 371 l 249 389 q 185 437 204 401 q 167 540 167 472 q 170 669 167 611 q 174 792 174 728 q 155 889 174 860 q 79 918 136 918 l 43 918 l 43 983 l 104 983 q 227 944 188 983 q 267 799 267 906 q 260 661 267 722 q 254 529 254 600 q 279 457 254 490 q 374 422 304 424 l 374 350 q 279 315 304 349 q 254 242 254 282 q 260 111 254 172 q 267 -26 267 50 q 227 -172 267 -133 q 104 -211 188 -211 l 43 -211 z "},"/":{ha:486,x_min:14,x_max:468,o:"m 14 -222 l 385 986 l 468 986 l 97 -222 l 14 -222 z "},"|":{ha:335,x_min:128,x_max:208,o:"m 128 -347 l 128 1042 l 208 1042 l 208 -347 l 128 -347 z "},"\\":{ha:486,x_min:19,x_max:472,o:"m 390 -222 l 19 986 l 101 986 l 472 -222 l 390 -222 z "},"\xA6":{ha:335,x_min:128,x_max:208,o:"m 128 404 l 128 1042 l 208 1042 l 208 404 l 128 404 m 128 -347 l 128 297 l 208 297 l 208 -347 l 128 -347 z "},"*":{ha:581,x_min:81,x_max:500,o:"m 192 583 l 136 624 l 215 754 l 81 810 l 101 874 l 243 839 l 256 989 l 324 989 l 336 840 l 479 874 l 500 810 l 365 754 l 443 624 l 389 583 l 290 703 l 192 583 z "},"\u2020":{ha:631,x_min:75,x_max:556,o:"m 267 -111 l 274 672 l 75 665 l 75 763 l 274 756 l 267 989 l 364 989 l 357 756 l 556 763 l 556 665 l 357 672 l 364 -111 l 267 -111 z "},"\u2021":{ha:631,x_min:75,x_max:556,o:"m 267 -111 l 274 122 l 75 115 l 75 213 l 274 204 l 267 439 l 274 674 l 75 665 l 75 763 l 274 756 l 267 989 l 364 989 l 357 756 l 556 763 l 556 665 l 357 674 l 364 439 l 357 204 l 556 213 l 556 115 l 357 122 l 364 -111 l 267 -111 z "},"\xA7":{ha:690,x_min:63,x_max:628,o:"m 328 -89 q 192 -62 254 -89 q 88 10 131 -36 l 157 72 q 232 19 192 39 q 328 0 272 0 q 415 28 383 0 q 446 96 446 57 q 418 162 446 136 q 347 208 390 188 q 254 249 303 228 q 162 298 206 269 q 90 369 118 326 q 63 476 63 413 q 97 582 63 538 q 182 656 131 626 q 149 706 161 678 q 138 769 138 733 q 191 896 138 842 q 349 950 244 950 q 469 926 414 950 q 563 871 524 903 l 507 797 q 436 843 474 825 q 353 861 399 861 q 269 835 294 861 q 243 774 243 810 q 271 710 243 736 q 342 665 299 685 q 435 624 386 644 q 528 574 485 603 q 600 501 572 544 q 628 394 628 458 q 595 288 628 329 q 510 215 563 246 q 540 165 529 193 q 551 101 551 138 q 523 4 551 47 q 444 -64 494 -39 q 328 -89 393 -89 m 163 483 q 190 408 163 438 q 260 356 217 378 q 352 313 303 333 q 444 268 401 293 q 506 314 485 288 q 528 386 528 340 q 501 464 528 433 q 431 517 474 494 q 339 559 388 539 q 247 604 290 579 q 185 554 208 582 q 163 483 163 526 z "},"\xB6":{ha:778,x_min:57,x_max:644,o:"m 528 -111 l 528 911 l 644 911 l 644 -111 l 528 -111 m 407 314 q 228 346 307 314 q 103 444 149 378 q 57 615 57 511 q 101 790 57 725 q 220 883 144 854 q 392 911 296 911 l 453 911 l 453 314 l 407 314 z "},"\u2016":{ha:543,x_min:128,x_max:415,o:"m 128 -347 l 128 1042 l 208 1042 l 208 -347 l 128 -347 m 335 -347 l 335 1042 l 415 1042 l 415 -347 l 335 -347 z "},"\u203C":{ha:763,x_min:118,x_max:644,o:"m 161 275 l 146 800 l 143 931 l 258 931 l 256 800 l 240 275 l 161 275 m 201 -17 q 142 8 167 -17 q 118 69 118 32 q 142 134 118 110 q 201 158 167 158 q 259 134 235 158 q 283 69 283 110 q 259 8 283 32 q 201 -17 235 -17 m 522 275 l 507 800 l 504 931 l 619 931 l 617 800 l 601 275 l 522 275 m 563 -17 q 503 8 528 -17 q 479 69 479 32 q 503 134 479 110 q 563 158 528 158 q 620 134 596 158 q 644 69 644 110 q 620 8 644 32 q 563 -17 596 -17 z "},"\u2047":{ha:1132,x_min:53,x_max:1065,o:"m 222 275 q 229 390 213 340 q 276 482 246 440 q 337 561 306 524 q 390 636 368 599 q 413 718 413 674 q 378 813 413 774 q 278 853 344 853 q 191 831 232 853 q 118 772 150 810 l 53 832 q 156 915 97 882 q 292 947 215 947 q 460 888 397 947 q 524 725 524 828 q 501 627 524 671 q 447 544 479 583 q 383 465 414 506 q 334 379 353 425 q 322 275 315 333 l 222 275 m 275 -17 q 217 8 240 -17 q 193 69 193 32 q 217 134 193 110 q 275 158 240 158 q 334 134 310 158 q 358 69 358 110 q 334 8 358 32 q 275 -17 310 -17 m 764 275 q 771 390 754 340 q 817 482 788 440 q 878 561 847 524 q 932 636 910 599 q 954 718 954 674 q 920 813 954 774 q 819 853 886 853 q 733 831 774 853 q 660 772 692 810 l 594 832 q 698 915 639 882 q 833 947 757 947 q 1002 888 939 947 q 1065 725 1065 828 q 1043 627 1065 671 q 988 544 1021 583 q 925 465 956 506 q 876 379 894 425 q 864 275 857 333 l 764 275 m 817 -17 q 758 8 782 -17 q 735 69 735 32 q 758 134 735 110 q 817 158 782 158 q 876 134 851 158 q 900 69 900 110 q 876 8 900 32 q 817 -17 851 -17 z "},"\u2049":{ha:943,x_min:118,x_max:876,o:"m 161 275 l 146 800 l 143 931 l 258 931 l 256 800 l 240 275 l 161 275 m 201 -17 q 142 8 167 -17 q 118 69 118 32 q 142 134 118 110 q 201 158 167 158 q 259 134 235 158 q 283 69 283 110 q 259 8 283 32 q 201 -17 235 -17 m 575 275 q 582 390 565 340 q 628 482 599 440 q 690 561 658 524 q 743 636 721 599 q 765 718 765 674 q 731 813 765 774 q 631 853 697 853 q 544 831 585 853 q 471 772 503 810 l 406 832 q 509 915 450 882 q 644 947 568 947 q 813 888 750 947 q 876 725 876 828 q 854 627 876 671 q 799 544 832 583 q 736 465 767 506 q 687 379 706 425 q 675 275 668 333 l 575 275 m 628 -17 q 569 8 593 -17 q 546 69 546 32 q 569 134 546 110 q 628 158 593 158 q 687 134 663 158 q 711 69 711 110 q 687 8 711 32 q 628 -17 663 -17 z "},"\u2048":{ha:943,x_min:53,x_max:825,o:"m 222 275 q 229 390 213 340 q 276 482 246 440 q 337 561 306 524 q 390 636 368 599 q 413 718 413 674 q 378 813 413 774 q 278 853 344 853 q 191 831 232 853 q 118 772 150 810 l 53 832 q 156 915 97 882 q 292 947 215 947 q 460 888 397 947 q 524 725 524 828 q 501 627 524 671 q 447 544 479 583 q 383 465 414 506 q 334 379 353 425 q 322 275 315 333 l 222 275 m 275 -17 q 217 8 240 -17 q 193 69 193 32 q 217 134 193 110 q 275 158 240 158 q 334 134 310 158 q 358 69 358 110 q 334 8 358 32 q 275 -17 310 -17 m 703 275 l 688 800 l 685 931 l 800 931 l 797 800 l 782 275 l 703 275 m 743 -17 q 684 8 708 -17 q 660 69 660 32 q 684 134 660 110 q 743 158 708 158 q 801 134 776 158 q 825 69 825 110 q 801 8 825 32 q 743 -17 776 -17 z "},"\u203D":{ha:600,x_min:38,x_max:535,o:"m 238 275 l 224 624 l 217 739 l 314 739 l 314 649 l 306 456 q 359 542 331 504 q 408 620 388 581 q 428 711 428 660 q 390 815 428 772 q 278 857 351 857 q 103 768 175 857 l 38 828 q 149 916 86 885 q 286 947 211 947 q 467 885 399 947 q 535 729 535 824 q 513 621 535 667 q 457 538 490 575 q 390 463 424 500 q 335 381 357 426 q 313 275 313 336 l 238 275 m 275 -17 q 217 8 240 -17 q 193 69 193 32 q 217 134 193 110 q 275 158 240 158 q 334 134 310 158 q 358 69 358 110 q 334 8 358 32 q 275 -17 310 -17 z "},"\u2E18":{ha:600,x_min:67,x_max:563,o:"m 314 -272 q 135 -210 203 -272 q 67 -54 67 -149 q 89 54 67 8 q 144 138 111 100 q 210 212 176 175 q 265 294 243 249 q 288 400 288 339 l 364 400 l 376 51 l 385 -64 l 286 -64 l 286 26 l 294 221 q 242 134 271 172 q 192 56 213 96 q 172 -36 172 17 q 211 -139 172 -96 q 322 -182 250 -182 q 497 -93 425 -182 l 563 -153 q 452 -240 515 -208 q 314 -272 389 -272 m 325 517 q 267 542 290 517 q 243 606 243 567 q 267 667 243 643 q 325 692 290 692 q 384 667 360 692 q 408 606 408 643 q 384 542 408 567 q 325 517 360 517 z "},"\u231C":{ha:421,x_min:131,x_max:379,o:"m 131 0 l 131 957 l 379 957 l 379 892 l 217 892 l 217 0 l 131 0 z "},"\u231D":{ha:421,x_min:43,x_max:290,o:"m 204 0 l 204 892 l 43 892 l 43 957 l 290 957 l 290 0 l 204 0 z "},"\u231E":{ha:421,x_min:131,x_max:379,o:"m 131 -72 l 131 886 l 217 886 l 217 -7 l 379 -7 l 379 -72 l 131 -72 z "},"\u231F":{ha:421,x_min:43,x_max:290,o:"m 43 -72 l 43 -7 l 204 -7 l 204 886 l 290 886 l 290 -72 l 43 -72 z "},"\u27E6":{ha:525,x_min:131,x_max:482,o:"m 131 -211 l 131 983 l 482 983 l 482 918 l 329 918 l 329 -146 l 482 -146 l 482 -211 l 131 -211 m 201 -146 l 264 -146 l 264 918 l 201 918 l 201 -146 z "},"\u27E7":{ha:525,x_min:43,x_max:394,o:"m 43 -211 l 43 -146 l 196 -146 l 196 918 l 43 918 l 43 983 l 394 983 l 394 -211 l 43 -211 m 261 -146 l 322 -146 l 322 918 l 261 918 l 261 -146 z "},"\u27E8":{ha:421,x_min:63,x_max:369,o:"m 303 -244 l 63 350 l 63 422 l 303 1017 l 369 988 l 144 386 l 369 -215 l 303 -244 z "},"\u27E9":{ha:421,x_min:51,x_max:358,o:"m 119 -244 l 51 -215 l 276 386 l 51 988 l 119 1017 l 358 422 l 358 350 l 119 -244 z "},"\u2E22":{ha:421,x_min:131,x_max:379,o:"m 131 386 l 131 983 l 379 983 l 379 918 l 217 918 l 217 386 l 131 386 z "},"\u2E23":{ha:421,x_min:43,x_max:290,o:"m 204 386 l 204 918 l 43 918 l 43 983 l 290 983 l 290 386 l 204 386 z "},"\u2E24":{ha:421,x_min:131,x_max:379,o:"m 131 -211 l 131 386 l 217 386 l 217 -146 l 379 -146 l 379 -211 l 131 -211 z "},"\u2E25":{ha:421,x_min:43,x_max:290,o:"m 43 -211 l 43 -146 l 204 -146 l 204 386 l 290 386 l 290 -211 l 43 -211 z "},"\xA9":{ha:1033,x_min:68,x_max:965,o:"m 517 -15 q 345 17 426 -15 q 201 110 264 50 q 103 257 139 171 q 68 449 68 343 q 103 639 68 554 q 201 783 139 724 q 345 875 264 843 q 517 907 426 907 q 688 875 607 907 q 832 783 769 843 q 930 639 894 724 q 965 449 965 554 q 930 257 965 343 q 832 110 894 171 q 688 17 769 50 q 517 -15 607 -15 m 517 43 q 709 94 622 43 q 848 236 796 144 q 900 449 900 328 q 848 660 900 569 q 709 800 796 750 q 517 850 622 850 q 325 800 413 850 q 185 660 238 750 q 133 449 133 569 q 185 236 133 328 q 325 94 238 144 q 517 43 413 43 m 528 179 q 399 211 457 179 q 308 302 342 243 q 275 444 275 361 q 311 590 275 529 q 406 683 347 650 q 532 715 465 715 q 633 692 590 715 q 707 635 676 669 l 657 583 q 536 639 608 639 q 414 585 461 639 q 367 444 367 531 q 412 306 367 357 q 532 256 457 256 q 610 272 581 256 q 669 315 639 288 l 714 260 q 633 201 676 224 q 528 179 590 179 z "},"\u2117":{ha:1032,x_min:68,x_max:965,o:"m 517 -15 q 345 17 426 -15 q 201 110 264 50 q 103 257 139 171 q 68 449 68 343 q 103 639 68 554 q 201 783 139 724 q 345 875 264 843 q 517 907 426 907 q 688 875 607 907 q 832 783 769 843 q 930 639 894 724 q 965 449 965 554 q 930 257 965 343 q 832 110 894 171 q 688 17 769 50 q 517 -15 607 -15 m 517 43 q 709 94 622 43 q 848 236 796 144 q 900 449 900 328 q 848 660 900 569 q 709 800 796 750 q 517 850 622 850 q 325 800 413 850 q 185 660 238 750 q 133 449 133 569 q 185 236 133 328 q 325 94 238 144 q 517 43 413 43 m 351 194 l 351 697 l 543 697 q 689 659 629 697 q 749 535 749 621 q 689 399 749 444 q 543 354 629 354 l 442 354 l 442 194 l 351 194 m 442 422 l 528 422 q 624 449 590 422 q 658 533 658 476 q 624 604 658 582 q 528 626 589 626 l 442 626 l 442 422 z "},"\xAE":{ha:588,x_min:32,x_max:556,o:"m 293 443 q 163 478 222 443 q 67 574 103 513 q 32 717 32 636 q 67 860 32 799 q 163 956 103 921 q 293 990 222 990 q 425 956 365 990 q 520 860 485 921 q 556 717 556 799 q 520 574 556 636 q 425 478 485 513 q 293 443 365 443 m 293 494 q 398 522 351 494 q 472 601 444 550 q 500 717 500 651 q 472 833 500 782 q 398 912 444 883 q 293 940 351 940 q 188 912 235 940 q 115 833 142 883 q 88 717 88 782 q 115 601 88 651 q 188 522 142 550 q 293 494 235 494 m 193 579 l 193 861 l 299 861 q 375 841 343 861 q 407 771 407 821 q 393 724 407 746 q 356 694 379 703 l 419 579 l 356 579 l 307 676 l 250 676 l 250 579 l 193 579 m 250 721 l 286 721 q 346 768 346 721 q 333 801 346 789 q 289 814 321 814 l 250 814 l 250 721 z "},"\u2122":{ha:885,x_min:4,x_max:844,o:"m 142 508 l 142 864 l 4 864 l 4 939 l 364 939 l 364 864 l 225 864 l 225 508 l 142 508 m 431 508 l 431 939 l 532 939 l 597 778 l 636 669 l 642 669 l 681 778 l 744 939 l 844 939 l 844 508 l 768 508 l 768 699 l 778 844 l 772 844 l 671 575 l 606 575 l 504 844 l 499 844 l 508 699 l 508 508 l 431 508 z "},"\u2120":{ha:885,x_min:38,x_max:844,o:"m 194 492 q 109 510 149 492 q 38 558 69 528 l 83 610 q 137 572 108 586 q 200 557 165 557 q 268 611 268 557 q 253 650 268 639 q 208 675 239 661 l 143 707 q 86 750 113 722 q 60 826 60 778 q 101 915 60 881 q 206 949 142 949 q 279 933 244 949 q 338 896 314 918 l 297 842 q 250 871 275 858 q 201 883 225 883 q 153 867 169 883 q 136 831 136 851 q 152 797 136 810 q 194 771 168 783 l 258 739 q 322 694 299 721 q 346 618 346 667 q 305 531 346 569 q 194 492 264 492 m 431 508 l 431 939 l 532 939 l 597 778 l 636 669 l 642 669 l 681 778 l 744 939 l 844 939 l 844 508 l 768 508 l 768 699 l 778 844 l 772 844 l 671 575 l 606 575 l 504 844 l 499 844 l 508 699 l 508 508 l 431 508 z "},"@":{ha:1176,x_min:71,x_max:1107,o:"m 560 -215 q 313 -158 424 -215 q 136 10 201 -101 q 71 282 71 121 q 117 535 71 422 q 244 729 163 649 q 429 853 325 810 q 650 897 533 897 q 892 840 790 897 q 1051 678 994 782 q 1107 438 1107 575 q 1065 232 1107 315 q 958 107 1022 149 q 829 65 894 65 q 731 92 771 65 q 685 174 692 118 l 682 174 q 604 103 650 131 q 513 75 558 75 q 391 127 440 75 q 342 275 342 179 q 361 388 342 331 q 416 494 381 446 q 501 571 451 542 q 613 600 551 600 q 724 531 685 600 l 726 531 l 742 588 l 818 588 l 764 308 q 764 187 746 225 q 838 149 782 149 q 921 183 881 149 q 988 281 961 217 q 1015 433 1015 344 q 973 627 1015 542 q 847 761 931 713 q 640 810 764 810 q 465 773 550 810 q 312 667 379 736 q 205 502 244 599 q 165 286 165 406 q 217 62 165 154 q 361 -79 269 -31 q 568 -128 453 -128 q 687 -112 631 -128 q 790 -71 743 -97 l 824 -144 q 697 -197 763 -179 q 560 -215 632 -215 m 535 160 q 596 178 564 160 q 663 240 628 197 l 703 460 q 663 503 683 492 q 614 515 642 515 q 521 478 560 515 q 461 388 482 442 q 440 282 440 335 q 467 188 440 217 q 535 160 494 160 z "},"#":{ha:690,x_min:47,x_max:651,o:"m 122 0 l 157 279 l 47 279 l 47 367 l 165 367 l 190 565 l 75 565 l 75 653 l 200 653 l 233 903 l 317 903 l 283 653 l 457 653 l 490 903 l 574 903 l 540 653 l 651 653 l 651 565 l 532 565 l 506 367 l 624 367 l 624 279 l 496 279 l 463 0 l 379 0 l 413 279 l 240 279 l 206 0 l 122 0 m 249 367 l 422 367 l 449 565 l 274 565 l 249 367 z "},"\u2070":{ha:510,x_min:49,x_max:463,o:"m 256 532 q 106 607 163 532 q 49 821 49 682 q 106 1032 49 957 q 256 1107 163 1107 q 406 1032 349 1107 q 463 821 463 957 q 406 607 463 682 q 256 532 349 532 m 256 603 q 342 658 308 603 q 375 821 375 713 q 342 983 375 929 q 256 1036 308 1036 q 168 983 201 1036 q 135 821 135 929 q 168 658 135 713 q 256 603 201 603 z "},"\xB9":{ha:510,x_min:121,x_max:328,o:"m 239 549 l 239 976 l 121 976 l 121 1035 q 197 1056 167 1043 q 256 1090 228 1069 l 328 1090 l 328 549 l 239 549 z "},"\xB2":{ha:510,x_min:56,x_max:444,o:"m 72 549 l 72 600 q 264 785 199 714 q 329 918 329 857 q 301 1001 329 971 q 225 1032 274 1032 q 161 1009 190 1032 q 108 953 132 986 l 56 1001 q 134 1078 88 1049 q 236 1107 181 1107 q 367 1063 318 1107 q 417 932 417 1018 q 390 833 417 881 q 319 735 364 785 q 215 625 274 685 l 444 625 l 444 549 l 72 549 z "},"\xB3":{ha:510,x_min:49,x_max:443,o:"m 250 532 q 133 562 185 532 q 49 638 81 592 l 108 683 q 168 624 133 646 q 246 603 203 603 q 322 628 290 603 q 354 700 354 653 q 310 772 354 747 q 186 796 265 796 l 186 853 q 294 881 256 853 q 333 950 333 908 q 306 1013 333 989 q 235 1036 279 1036 q 176 1017 204 1036 q 125 971 149 999 l 71 1018 q 150 1083 107 1058 q 249 1107 193 1107 q 369 1069 318 1107 q 421 961 421 1031 q 394 881 421 914 q 326 828 368 847 q 408 783 372 817 q 443 694 443 749 q 386 576 443 619 q 250 532 329 532 z "},"\u2074":{ha:510,x_min:58,x_max:467,o:"m 151 757 l 306 757 l 306 854 l 311 1006 l 306 1006 l 236 893 l 151 757 m 306 549 l 306 693 l 58 693 l 58 739 l 286 1090 l 386 1090 l 386 757 l 467 757 l 467 693 l 386 693 l 386 549 l 306 549 z "},"\u2075":{ha:510,x_min:49,x_max:449,o:"m 254 532 q 131 562 182 532 q 49 638 81 592 l 108 683 q 168 624 135 646 q 249 603 201 603 q 328 637 297 603 q 360 722 360 671 q 328 810 360 778 q 246 842 296 842 q 190 829 214 842 q 143 797 165 817 l 100 829 l 125 1090 l 421 1090 l 421 1013 l 199 1013 l 183 881 q 225 895 203 889 q 271 901 247 901 q 397 854 344 901 q 449 719 449 807 q 392 584 449 636 q 254 532 336 532 z "},"\u2076":{ha:510,x_min:63,x_max:453,o:"m 265 824 q 207 810 235 824 q 147 764 179 797 q 188 643 154 683 q 271 603 221 603 q 342 634 315 603 q 369 714 369 665 q 343 793 369 763 q 265 824 317 824 m 272 532 q 119 605 176 532 q 63 806 63 678 q 131 1033 63 958 q 299 1107 199 1107 q 377 1094 346 1107 q 431 1065 408 1082 l 394 1003 q 352 1026 375 1017 q 301 1036 329 1036 q 198 986 242 1036 q 147 833 154 936 q 283 889 207 889 q 409 841 365 889 q 453 715 453 793 q 429 622 453 664 q 365 556 406 581 q 272 532 324 532 z "},"\u2077":{ha:510,x_min:69,x_max:449,o:"m 182 549 q 206 719 188 643 q 258 867 224 796 q 349 1014 293 939 l 69 1014 l 69 1090 l 449 1090 l 449 1040 q 347 880 383 957 q 296 723 311 803 q 275 549 281 643 l 182 549 z "},"\u2078":{ha:510,x_min:63,x_max:444,o:"m 253 532 q 115 577 168 532 q 63 683 63 622 q 94 774 63 735 q 165 835 126 813 l 165 840 q 108 892 131 864 q 85 964 85 921 q 134 1068 85 1029 q 253 1107 183 1107 q 376 1068 326 1107 q 426 964 426 1029 q 399 885 426 917 q 343 833 371 853 l 343 828 q 417 770 390 804 q 444 688 444 736 q 390 577 444 622 q 253 532 335 532 m 285 858 q 329 908 315 882 q 343 961 343 935 q 317 1018 343 997 q 253 1039 290 1039 q 192 1017 218 1039 q 167 963 167 996 q 201 897 167 921 q 285 858 236 874 m 253 597 q 329 624 297 597 q 361 690 361 651 q 342 743 361 724 q 290 776 322 763 q 221 804 258 789 q 146 692 146 760 q 176 626 146 656 q 253 597 206 597 z "},"\u2079":{ha:510,x_min:54,x_max:444,o:"m 136 925 q 163 847 136 878 q 240 815 190 815 q 301 828 272 815 q 360 875 329 842 q 320 996 354 956 q 235 1036 286 1036 q 164 1005 192 1036 q 136 925 136 974 m 208 532 q 130 544 161 532 q 75 574 99 557 l 113 636 q 155 613 132 622 q 206 603 178 603 q 310 653 267 603 q 360 807 354 703 q 224 750 300 750 q 99 799 143 750 q 54 924 54 847 q 78 1017 54 976 q 142 1083 101 1058 q 233 1107 183 1107 q 388 1034 331 1107 q 444 833 444 961 q 376 606 444 681 q 208 532 308 532 z "},"\u207A":{ha:510,x_min:42,x_max:468,o:"m 215 597 l 215 788 l 42 788 l 42 861 l 215 861 l 215 1050 l 293 1050 l 293 861 l 468 861 l 468 788 l 293 788 l 293 597 l 215 597 z "},"\u207B":{ha:510,x_min:42,x_max:468,o:"m 42 788 l 42 861 l 468 861 l 468 788 l 42 788 z "},"\u02ED":{ha:510,x_min:42,x_max:468,o:"z "},"\u207D":{ha:329,x_min:90,x_max:275,o:"m 213 439 q 122 613 153 524 q 90 819 90 701 q 122 1024 90 936 q 213 1197 153 1113 l 275 1167 q 199 999 222 1086 q 176 819 176 911 q 199 640 176 726 q 275 469 222 553 l 213 439 z "},"\u207E":{ha:329,x_min:54,x_max:239,o:"m 119 439 l 54 469 q 130 640 107 553 q 153 819 153 726 q 130 999 153 911 q 54 1167 107 1086 l 119 1197 q 208 1024 176 1113 q 239 819 239 936 q 208 613 239 701 q 119 439 176 524 z "},"\u2080":{ha:510,x_min:49,x_max:463,o:"m 256 -262 q 106 -187 163 -262 q 49 26 49 -112 q 106 238 49 163 q 256 313 163 313 q 406 238 349 313 q 463 26 463 163 q 406 -187 463 -112 q 256 -262 349 -262 m 256 -192 q 342 -137 308 -192 q 375 26 375 -82 q 342 188 375 135 q 256 242 308 242 q 168 188 201 242 q 135 26 135 135 q 168 -137 135 -82 q 256 -192 201 -192 z "},"\u2081":{ha:510,x_min:121,x_max:328,o:"m 239 -246 l 239 182 l 121 182 l 121 240 q 197 262 167 249 q 256 296 228 275 l 328 296 l 328 -246 l 239 -246 z "},"\u2082":{ha:510,x_min:56,x_max:444,o:"m 72 -246 l 72 -194 q 264 -9 199 -81 q 329 124 329 63 q 301 207 329 176 q 225 238 274 238 q 161 215 190 238 q 108 158 132 192 l 56 207 q 134 283 88 254 q 236 313 181 313 q 367 268 318 313 q 417 138 417 224 q 390 38 417 86 q 319 -60 364 -10 q 215 -169 274 -110 l 444 -169 l 444 -246 l 72 -246 z "},"\u2083":{ha:510,x_min:49,x_max:443,o:"m 250 -262 q 133 -233 185 -262 q 49 -157 81 -203 l 108 -111 q 168 -170 133 -149 q 246 -192 203 -192 q 322 -167 290 -192 q 354 -94 354 -142 q 310 -23 354 -47 q 186 1 265 1 l 186 58 q 294 86 256 58 q 333 156 333 114 q 306 218 333 194 q 235 242 279 242 q 176 223 204 242 q 125 176 149 204 l 71 224 q 150 288 107 264 q 249 313 193 313 q 369 274 318 313 q 421 167 421 236 q 394 86 421 119 q 326 33 368 53 q 408 -12 372 22 q 443 -100 443 -46 q 386 -219 443 -175 q 250 -262 329 -262 z "},"\u2084":{ha:510,x_min:58,x_max:467,o:"m 151 -37 l 306 -37 l 306 60 l 311 211 l 306 211 l 236 99 l 151 -37 m 306 -246 l 306 -101 l 58 -101 l 58 -56 l 286 296 l 386 296 l 386 -37 l 467 -37 l 467 -101 l 386 -101 l 386 -246 l 306 -246 z "},"\u2085":{ha:510,x_min:49,x_max:449,o:"m 254 -262 q 131 -233 182 -262 q 49 -157 81 -203 l 108 -111 q 168 -170 135 -149 q 249 -192 201 -192 q 328 -158 297 -192 q 360 -72 360 -124 q 328 15 360 -17 q 246 47 296 47 q 190 35 214 47 q 143 3 165 22 l 100 35 l 125 296 l 421 296 l 421 218 l 199 218 l 183 86 q 225 101 203 94 q 271 107 247 107 q 397 60 344 107 q 449 -75 449 13 q 392 -210 449 -158 q 254 -262 336 -262 z "},"\u2086":{ha:510,x_min:63,x_max:453,o:"m 265 29 q 207 16 235 29 q 147 -31 179 3 q 188 -151 154 -111 q 271 -192 221 -192 q 342 -160 315 -192 q 369 -81 369 -129 q 343 -1 369 -32 q 265 29 317 29 m 272 -262 q 119 -190 176 -262 q 63 11 63 -117 q 131 238 63 164 q 299 313 199 313 q 377 300 346 313 q 431 271 408 288 l 394 208 q 352 232 375 222 q 301 242 329 242 q 198 192 242 242 q 147 39 154 142 q 283 94 207 94 q 409 47 365 94 q 453 -79 453 -1 q 429 -172 453 -131 q 365 -238 406 -214 q 272 -262 324 -262 z "},"\u2087":{ha:510,x_min:69,x_max:449,o:"m 182 -246 q 206 -75 188 -151 q 258 73 224 1 q 349 219 293 144 l 69 219 l 69 296 l 449 296 l 449 246 q 347 85 383 163 q 296 -72 311 8 q 275 -246 281 -151 l 182 -246 z "},"\u2088":{ha:510,x_min:63,x_max:444,o:"m 253 -262 q 115 -217 168 -262 q 63 -111 63 -172 q 94 -21 63 -60 q 165 40 126 18 l 165 46 q 108 98 131 69 q 85 169 85 126 q 134 274 85 235 q 253 313 183 313 q 376 274 326 313 q 426 169 426 235 q 399 90 426 122 q 343 39 371 58 l 343 33 q 417 -24 390 10 q 444 -107 444 -58 q 390 -217 444 -172 q 253 -262 335 -262 m 285 64 q 329 114 315 88 q 343 167 343 140 q 317 224 343 203 q 253 244 290 244 q 192 223 218 244 q 167 168 167 201 q 201 103 167 126 q 285 64 236 79 m 253 -197 q 329 -170 297 -197 q 361 -104 361 -143 q 342 -51 361 -71 q 290 -19 322 -32 q 221 10 258 -6 q 146 -103 146 -35 q 176 -168 146 -139 q 253 -197 206 -197 z "},"\u2089":{ha:510,x_min:54,x_max:444,o:"m 136 131 q 163 52 136 83 q 240 21 190 21 q 301 34 272 21 q 360 81 329 47 q 320 201 354 161 q 235 242 286 242 q 164 210 192 242 q 136 131 136 179 m 208 -262 q 130 -250 161 -262 q 75 -221 99 -237 l 113 -158 q 155 -182 132 -172 q 206 -192 178 -192 q 310 -142 267 -192 q 360 13 354 -92 q 224 -44 300 -44 q 99 4 143 -44 q 54 129 54 53 q 78 223 54 182 q 142 288 101 264 q 233 313 183 313 q 388 240 331 313 q 444 39 444 167 q 376 -188 444 -114 q 208 -262 308 -262 z "},"\u208A":{ha:510,x_min:42,x_max:468,o:"m 215 -207 l 215 -17 l 42 -17 l 42 57 l 215 57 l 215 246 l 293 246 l 293 57 l 468 57 l 468 -17 l 293 -17 l 293 -207 l 215 -207 z "},"\u208B":{ha:510,x_min:42,x_max:468,o:"m 42 -17 l 42 57 l 468 57 l 468 -17 l 42 -17 z "},"\u208C":{ha:510,x_min:42,x_max:468,o:"m 42 100 l 42 174 l 468 174 l 468 100 l 42 100 m 42 -133 l 42 -60 l 468 -60 l 468 -133 l 42 -133 z "},"\u208D":{ha:329,x_min:90,x_max:275,o:"m 213 -356 q 122 -182 153 -271 q 90 25 90 -93 q 122 230 90 142 q 213 403 153 318 l 275 372 q 199 204 222 292 q 176 25 176 117 q 199 -155 176 -68 q 275 -325 222 -242 l 213 -356 z "},"\u208E":{ha:329,x_min:54,x_max:239,o:"m 119 -356 l 54 -325 q 130 -155 107 -242 q 153 25 153 -68 q 130 204 153 117 q 54 372 107 292 l 119 403 q 208 230 176 318 q 239 25 239 142 q 208 -182 239 -93 q 119 -356 176 -271 z "},\u00AA:{ha:479,x_min:53,x_max:414,o:"m 189 536 q 90 572 128 536 q 53 668 53 608 q 119 782 53 742 q 328 835 185 822 q 308 906 326 879 q 242 933 290 933 q 167 919 206 933 q 101 886 129 904 l 68 946 q 151 987 103 968 q 254 1006 200 1006 q 376 957 338 1006 q 414 821 414 908 l 414 549 l 344 549 l 335 600 l 329 600 q 267 556 301 575 q 189 536 232 536 m 215 607 q 328 661 269 607 l 328 776 q 181 738 222 764 q 139 674 139 711 q 215 607 139 607 z "},\u00BA:{ha:507,x_min:42,x_max:464,o:"m 253 538 q 147 565 196 538 q 70 645 99 593 q 42 771 42 697 q 70 899 42 846 q 147 978 99 951 q 253 1006 196 1006 q 358 978 310 1006 q 435 899 406 951 q 464 771 464 846 q 435 645 464 697 q 358 565 406 593 q 253 538 310 538 m 253 608 q 342 653 310 608 q 375 771 375 699 q 342 890 375 844 q 253 935 310 935 q 163 890 196 935 q 129 771 129 844 q 163 653 129 699 q 253 608 196 608 z "},"\u1D2C":{ha:504,x_min:-1,x_max:507,o:"m 190 879 l 164 793 l 339 793 l 313 879 q 283 979 297 929 q 253 1078 268 1029 l 250 1078 q 221 978 236 1026 q 190 879 206 929 m -1 549 l 203 1149 l 303 1149 l 507 549 l 414 549 l 360 725 l 142 725 l 88 549 l -1 549 z "},"\u1D2E":{ha:544,x_min:79,x_max:510,o:"m 79 549 l 79 1149 l 265 1149 q 417 1115 358 1149 q 476 1001 476 1082 q 450 922 476 958 q 371 871 424 886 l 371 868 q 474 822 438 857 q 510 725 510 786 q 445 592 510 636 q 279 549 381 549 l 79 549 m 167 894 l 253 894 q 359 919 326 894 q 392 992 392 944 q 358 1060 392 1039 q 256 1081 324 1081 l 167 1081 l 167 894 m 167 615 l 268 615 q 384 642 343 615 q 425 729 425 669 q 385 807 425 782 q 268 832 344 832 l 167 832 l 167 615 z "},"\uA7F2":{ha:526,x_min:44,x_max:500,o:"m 313 538 q 176 574 236 538 q 80 679 115 610 q 44 846 44 749 q 81 1013 44 943 q 179 1122 117 1083 q 318 1160 242 1160 q 418 1138 375 1160 q 488 1085 461 1115 l 439 1031 q 385 1069 414 1054 q 321 1083 357 1083 q 186 1019 238 1083 q 135 849 135 956 q 184 676 135 739 q 317 613 233 613 q 392 629 358 613 q 451 676 425 646 l 500 624 q 419 560 465 582 q 313 538 372 538 z "},"\u1D30":{ha:571,x_min:79,x_max:525,o:"m 79 549 l 79 1149 l 235 1149 q 450 1072 375 1149 q 525 851 525 996 q 451 627 525 706 q 239 549 376 549 l 79 549 m 167 618 l 233 618 q 384 678 333 618 q 435 851 435 738 q 231 1078 435 1078 l 167 1078 l 167 618 z "},"\u1D31":{ha:488,x_min:79,x_max:443,o:"m 79 549 l 79 1149 l 435 1149 l 435 1075 l 167 1075 l 167 899 l 394 899 l 394 826 l 167 826 l 167 621 l 443 621 l 443 549 l 79 549 z "},"\uA7F3":{ha:458,x_min:79,x_max:436,o:"m 79 549 l 79 1149 l 436 1149 l 436 1075 l 167 1075 l 167 883 l 396 883 l 396 811 l 167 811 l 167 549 l 79 549 z "},"\u1D33":{ha:571,x_min:46,x_max:511,o:"m 322 538 q 179 574 242 538 q 81 681 117 611 q 46 847 46 750 q 83 1014 46 944 q 183 1122 119 1083 q 329 1160 247 1160 q 433 1137 390 1160 q 504 1086 476 1114 l 457 1031 q 404 1069 435 1054 q 329 1085 374 1085 q 188 1022 240 1085 q 135 851 135 958 q 185 676 135 740 q 331 613 236 613 q 390 621 363 613 q 435 644 418 629 l 435 793 l 311 793 l 311 864 l 511 864 l 511 606 q 432 557 481 576 q 322 538 383 538 z "},"\u1D34":{ha:603,x_min:79,x_max:525,o:"m 79 549 l 79 1149 l 167 1149 l 167 901 l 438 901 l 438 1149 l 525 1149 l 525 549 l 438 549 l 438 826 l 167 826 l 167 549 l 79 549 z "},"\u1D35":{ha:244,x_min:79,x_max:167,o:"m 79 549 l 79 1149 l 167 1149 l 167 549 l 79 549 z "},"\u1D36":{ha:446,x_min:25,x_max:369,o:"m 194 538 q 94 563 135 538 q 25 635 53 588 l 86 678 q 188 613 124 613 q 258 641 235 613 q 282 736 282 669 l 282 1149 l 369 1149 l 369 729 q 328 594 369 650 q 194 538 288 538 z "},"\u1D37":{ha:538,x_min:79,x_max:538,o:"m 79 549 l 79 1149 l 167 1149 l 167 857 l 169 857 l 411 1149 l 508 1149 l 319 919 l 538 549 l 442 549 l 267 853 l 167 736 l 167 549 l 79 549 z "},"\u1D38":{ha:451,x_min:79,x_max:428,o:"m 79 549 l 79 1149 l 167 1149 l 167 621 l 428 621 l 428 549 l 79 549 z "},"\u1D39":{ha:675,x_min:79,x_max:597,o:"m 79 549 l 79 1149 l 183 1149 l 300 835 l 339 713 l 343 713 l 379 835 l 493 1149 l 597 1149 l 597 549 l 513 549 l 513 858 q 516 948 513 899 q 524 1040 519 997 l 521 1040 l 475 901 l 367 606 l 308 606 l 200 901 l 153 1040 l 150 1040 q 158 948 156 997 q 161 858 161 899 l 161 549 l 79 549 z "},"\u1D3A":{ha:597,x_min:79,x_max:519,o:"m 79 549 l 79 1149 l 175 1149 l 381 789 l 444 657 l 450 657 q 442 756 444 706 q 439 854 439 806 l 439 1149 l 519 1149 l 519 549 l 425 549 l 219 907 l 156 1039 l 150 1039 q 158 943 156 992 q 160 846 160 894 l 160 549 l 79 549 z "},"\u1D3C":{ha:615,x_min:44,x_max:572,o:"m 307 538 q 172 576 231 538 q 78 684 113 614 q 44 851 44 754 q 78 1017 44 947 q 172 1123 113 1086 q 307 1160 231 1160 q 444 1123 385 1160 q 538 1017 504 1086 q 572 851 572 947 q 538 684 572 754 q 444 576 504 614 q 307 538 385 538 m 307 613 q 433 677 386 613 q 481 851 481 742 q 433 1022 481 960 q 307 1085 386 1085 q 182 1022 229 1085 q 135 851 135 960 q 182 677 135 742 q 307 613 229 613 z "},"\u1D3E":{ha:535,x_min:79,x_max:499,o:"m 79 549 l 79 1149 l 272 1149 q 436 1108 374 1149 q 499 969 499 1068 q 435 826 499 872 q 272 781 371 781 l 167 781 l 167 549 l 79 549 m 167 850 l 263 850 q 413 969 413 850 q 375 1054 413 1031 q 263 1078 338 1078 l 167 1078 l 167 850 z "},"\uA7F4":{ha:615,x_min:43,x_max:585,o:"m 306 610 q 432 676 385 610 q 479 851 479 742 q 432 1022 479 958 q 306 1085 385 1085 q 181 1022 228 1085 q 133 851 133 958 q 181 676 133 742 q 306 610 228 610 m 494 397 q 350 438 408 397 q 265 540 292 478 q 105 638 167 556 q 43 851 43 721 q 76 1017 43 947 q 169 1123 110 1086 q 306 1160 229 1160 q 443 1122 383 1160 q 536 1016 503 1085 q 569 851 569 947 q 511 642 569 724 q 357 542 453 561 q 417 485 378 503 q 504 468 456 468 q 540 471 525 468 q 568 478 556 474 l 585 411 q 547 401 571 406 q 494 397 524 397 z "},"\u1D3F":{ha:540,x_min:79,x_max:511,o:"m 79 549 l 79 1149 l 275 1149 q 429 1110 368 1149 q 490 978 490 1072 q 454 867 490 910 q 358 807 418 824 l 511 549 l 413 549 l 272 796 l 167 796 l 167 549 l 79 549 m 167 865 l 264 865 q 404 976 404 865 q 369 1055 404 1032 q 264 1078 333 1078 l 167 1078 l 167 865 z "},"\u1D40":{ha:494,x_min:24,x_max:472,o:"m 206 549 l 206 1075 l 24 1075 l 24 1149 l 472 1149 l 472 1075 l 292 1075 l 292 549 l 206 549 z "},"\u1D41":{ha:599,x_min:78,x_max:522,o:"m 301 538 q 140 597 201 538 q 78 801 78 656 l 78 1149 l 164 1149 l 164 797 q 203 652 164 692 q 301 613 242 613 q 399 652 360 613 q 439 797 439 692 l 439 1149 l 522 1149 l 522 801 q 494 647 522 704 q 415 563 465 589 q 301 538 365 538 z "},"\u2C7D":{ha:481,x_min:-3,x_max:483,o:"m 192 549 l -3 1149 l 89 1149 l 185 832 q 213 734 200 781 q 242 635 225 688 l 246 635 q 274 734 263 688 q 301 832 286 781 l 394 1149 l 483 1149 l 292 549 l 192 549 z "},"\u1D42":{ha:731,x_min:18,x_max:711,o:"m 144 549 l 18 1149 l 110 1149 l 168 831 q 185 738 178 782 q 199 636 192 693 l 204 636 q 225 738 215 693 q 246 831 235 782 l 324 1149 l 408 1149 l 490 831 q 511 738 501 782 q 531 636 521 693 l 536 636 q 549 738 543 693 q 565 831 556 782 l 629 1149 l 711 1149 l 588 549 l 478 549 l 394 892 q 381 961 386 926 q 368 1031 375 996 l 364 1031 q 351 961 358 996 q 338 892 344 926 l 256 549 l 144 549 z "},"\u1D43":{ha:479,x_min:53,x_max:414,o:"m 189 536 q 90 572 128 536 q 53 668 53 608 q 119 782 53 742 q 328 835 185 822 q 308 906 326 879 q 242 933 290 933 q 167 919 206 933 q 101 886 129 904 l 68 946 q 151 987 103 968 q 254 1006 200 1006 q 376 957 338 1006 q 414 821 414 908 l 414 549 l 344 549 l 335 600 l 329 600 q 267 556 301 575 q 189 536 232 536 m 215 607 q 328 661 269 607 l 328 776 q 181 738 222 764 q 139 674 139 711 q 215 607 139 607 z "},"\u1D47":{ha:519,x_min:72,x_max:474,o:"m 279 538 q 215 552 249 538 q 153 593 181 567 l 147 593 l 139 549 l 72 549 l 72 1199 l 158 1199 l 158 1024 l 154 943 q 220 988 186 969 q 293 1006 254 1006 q 427 944 381 1006 q 474 779 474 882 q 447 649 474 703 q 375 566 419 594 q 279 538 331 538 m 267 608 q 351 653 317 608 q 385 779 385 697 q 358 893 385 851 q 272 935 331 935 q 158 875 218 935 l 158 651 q 215 619 186 629 q 267 608 243 608 z "},"\u1D9C":{ha:425,x_min:42,x_max:403,o:"m 256 538 q 102 599 163 538 q 42 771 42 660 q 72 898 42 846 q 151 978 101 950 q 258 1006 201 1006 q 341 990 307 1006 q 396 957 375 975 l 354 901 q 314 926 333 918 q 264 935 294 935 q 168 890 207 935 q 129 771 129 844 q 167 653 129 699 q 264 608 204 608 q 324 619 300 608 q 367 646 347 631 l 403 590 q 344 553 379 569 q 256 538 308 538 z "},"\u1D48":{ha:519,x_min:46,x_max:447,o:"m 236 538 q 97 601 147 538 q 46 779 46 664 q 74 901 46 850 q 146 978 101 951 q 240 1006 190 1006 q 307 992 276 1006 q 365 956 338 979 l 361 1033 l 361 1199 l 447 1199 l 447 549 l 378 549 l 368 597 l 364 597 q 306 555 338 572 q 236 538 275 538 m 256 608 q 308 623 283 608 q 361 665 333 638 l 361 890 q 306 924 333 914 q 254 935 279 935 q 170 892 206 935 q 135 779 135 850 q 165 653 135 697 q 256 608 194 608 z "},"\u1D49":{ha:467,x_min:39,x_max:431,o:"m 246 936 q 169 906 203 936 q 126 811 135 876 l 353 811 q 321 907 349 878 q 246 936 293 936 m 258 538 q 103 599 167 538 q 39 772 39 660 q 68 898 39 846 q 144 978 97 950 q 246 1006 192 1006 q 383 947 336 1006 q 431 794 431 889 q 426 747 431 768 l 125 747 q 172 641 132 675 q 264 607 213 607 q 328 616 300 607 q 383 640 357 625 l 414 588 q 344 551 382 565 q 258 538 307 538 z "},"\u1DA0":{ha:279,x_min:26,x_max:306,o:"m 89 549 l 89 926 l 26 926 l 26 992 l 89 994 l 89 1053 q 122 1168 89 1122 q 228 1214 156 1214 q 306 1200 272 1214 l 288 1136 q 265 1142 278 1139 q 236 1144 253 1144 q 190 1122 206 1144 q 175 1058 175 1099 l 175 994 l 269 994 l 269 926 l 175 926 l 175 549 l 89 549 z "},"\u1D4D":{ha:476,x_min:42,x_max:461,o:"m 228 344 q 93 375 144 344 q 42 464 42 406 q 106 561 42 522 l 106 567 q 76 596 88 578 q 65 640 65 614 q 81 688 65 667 q 115 721 97 708 l 115 726 q 74 776 93 744 q 56 846 56 807 q 108 963 56 921 q 231 1006 160 1006 q 301 993 271 1006 l 454 993 l 454 926 l 368 926 q 391 890 382 913 q 400 843 400 868 q 350 729 400 771 q 231 688 300 688 q 198 690 215 688 q 164 701 181 693 q 145 681 153 693 q 138 654 138 669 q 155 621 138 632 q 215 610 172 610 l 301 610 q 422 584 383 610 q 461 500 461 558 q 399 391 461 438 q 228 344 336 344 m 231 746 q 295 773 268 746 q 322 846 322 800 q 295 917 322 892 q 231 943 268 943 q 164 918 190 943 q 138 846 138 893 q 164 773 138 800 q 231 746 190 746 m 242 404 q 340 430 303 404 q 378 488 378 456 q 355 526 378 515 q 290 538 332 538 l 217 538 q 190 538 206 538 q 158 543 174 539 q 115 476 115 513 q 149 423 115 442 q 242 404 182 404 z "},\u02B0:{ha:508,x_min:72,x_max:446,o:"m 72 549 l 72 1199 l 158 1199 l 158 1025 l 154 932 q 221 983 182 961 q 304 1006 260 1006 q 414 957 382 1006 q 446 831 446 908 l 446 549 l 360 549 l 360 818 q 344 901 360 871 q 275 932 328 932 q 158 867 224 932 l 158 549 l 72 549 z "},"\u2071":{ha:231,x_min:58,x_max:175,o:"m 72 549 l 72 994 l 158 994 l 158 549 l 72 549 m 117 1081 q 75 1097 92 1081 q 58 1135 58 1113 q 75 1174 58 1158 q 117 1190 92 1190 q 158 1174 142 1190 q 175 1135 175 1158 q 158 1097 175 1113 q 117 1081 142 1081 z "},\u02B2:{ha:235,x_min:-36,x_max:178,o:"m 32 347 q -6 350 10 347 q -36 358 -21 353 l -18 426 q -1 420 -10 422 q 21 418 7 418 q 64 440 53 418 q 75 501 75 461 l 75 994 l 161 994 l 161 507 q 131 390 161 432 q 32 347 101 347 m 119 1081 q 78 1097 94 1081 q 61 1135 61 1113 q 78 1174 61 1158 q 119 1190 94 1190 q 161 1174 144 1190 q 178 1135 178 1158 q 161 1097 178 1113 q 119 1081 144 1081 z "},"\u1D4F":{ha:468,x_min:72,x_max:461,o:"m 72 549 l 72 1199 l 158 1199 l 158 772 l 164 772 l 346 994 l 442 994 l 286 813 l 461 549 l 365 549 l 236 754 l 158 661 l 158 549 l 72 549 z "},\u02E1:{ha:242,x_min:72,x_max:213,o:"m 163 538 q 92 567 113 538 q 72 650 72 597 l 72 1199 l 158 1199 l 158 643 q 165 616 158 624 q 181 608 171 608 q 190 609 185 608 q 200 611 194 610 l 213 546 q 163 538 194 538 z "},"\u1D50":{ha:776,x_min:72,x_max:710,o:"m 72 549 l 72 994 l 142 994 l 149 932 l 154 932 q 215 984 182 963 q 294 1006 249 1006 q 419 922 389 1006 q 488 981 451 956 q 569 1006 525 1006 q 677 957 644 1006 q 710 831 710 908 l 710 549 l 624 549 l 624 818 q 607 901 624 871 q 542 932 590 932 q 433 867 494 932 l 433 549 l 347 549 l 347 818 q 331 901 347 871 q 265 932 314 932 q 158 867 219 932 l 158 549 l 72 549 z "},\u207F:{ha:513,x_min:72,x_max:446,o:"m 72 549 l 72 994 l 140 994 l 149 932 l 154 932 q 222 984 183 963 q 304 1006 260 1006 q 414 957 382 1006 q 446 831 446 908 l 446 549 l 360 549 l 360 818 q 344 901 360 871 q 276 932 328 932 q 158 867 224 932 l 158 549 l 72 549 z "},"\u1D52":{ha:507,x_min:42,x_max:464,o:"m 253 538 q 147 565 196 538 q 70 645 99 593 q 42 771 42 697 q 70 899 42 846 q 147 978 99 951 q 253 1006 196 1006 q 358 978 310 1006 q 435 899 406 951 q 464 771 464 846 q 435 645 464 697 q 358 565 406 593 q 253 538 310 538 m 253 608 q 342 653 310 608 q 375 771 375 699 q 342 890 375 844 q 253 935 310 935 q 163 890 196 935 q 129 771 129 844 q 163 653 129 699 q 253 608 196 608 z "},"\u1D56":{ha:519,x_min:72,x_max:474,o:"m 72 357 l 72 994 l 140 994 l 150 943 l 154 943 q 217 987 182 968 q 293 1006 253 1006 q 427 944 381 1006 q 474 779 474 882 q 447 649 474 703 q 375 566 419 594 q 279 538 331 538 q 215 551 249 538 q 153 589 181 564 l 158 501 l 158 357 l 72 357 m 267 608 q 351 653 317 608 q 385 779 385 697 q 358 893 385 851 q 272 935 331 935 q 158 875 218 935 l 158 651 q 215 619 186 629 q 267 608 243 608 z "},\u02B3:{ha:333,x_min:72,x_max:335,o:"m 72 549 l 72 994 l 142 994 l 151 917 l 156 917 q 282 1006 208 1006 q 335 997 318 1006 l 318 919 q 297 924 310 922 q 274 926 285 926 q 214 905 244 926 q 160 831 183 883 l 160 549 l 72 549 z "},\u02E2:{ha:393,x_min:26,x_max:365,o:"m 200 538 q 105 555 150 538 q 26 599 60 572 l 68 656 q 131 619 99 633 q 201 604 164 604 q 261 622 240 604 q 282 667 282 640 q 251 715 282 699 q 181 746 219 732 q 119 774 150 758 q 69 815 89 790 q 49 878 49 840 q 90 968 49 931 q 203 1006 131 1006 q 288 990 251 1006 q 351 956 324 975 l 308 900 q 260 929 283 919 q 206 939 238 939 q 149 922 168 939 q 131 883 131 904 q 161 838 131 853 q 231 807 192 822 q 294 781 263 796 q 345 741 325 765 q 365 675 365 717 q 321 576 365 615 q 200 538 276 538 z "},"\u1D57":{ha:322,x_min:22,x_max:313,o:"m 222 538 q 119 581 149 538 q 89 693 89 624 l 89 925 l 22 925 l 22 992 l 92 994 l 103 1129 l 175 1129 l 175 994 l 297 994 l 297 925 l 175 925 l 175 693 q 243 607 175 607 q 294 618 272 607 l 313 554 q 270 543 294 549 q 222 538 246 538 z "},"\u1D58":{ha:514,x_min:69,x_max:443,o:"m 213 538 q 102 586 135 538 q 69 711 69 635 l 69 994 l 156 994 l 156 724 q 172 641 156 671 q 240 611 189 611 q 297 626 268 611 q 357 676 325 642 l 357 994 l 443 994 l 443 549 l 375 549 l 365 611 l 361 611 q 295 559 333 581 q 213 538 257 538 z "},"\u1D5B":{ha:446,x_min:11,x_max:435,o:"m 172 549 l 11 994 l 97 994 l 178 750 l 221 617 l 226 617 l 269 750 l 350 994 l 435 994 l 274 549 l 172 549 z "},\u02B7:{ha:676,x_min:22,x_max:654,o:"m 146 549 l 22 994 l 111 994 l 172 746 l 199 619 l 204 619 l 235 746 l 300 994 l 378 994 l 447 746 l 478 619 l 483 619 l 513 746 l 572 994 l 654 994 l 533 549 l 429 549 l 369 775 l 340 903 l 338 903 l 308 775 l 249 549 l 146 549 z "},\u02E3:{ha:426,x_min:11,x_max:414,o:"m 11 549 l 161 782 l 24 994 l 118 994 l 175 903 l 218 832 l 224 832 l 261 903 l 313 994 l 404 994 l 268 772 l 414 549 l 319 549 l 260 644 l 211 721 l 206 721 l 160 644 l 103 549 l 11 549 z "},\u02B8:{ha:443,x_min:11,x_max:432,o:"m 90 363 q 33 371 58 363 l 51 440 q 85 432 71 432 q 146 458 121 432 q 183 522 171 483 l 193 551 l 11 994 l 99 994 l 186 760 q 208 697 197 729 q 229 631 219 665 l 235 631 q 255 696 244 664 q 275 760 265 728 l 347 994 l 432 994 l 267 522 q 201 408 242 453 q 90 363 161 363 z "},"\u1DBB":{ha:403,x_min:29,x_max:378,o:"m 29 549 l 29 594 l 263 925 l 57 925 l 57 994 l 371 994 l 371 947 l 139 618 l 378 618 l 378 549 l 29 549 z "},"\u1D4A":{ha:467,x_min:33,x_max:425,o:"m 224 538 q 82 597 131 538 q 33 753 33 656 q 35 780 33 768 q 39 803 38 792 l 340 803 q 297 905 333 872 q 217 938 261 938 q 151 928 179 938 q 96 901 124 918 l 65 956 q 135 991 99 976 q 221 1006 172 1006 q 366 945 307 1006 q 425 772 425 885 q 397 646 425 699 q 322 565 368 593 q 224 538 276 538 m 224 607 q 300 639 267 607 q 340 739 333 671 l 110 739 q 144 638 114 668 q 224 607 174 607 z "},"\u1D4B":{ha:439,x_min:57,x_max:408,o:"m 243 538 q 112 572 167 538 q 57 668 57 607 q 88 748 57 721 q 161 785 118 775 l 161 790 q 102 828 122 801 q 82 888 82 856 q 132 977 82 949 q 250 1006 182 1006 q 327 994 290 1006 q 393 958 364 983 l 361 907 q 310 930 335 924 q 256 936 286 936 q 196 922 221 936 q 171 878 171 907 q 195 831 171 850 q 269 813 219 813 l 321 813 l 321 749 l 258 749 q 146 678 146 749 q 177 626 146 646 q 258 607 208 607 q 319 615 290 607 q 376 643 349 624 l 408 592 q 243 538 340 538 z "},"\u1D51":{ha:513,x_min:72,x_max:446,o:"m 317 347 q 279 350 294 347 q 249 358 264 353 l 265 426 q 283 420 275 422 q 306 418 292 418 q 349 440 338 418 q 360 501 360 461 l 360 818 q 344 901 360 871 q 276 932 328 932 q 158 867 224 932 l 158 549 l 72 549 l 72 994 l 140 994 l 149 932 l 154 932 q 222 984 183 963 q 304 1006 260 1006 q 414 957 382 1006 q 446 831 446 908 l 446 507 q 416 390 446 432 q 317 347 386 347 z "},"\u1DAC":{ha:776,x_min:72,x_max:710,o:"m 581 347 q 543 350 558 347 q 513 358 528 353 l 531 426 q 547 420 539 422 q 569 418 556 418 q 613 440 601 418 q 624 501 624 461 l 624 818 q 607 901 624 871 q 542 932 590 932 q 433 867 494 932 l 433 549 l 347 549 l 347 818 q 331 901 347 871 q 265 932 314 932 q 158 867 219 932 l 158 549 l 72 549 l 72 994 l 142 994 l 149 932 l 154 932 q 215 984 182 963 q 294 1006 249 1006 q 419 922 389 1006 q 488 981 451 956 q 569 1006 525 1006 q 677 957 644 1006 q 710 831 710 908 l 710 507 q 680 390 710 432 q 581 347 650 347 z "},"\u1DAE":{ha:515,x_min:21,x_max:449,o:"m 69 347 q 42 350 53 347 q 21 356 31 353 l 33 421 q 44 419 40 419 q 51 418 47 418 q 75 453 75 418 l 75 994 l 143 994 l 151 932 l 157 932 q 224 984 186 963 q 307 1006 263 1006 q 417 957 385 1006 q 449 831 449 908 l 449 549 l 363 549 l 363 818 q 347 901 363 871 q 279 932 331 932 q 161 867 226 932 l 161 460 q 141 377 161 407 q 69 347 121 347 z "},"\u1DB0":{ha:511,x_min:71,x_max:439,o:"m 71 549 l 71 994 l 163 994 l 307 757 q 334 708 321 735 q 361 654 347 682 l 367 654 q 360 742 361 701 q 358 818 358 783 l 358 994 l 439 994 l 439 549 l 349 549 l 204 786 q 176 835 192 808 q 149 888 161 863 l 143 888 q 151 801 150 842 q 153 724 153 760 l 153 549 l 71 549 z "},"\u1DBF":{ha:507,x_min:50,x_max:454,o:"m 253 538 q 152 569 199 538 q 78 675 106 600 q 50 878 50 750 q 78 1080 50 1007 q 152 1183 106 1153 q 253 1214 199 1214 q 353 1183 307 1214 q 426 1080 399 1153 q 454 878 454 1007 q 426 675 454 750 q 353 569 399 600 q 253 538 307 538 m 253 1143 q 172 1092 201 1143 q 139 914 143 1042 l 367 914 q 333 1092 363 1042 q 253 1143 303 1143 m 253 608 q 333 662 303 608 q 367 846 363 715 l 139 846 q 172 662 142 715 q 253 608 201 608 z "},\u02B1:{ha:508,x_min:72,x_max:446,o:"m 72 549 l 72 1036 q 111 1164 72 1114 q 231 1214 150 1214 q 311 1200 278 1214 l 293 1138 q 240 1144 272 1144 q 179 1117 200 1144 q 157 1044 158 1090 l 154 932 q 221 983 182 961 q 304 1006 260 1006 q 414 957 382 1006 q 446 831 446 908 l 446 549 l 360 549 l 360 818 q 344 901 360 871 q 275 932 328 932 q 158 867 224 932 l 158 549 l 72 549 z "},\u02B4:{ha:333,x_min:-1,x_max:261,o:"m 50 538 q -1 546 15 538 l 15 624 q 35 619 24 622 q 60 617 47 617 q 119 638 89 617 q 174 713 150 660 l 174 994 l 261 994 l 261 549 l 192 549 l 182 626 l 178 626 q 50 538 125 538 z "},\u02E0:{ha:442,x_min:11,x_max:431,o:"m 222 344 q 140 375 169 344 q 110 454 110 406 q 125 521 110 488 q 167 603 140 554 l 11 994 l 99 994 l 181 764 q 201 708 190 733 q 221 651 211 682 l 225 651 q 246 708 235 682 q 267 764 257 733 l 347 994 l 431 994 l 279 601 q 322 519 307 553 q 336 454 336 486 q 306 375 336 406 q 222 344 276 344 m 222 401 q 253 415 243 401 q 263 449 263 428 q 225 560 263 496 l 221 560 q 194 499 204 528 q 183 449 183 471 q 193 415 183 428 q 222 401 203 401 z "},\u02E4:{ha:419,x_min:29,x_max:406,o:"m 188 549 l 188 807 q 74 903 119 853 q 29 1028 29 953 q 85 1163 29 1115 q 228 1210 142 1210 q 334 1185 289 1210 q 406 1128 379 1160 l 361 1081 q 306 1122 338 1106 q 232 1139 275 1139 q 147 1108 178 1139 q 117 1028 117 1078 q 153 930 117 972 q 274 843 190 888 l 274 549 l 188 549 z "},"\xA4":{ha:690,x_min:36,x_max:654,o:"m 97 143 l 36 206 l 125 296 q 75 457 75 364 q 125 619 75 551 l 36 711 l 97 774 l 192 676 q 346 728 258 728 q 499 676 432 728 l 593 774 l 654 711 l 564 619 q 601 547 588 588 q 615 457 615 506 q 601 369 615 410 q 564 296 588 328 l 654 206 l 593 143 l 499 239 q 426 199 467 213 q 346 186 386 186 q 192 239 257 186 l 97 143 m 346 271 q 461 322 413 271 q 510 457 510 374 q 461 592 510 540 q 346 643 413 643 q 229 592 278 643 q 181 457 181 540 q 229 322 181 374 q 346 271 278 271 z "},$:{ha:690,x_min:72,x_max:607,o:"m 308 -153 l 308 -15 q 176 19 238 -10 q 72 96 114 49 l 126 167 q 224 101 171 125 q 340 78 276 78 q 456 119 418 78 q 494 229 494 161 q 467 313 494 278 q 394 375 439 347 q 301 429 350 403 q 207 488 251 456 q 135 563 163 519 q 107 668 107 607 q 163 823 107 761 q 308 899 218 885 l 308 1039 l 392 1039 l 392 901 q 506 866 458 894 q 589 793 554 838 l 528 731 q 454 788 494 768 q 357 807 414 807 q 257 770 294 807 q 219 674 219 733 q 247 597 219 629 q 319 540 275 565 q 413 488 364 514 q 507 428 463 461 q 579 350 551 396 q 607 238 607 304 q 549 69 607 136 q 392 -12 490 3 l 392 -153 l 308 -153 z "},"\xA3":{ha:690,x_min:74,x_max:629,o:"m 75 0 l 75 69 q 184 175 146 108 q 222 319 222 242 q 219 358 222 339 q 213 396 217 378 l 74 396 l 74 468 l 167 474 l 192 474 q 166 561 178 518 q 154 647 154 604 q 226 834 154 765 q 413 903 297 903 q 541 873 488 903 q 628 794 594 843 l 565 736 q 504 790 539 772 q 421 807 469 807 q 306 761 346 807 q 267 644 267 715 q 277 560 267 601 q 300 474 288 518 l 521 474 l 521 396 l 318 396 q 323 358 321 378 q 325 318 325 339 q 303 197 325 246 q 239 104 281 147 l 239 99 l 629 99 l 629 0 l 75 0 z "},"\xA5":{ha:690,x_min:32,x_max:658,o:"m 288 0 l 288 210 l 63 210 l 63 282 l 288 282 l 288 375 l 63 375 l 63 449 l 258 449 l 32 886 l 153 886 l 260 649 q 301 556 281 603 q 343 461 321 510 l 349 461 q 393 556 372 510 q 433 649 414 601 l 542 886 l 658 886 l 431 449 l 628 449 l 628 375 l 401 375 l 401 282 l 628 282 l 628 210 l 401 210 l 401 0 l 288 0 z "},"\u20AC":{ha:690,x_min:32,x_max:675,o:"m 449 -17 q 233 72 321 -17 q 121 322 146 161 l 32 322 l 32 388 l 114 393 q 113 417 113 406 q 113 442 113 429 q 113 466 113 454 q 114 489 113 478 l 32 489 l 32 554 l 121 561 q 237 813 147 722 q 454 903 326 903 q 581 871 526 903 q 665 788 635 839 l 603 735 q 540 792 575 774 q 458 811 506 811 q 313 745 369 811 q 238 561 257 679 l 592 561 l 592 489 l 231 489 q 229 468 229 479 q 229 446 229 457 q 229 419 229 432 q 231 394 229 407 l 536 394 l 536 322 l 239 322 q 313 141 258 207 q 454 75 368 75 q 613 167 553 75 l 675 124 q 583 21 639 58 q 449 -17 526 -17 z "},"\xA2":{ha:690,x_min:85,x_max:631,o:"m 364 -46 l 364 99 q 163 199 240 114 q 85 431 85 283 q 122 596 85 526 q 222 707 158 665 q 364 760 286 749 l 364 907 l 436 907 l 436 764 q 542 738 497 761 q 618 683 586 714 l 563 611 q 503 652 535 636 q 436 669 472 668 l 436 192 q 517 213 481 194 q 581 257 553 232 l 631 185 q 540 125 590 149 q 436 97 490 101 l 436 -46 l 364 -46 m 199 431 q 242 276 199 338 q 364 197 286 215 l 364 663 q 243 583 288 644 q 199 431 199 522 z "},\u0192:{ha:406,x_min:-37,x_max:443,o:"m 63 -301 q 6 -296 32 -301 q -37 -282 -19 -290 l -15 -197 q 16 -205 -1 -201 q 49 -208 33 -208 q 117 -173 100 -208 q 133 -76 133 -137 l 133 582 l 38 582 l 38 668 l 133 675 l 133 782 q 181 945 133 885 q 331 1006 229 1006 q 392 999 363 1006 q 443 983 421 993 l 418 900 q 342 913 376 913 q 247 782 247 913 l 247 675 l 390 675 l 390 582 l 247 582 l 247 -76 q 205 -240 247 -179 q 63 -301 163 -301 z "},"\u20A1":{ha:690,x_min:85,x_max:657,o:"m 442 811 q 423 810 432 811 q 406 808 414 810 l 322 110 q 358 90 339 97 q 397 78 376 82 l 485 807 q 442 811 464 811 m 233 -149 l 256 33 q 130 190 175 86 q 85 442 85 294 q 160 746 85 628 q 357 893 235 864 l 375 1043 l 432 1035 l 417 903 q 426 903 421 903 q 436 903 431 903 q 466 901 451 903 q 494 897 481 900 l 513 1043 l 569 1035 l 551 878 q 610 840 583 864 q 654 788 636 817 l 590 735 q 540 785 568 767 l 456 76 q 594 167 540 82 l 657 122 q 569 23 622 60 q 444 -17 517 -14 l 428 -157 l 371 -149 l 388 -14 q 310 6 347 -10 l 290 -157 l 233 -149 m 201 446 q 271 161 201 258 l 344 789 q 238 664 275 753 q 201 446 201 575 z "},"\u20A4":{ha:690,x_min:74,x_max:631,o:"m 74 0 l 74 71 q 185 175 147 108 q 222 319 222 242 l 222 322 l 75 322 l 75 388 l 169 394 l 214 394 q 201 442 208 418 q 188 489 194 467 l 75 489 l 75 554 l 158 561 l 167 561 q 154 647 154 606 q 226 834 154 765 q 413 903 297 903 q 541 873 488 903 q 628 794 594 843 l 565 736 q 504 790 539 772 q 421 807 469 807 q 307 761 347 807 q 267 643 267 715 q 269 601 267 622 q 276 561 272 581 l 521 561 l 521 489 l 296 489 q 308 443 303 467 q 318 394 314 419 l 521 394 l 521 322 l 325 322 l 325 318 q 303 197 325 246 q 239 104 282 147 l 239 99 l 631 99 l 631 0 l 74 0 z "},"\u20A6":{ha:690,x_min:17,x_max:671,o:"m 188 782 l 203 561 l 261 561 l 193 782 l 188 782 m 119 0 l 119 322 l 17 322 l 17 388 l 119 394 l 119 489 l 17 489 l 17 554 l 119 561 l 119 886 l 236 886 l 350 561 l 481 561 l 481 886 l 572 886 l 572 561 l 671 561 l 671 489 l 572 489 l 572 394 l 671 394 l 671 322 l 572 322 l 572 0 l 454 0 l 342 322 l 210 322 l 210 0 l 119 0 m 497 103 l 503 103 l 489 322 l 431 322 l 497 103 m 210 446 l 210 394 l 315 394 l 288 475 l 283 489 l 207 489 l 210 446 m 403 413 l 408 394 l 483 394 l 481 439 l 481 489 l 376 489 l 403 413 z "},"\u20A7":{ha:690,x_min:14,x_max:672,o:"m 115 0 l 115 579 l 14 579 l 14 650 l 115 657 l 115 886 l 283 886 q 430 864 365 886 q 536 791 494 842 q 586 657 578 740 l 672 657 l 672 579 l 586 579 q 489 398 574 457 q 283 339 404 339 l 225 339 l 225 0 l 115 0 m 225 807 l 225 657 l 476 657 q 413 773 467 739 q 269 807 360 807 l 225 807 m 225 418 l 269 418 q 413 459 360 418 q 476 579 467 500 l 225 579 l 225 418 z "},"\u20A9":{ha:690,x_min:-21,x_max:707,o:"m 321 517 l 318 492 l 371 492 l 368 518 l 347 743 l 342 743 l 321 517 m 133 0 l 78 413 l -21 413 l -21 486 l 68 490 l 15 886 l 122 886 l 161 492 l 247 492 l 290 831 l 408 831 l 451 492 l 539 492 l 578 886 l 676 886 l 626 492 l 707 492 l 707 413 l 617 413 l 564 0 l 432 0 l 381 413 l 308 413 l 261 0 l 133 0 m 197 88 l 203 88 l 219 275 l 238 413 l 168 413 l 182 275 l 197 88 m 497 88 l 503 88 l 518 275 l 532 413 l 461 413 l 479 275 l 497 88 z "},"\u20AB":{ha:690,x_min:94,x_max:674,o:"m 313 153 q 153 219 213 153 q 94 407 94 285 q 126 535 94 482 q 210 618 158 589 q 321 647 263 647 q 405 631 372 647 q 472 583 438 614 l 467 715 l 467 751 l 264 751 l 264 824 l 467 824 l 467 903 l 564 903 l 564 824 l 674 824 l 674 757 l 564 751 l 564 167 l 483 167 l 475 226 l 471 226 q 401 174 440 196 q 313 153 361 153 m 332 236 q 401 253 368 236 q 467 308 433 269 l 467 507 q 404 551 432 538 q 338 564 376 564 q 238 519 279 564 q 196 406 196 475 q 232 281 196 326 q 332 236 268 236 m 110 0 l 110 74 l 608 74 l 608 0 l 110 0 z "},"\u20B1":{ha:690,x_min:14,x_max:672,o:"m 115 0 l 115 493 l 14 493 l 14 560 l 115 565 l 115 650 l 14 650 l 14 717 l 115 722 l 115 886 l 283 886 q 463 848 386 886 q 571 722 540 810 l 672 722 l 672 650 l 586 650 q 588 631 588 640 q 588 613 588 622 q 587 588 588 600 q 585 565 586 576 l 672 565 l 672 493 l 567 493 q 458 371 533 411 q 283 331 382 331 l 225 331 l 225 0 l 115 0 m 479 613 q 479 633 479 624 q 478 650 479 642 l 225 650 l 225 565 l 475 565 q 479 613 479 589 m 225 807 l 225 722 l 457 722 q 386 787 433 767 q 269 807 339 807 l 225 807 m 225 410 l 269 410 q 450 493 399 410 l 225 493 l 225 410 z "},"\u20B2":{ha:690,x_min:65,x_max:639,o:"m 360 -153 l 360 -14 q 206 55 272 -3 q 103 210 140 113 q 65 442 65 308 q 145 756 65 636 q 360 899 225 876 l 360 1039 l 443 1039 l 443 901 q 551 865 501 896 q 635 792 600 835 l 567 728 q 500 788 536 765 q 417 811 464 811 q 242 713 303 811 q 182 446 182 614 q 242 176 182 275 q 407 78 301 78 q 482 93 447 78 q 535 129 517 108 l 535 364 l 394 364 l 394 460 l 639 460 l 639 85 q 443 -14 557 -1 l 443 -153 l 360 -153 z "},"\u20B4":{ha:690,x_min:32,x_max:657,o:"m 375 -17 q 188 42 260 -17 q 115 207 115 101 q 122 269 115 240 q 142 322 129 297 l 32 322 l 32 388 l 128 394 l 193 394 q 247 444 218 422 q 307 489 276 467 l 32 489 l 32 554 l 128 561 l 400 561 q 449 622 431 589 q 468 694 468 654 q 435 778 468 744 q 344 811 401 811 q 257 791 293 811 q 186 733 221 771 l 126 796 q 220 872 168 842 q 347 903 272 903 q 515 845 450 903 q 581 690 581 788 q 569 620 581 651 q 538 561 557 589 l 657 561 l 657 489 l 468 489 q 407 441 439 464 q 346 394 375 418 l 657 394 l 657 322 l 272 322 q 240 266 251 296 q 228 200 228 236 q 267 110 228 144 q 375 75 306 75 q 485 100 439 75 q 569 164 531 125 l 622 100 q 517 18 579 53 q 375 -17 456 -17 z "},"\u20B5":{ha:690,x_min:85,x_max:661,o:"m 388 -153 l 388 -15 q 228 53 297 -4 q 122 209 160 110 q 85 442 85 308 q 167 757 85 636 q 388 899 249 878 l 388 1035 l 460 1035 l 460 903 q 569 870 519 899 q 651 794 619 842 l 586 735 q 531 788 561 768 q 460 810 500 807 l 460 76 q 594 168 542 89 l 661 113 q 572 24 622 57 q 460 -15 522 -8 l 460 -153 l 388 -153 m 203 446 q 251 196 203 293 q 388 79 299 99 l 388 804 q 251 688 299 782 q 203 446 203 593 z "},"\u20B9":{ha:690,x_min:100,x_max:626,o:"m 100 347 l 100 443 l 199 443 q 355 482 297 443 q 421 603 413 521 l 100 603 l 100 669 l 196 676 l 417 676 q 345 764 401 738 q 199 790 289 790 l 100 790 l 100 886 l 626 886 l 626 813 l 435 813 q 497 758 471 793 q 532 676 522 722 l 626 676 l 626 603 l 535 603 q 471 440 528 501 q 324 358 414 379 l 586 0 l 453 0 l 208 347 l 100 347 z "},"\u20BA":{ha:690,x_min:18,x_max:646,o:"m 160 -17 l 160 353 l 50 293 l 18 353 l 160 429 l 160 529 l 50 469 l 18 529 l 160 606 l 160 886 l 276 886 l 276 658 l 493 772 l 525 713 l 276 582 l 276 482 l 493 596 l 525 536 l 276 406 l 276 93 q 401 122 339 96 q 503 198 463 149 q 544 319 544 247 q 544 347 544 333 q 538 379 543 360 l 635 404 q 646 325 646 361 q 582 131 646 208 q 408 17 518 54 q 160 -17 299 -19 z "},"\u20AE":{ha:690,x_min:47,x_max:640,o:"m 288 0 l 288 267 l 124 179 l 93 240 l 288 343 l 288 443 l 124 356 l 93 417 l 288 519 l 288 799 l 47 799 l 47 886 l 640 886 l 640 799 l 401 799 l 401 572 l 565 660 l 596 599 l 401 496 l 401 396 l 565 483 l 596 422 l 401 319 l 401 0 l 288 0 z "},"\u20B8":{ha:690,x_min:47,x_max:640,o:"m 288 0 l 288 646 l 47 646 l 47 713 l 144 718 l 640 718 l 640 646 l 401 646 l 401 0 l 288 0 m 47 813 l 47 886 l 640 886 l 640 813 l 47 813 z "},"\u20BD":{ha:690,x_min:69,x_max:642,o:"m 175 0 l 175 217 l 69 217 l 69 282 l 175 289 l 175 383 l 69 383 l 69 449 l 175 456 l 175 886 l 340 886 q 494 862 426 886 q 602 784 563 838 q 642 644 642 731 q 602 496 642 554 q 494 410 563 438 q 340 383 426 383 l 285 383 l 285 289 l 560 289 l 560 217 l 285 217 l 285 0 l 175 0 m 285 456 l 326 456 q 478 502 425 456 q 532 640 532 549 q 478 769 532 732 q 326 807 425 807 l 285 807 l 285 456 z "},"\u20A3":{ha:690,x_min:72,x_max:649,o:"m 182 0 l 182 172 l 72 172 l 72 244 l 182 250 l 182 886 l 649 886 l 649 788 l 292 788 l 292 514 l 581 514 l 581 417 l 292 417 l 292 250 l 497 250 l 497 172 l 292 172 l 292 0 l 182 0 z "},"\u2044":{ha:119,x_min:-232,x_max:349,o:"m -232 -17 l 271 928 l 349 928 l -154 -17 l -232 -17 z "},"\u2215":{ha:119,x_min:-232,x_max:349,o:"m -232 -17 l 271 928 l 349 928 l -154 -17 l -232 -17 z "},"%":{ha:1144,x_min:49,x_max:1097,o:"m 256 353 q 106 428 163 353 q 49 642 49 503 q 106 853 49 778 q 256 928 163 928 q 406 853 349 928 q 463 642 463 778 q 406 428 463 503 q 256 353 349 353 m 256 424 q 342 478 308 424 q 375 642 375 533 q 342 803 375 750 q 256 857 308 857 q 168 803 201 857 q 135 642 135 750 q 168 478 135 533 q 256 424 201 424 m 282 -17 l 785 928 l 863 928 l 360 -17 l 282 -17 m 890 -17 q 740 58 797 -17 q 683 272 683 133 q 740 483 683 408 q 890 558 797 558 q 1040 483 983 558 q 1097 272 1097 408 q 1040 58 1097 133 q 890 -17 983 -17 m 890 54 q 976 109 943 54 q 1010 272 1010 164 q 976 434 1010 381 q 890 488 943 488 q 803 434 836 488 q 769 272 769 381 q 803 109 769 164 q 890 54 836 54 z "},"\u2030":{ha:1658,x_min:49,x_max:1611,o:"m 256 353 q 106 428 163 353 q 49 642 49 503 q 106 853 49 778 q 256 928 163 928 q 406 853 349 928 q 463 642 463 778 q 406 428 463 503 q 256 353 349 353 m 256 424 q 342 478 308 424 q 375 642 375 533 q 342 803 375 750 q 256 857 308 857 q 168 803 201 857 q 135 642 135 750 q 168 478 135 533 q 256 424 201 424 m 282 -17 l 785 928 l 863 928 l 360 -17 l 282 -17 m 890 -17 q 740 58 797 -17 q 683 272 683 133 q 740 483 683 408 q 890 558 797 558 q 1040 483 983 558 q 1097 272 1097 408 q 1040 58 1097 133 q 890 -17 983 -17 m 890 54 q 976 109 943 54 q 1010 272 1010 164 q 976 434 1010 381 q 890 488 943 488 q 803 434 836 488 q 769 272 769 381 q 803 109 769 164 q 890 54 836 54 m 1404 -17 q 1254 58 1311 -17 q 1197 272 1197 133 q 1254 483 1197 408 q 1404 558 1311 558 q 1554 483 1497 558 q 1611 272 1611 408 q 1554 58 1611 133 q 1404 -17 1497 -17 m 1404 54 q 1490 109 1457 54 q 1524 272 1524 164 q 1490 434 1524 381 q 1404 488 1457 488 q 1317 434 1350 488 q 1283 272 1283 381 q 1317 109 1283 164 q 1404 54 1350 54 z "},"\u2031":{ha:2172,x_min:49,x_max:2124,o:"m 256 353 q 106 428 163 353 q 49 642 49 503 q 106 853 49 778 q 256 928 163 928 q 406 853 349 928 q 463 642 463 778 q 406 428 463 503 q 256 353 349 353 m 256 424 q 342 478 308 424 q 375 642 375 533 q 342 803 375 750 q 256 857 308 857 q 168 803 201 857 q 135 642 135 750 q 168 478 135 533 q 256 424 201 424 m 282 -17 l 785 928 l 863 928 l 360 -17 l 282 -17 m 890 -17 q 740 58 797 -17 q 683 272 683 133 q 740 483 683 408 q 890 558 797 558 q 1040 483 983 558 q 1097 272 1097 408 q 1040 58 1097 133 q 890 -17 983 -17 m 890 54 q 976 109 943 54 q 1010 272 1010 164 q 976 434 1010 381 q 890 488 943 488 q 803 434 836 488 q 769 272 769 381 q 803 109 769 164 q 890 54 836 54 m 1404 -17 q 1254 58 1311 -17 q 1197 272 1197 133 q 1254 483 1197 408 q 1404 558 1311 558 q 1554 483 1497 558 q 1611 272 1611 408 q 1554 58 1611 133 q 1404 -17 1497 -17 m 1404 54 q 1490 109 1457 54 q 1524 272 1524 164 q 1490 434 1524 381 q 1404 488 1457 488 q 1317 434 1350 488 q 1283 272 1283 381 q 1317 109 1283 164 q 1404 54 1350 54 m 1917 -17 q 1767 58 1824 -17 q 1710 272 1710 133 q 1767 483 1710 408 q 1917 558 1824 558 q 2067 483 2010 558 q 2124 272 2124 408 q 2067 58 2124 133 q 1917 -17 2010 -17 m 1917 54 q 2003 109 1969 54 q 2036 272 2036 164 q 2003 434 2036 381 q 1917 488 1969 488 q 1829 434 1863 488 q 1796 272 1796 381 q 1829 109 1796 164 q 1917 54 1863 54 z "},"\xBC":{ha:1085,x_min:88,x_max:1040,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 250 -17 l 753 928 l 831 928 l 328 -17 l 250 -17 m 725 208 l 879 208 l 879 306 l 885 457 l 879 457 l 810 344 l 725 208 m 879 0 l 879 144 l 632 144 l 632 190 l 860 542 l 960 542 l 960 208 l 1040 208 l 1040 144 l 960 144 l 960 0 l 879 0 z "},"\xBD":{ha:1122,x_min:88,x_max:1057,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 222 -17 l 725 928 l 803 928 l 300 -17 l 222 -17 m 685 0 l 685 51 q 876 237 811 165 q 942 369 942 308 q 914 453 942 422 q 838 483 886 483 q 774 460 803 483 q 721 404 744 438 l 668 453 q 747 529 700 500 q 849 558 793 558 q 980 514 931 558 q 1029 383 1029 469 q 1003 284 1029 332 q 931 186 976 236 q 828 76 886 136 l 1057 76 l 1057 0 l 685 0 z "},"\xBE":{ha:1106,x_min:47,x_max:1061,o:"m 249 353 q 131 383 183 353 q 47 458 79 413 l 107 504 q 167 445 132 467 q 244 424 201 424 q 321 449 289 424 q 353 521 353 474 q 308 592 353 568 q 185 617 264 617 l 185 674 q 293 701 254 674 q 332 771 332 729 q 305 833 332 810 q 233 857 278 857 q 175 838 203 857 q 124 792 147 819 l 69 839 q 149 903 106 879 q 247 928 192 928 q 368 890 317 928 q 419 782 419 851 q 393 701 419 735 q 325 649 367 668 q 406 603 371 638 q 442 515 442 569 q 385 397 442 440 q 249 353 328 353 m 303 -17 l 806 928 l 883 928 l 381 -17 l 303 -17 m 746 208 l 900 208 l 900 306 l 906 457 l 900 457 l 831 344 l 746 208 m 900 0 l 900 144 l 653 144 l 653 190 l 881 542 l 981 542 l 981 208 l 1061 208 l 1061 144 l 981 144 l 981 0 l 900 0 z "},"\u2153":{ha:1117,x_min:88,x_max:1050,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 214 -17 l 717 928 l 794 928 l 292 -17 l 214 -17 m 857 -17 q 740 13 792 -17 q 656 89 688 43 l 715 135 q 775 76 740 97 q 853 54 810 54 q 929 79 897 54 q 961 151 961 104 q 917 223 961 199 q 793 247 872 247 l 793 304 q 901 332 863 304 q 940 401 940 360 q 913 464 940 440 q 842 488 886 488 q 783 469 811 488 q 732 422 756 450 l 678 469 q 757 534 714 510 q 856 558 800 558 q 976 520 925 558 q 1028 413 1028 482 q 1001 332 1028 365 q 933 279 975 299 q 1015 234 979 268 q 1050 146 1050 200 q 993 27 1050 71 q 857 -17 936 -17 z "},"\u2154":{ha:1140,x_min:57,x_max:1072,o:"m 74 369 l 74 421 q 265 606 200 535 q 331 739 331 678 q 303 822 331 792 q 226 853 275 853 q 163 830 192 853 q 110 774 133 807 l 57 822 q 135 899 89 869 q 238 928 182 928 q 369 883 319 928 q 418 753 418 839 q 392 653 418 701 q 320 556 365 606 q 217 446 275 506 l 446 446 l 446 369 l 74 369 m 283 -17 l 786 928 l 864 928 l 361 -17 l 283 -17 m 879 -17 q 762 13 814 -17 q 678 89 710 43 l 738 135 q 797 76 763 97 q 875 54 832 54 q 951 79 919 54 q 983 151 983 104 q 939 223 983 199 q 815 247 894 247 l 815 304 q 924 332 885 304 q 963 401 963 360 q 935 464 963 440 q 864 488 908 488 q 806 469 833 488 q 754 422 778 450 l 700 469 q 779 534 736 510 q 878 558 822 558 q 999 520 947 558 q 1050 413 1050 482 q 1024 332 1050 365 q 956 279 997 299 q 1037 234 1001 268 q 1072 146 1072 200 q 1015 27 1072 71 q 879 -17 958 -17 z "},"\u2155":{ha:1117,x_min:88,x_max:1056,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 214 -17 l 717 928 l 794 928 l 292 -17 l 214 -17 m 861 -17 q 738 13 789 -17 q 656 89 688 43 l 715 135 q 775 76 742 97 q 856 54 808 54 q 935 88 904 54 q 967 174 967 122 q 935 261 967 229 q 853 293 903 293 q 797 281 821 293 q 750 249 772 268 l 707 281 l 732 542 l 1028 542 l 1028 464 l 806 464 l 790 332 q 832 347 810 340 q 878 353 854 353 q 1003 306 951 353 q 1056 171 1056 258 q 999 35 1056 88 q 861 -17 943 -17 z "},"\u2156":{ha:1140,x_min:57,x_max:1078,o:"m 74 369 l 74 421 q 265 606 200 535 q 331 739 331 678 q 303 822 331 792 q 226 853 275 853 q 163 830 192 853 q 110 774 133 807 l 57 822 q 135 899 89 869 q 238 928 182 928 q 369 883 319 928 q 418 753 418 839 q 392 653 418 701 q 320 556 365 606 q 217 446 275 506 l 446 446 l 446 369 l 74 369 m 283 -17 l 786 928 l 864 928 l 361 -17 l 283 -17 m 883 -17 q 760 13 811 -17 q 678 89 710 43 l 738 135 q 797 76 764 97 q 878 54 831 54 q 958 88 926 54 q 989 174 989 122 q 957 261 989 229 q 875 293 925 293 q 819 281 843 293 q 772 249 794 268 l 729 281 l 754 542 l 1050 542 l 1050 464 l 828 464 l 813 332 q 854 347 832 340 q 900 353 876 353 q 1026 306 974 353 q 1078 171 1078 258 q 1022 35 1078 88 q 883 -17 965 -17 z "},"\u2157":{ha:1140,x_min:49,x_max:1078,o:"m 250 353 q 133 383 185 353 q 49 458 81 413 l 108 504 q 168 445 133 467 q 246 424 203 424 q 322 449 290 424 q 354 521 354 474 q 310 592 354 568 q 186 617 265 617 l 186 674 q 294 701 256 674 q 333 771 333 729 q 306 833 333 810 q 235 857 279 857 q 176 838 204 857 q 125 792 149 819 l 71 839 q 150 903 107 879 q 249 928 193 928 q 369 890 318 928 q 421 782 421 851 q 394 701 421 735 q 326 649 368 668 q 408 603 372 638 q 443 515 443 569 q 386 397 443 440 q 250 353 329 353 m 278 -17 l 781 928 l 858 928 l 356 -17 l 278 -17 m 883 -17 q 760 13 811 -17 q 678 89 710 43 l 738 135 q 797 76 764 97 q 878 54 831 54 q 958 88 926 54 q 989 174 989 122 q 957 261 989 229 q 875 293 925 293 q 819 281 843 293 q 772 249 794 268 l 729 281 l 754 542 l 1050 542 l 1050 464 l 828 464 l 813 332 q 854 347 832 340 q 900 353 876 353 q 1026 306 974 353 q 1078 171 1078 258 q 1022 35 1078 88 q 883 -17 965 -17 z "},"\u2158":{ha:1175,x_min:58,x_max:1113,o:"m 151 578 l 306 578 l 306 675 l 311 826 l 306 826 l 236 714 l 151 578 m 306 369 l 306 514 l 58 514 l 58 560 l 286 911 l 386 911 l 386 578 l 467 578 l 467 514 l 386 514 l 386 369 l 306 369 m 313 -17 l 815 928 l 893 928 l 390 -17 l 313 -17 m 918 -17 q 795 13 846 -17 q 713 89 744 43 l 772 135 q 832 76 799 97 q 913 54 865 54 q 992 88 961 54 q 1024 174 1024 122 q 992 261 1024 229 q 910 293 960 293 q 853 281 878 293 q 807 249 829 268 l 764 281 l 789 542 l 1085 542 l 1085 464 l 863 464 l 847 332 q 889 347 867 340 q 935 353 911 353 q 1060 306 1008 353 q 1113 171 1113 258 q 1056 35 1113 88 q 918 -17 1000 -17 z "},"\u2159":{ha:1117,x_min:88,x_max:1046,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 228 -17 l 731 928 l 808 928 l 306 -17 l 228 -17 m 858 275 q 800 262 828 275 q 740 215 772 249 q 781 94 747 135 q 864 54 814 54 q 935 85 908 54 q 963 165 963 117 q 936 244 963 214 q 858 275 910 275 m 865 -17 q 713 56 769 -17 q 656 257 656 129 q 724 484 656 410 q 892 558 792 558 q 970 546 939 558 q 1024 517 1001 533 l 988 454 q 945 478 968 468 q 894 488 922 488 q 791 438 835 488 q 740 285 747 388 q 876 340 800 340 q 1002 292 958 340 q 1046 167 1046 244 q 1022 74 1046 115 q 958 8 999 32 q 865 -17 917 -17 z "},"\u215A":{ha:1140,x_min:49,x_max:1068,o:"m 254 353 q 131 383 182 353 q 49 458 81 413 l 108 504 q 168 445 135 467 q 249 424 201 424 q 328 458 297 424 q 360 543 360 492 q 328 631 360 599 q 246 663 296 663 q 190 650 214 663 q 143 618 165 638 l 100 650 l 125 911 l 421 911 l 421 833 l 199 833 l 183 701 q 225 716 203 710 q 271 722 247 722 q 397 675 344 722 q 449 540 449 628 q 392 405 449 457 q 254 353 336 353 m 278 -17 l 781 928 l 858 928 l 356 -17 l 278 -17 m 881 275 q 822 262 850 275 q 763 215 794 249 q 803 94 769 135 q 886 54 836 54 q 958 85 931 54 q 985 165 985 117 q 958 244 985 214 q 881 275 932 275 m 888 -17 q 735 56 792 -17 q 678 257 678 129 q 746 484 678 410 q 914 558 814 558 q 992 546 961 558 q 1046 517 1024 533 l 1010 454 q 967 478 990 468 q 917 488 944 488 q 813 438 857 488 q 763 285 769 388 q 899 340 822 340 q 1024 292 981 340 q 1068 167 1068 244 q 1044 74 1068 115 q 980 8 1021 32 q 888 -17 939 -17 z "},"\u2150":{ha:1117,x_min:88,x_max:1056,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 214 -17 l 717 928 l 794 928 l 292 -17 l 214 -17 m 789 0 q 813 171 794 94 q 865 319 831 247 q 956 465 900 390 l 676 465 l 676 542 l 1056 542 l 1056 492 q 954 331 990 408 q 903 174 918 254 q 882 0 888 94 l 789 0 z "},"\u215B":{ha:1117,x_min:88,x_max:1051,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 228 -17 l 731 928 l 808 928 l 306 -17 l 228 -17 m 860 -17 q 722 28 775 -17 q 669 135 669 74 q 701 225 669 186 q 772 286 733 264 l 772 292 q 715 344 738 315 q 692 415 692 372 q 741 519 692 481 q 860 558 790 558 q 983 519 933 558 q 1033 415 1033 481 q 1006 336 1033 368 q 950 285 978 304 l 950 279 q 1024 222 997 256 q 1051 139 1051 188 q 997 28 1051 74 q 860 -17 942 -17 m 892 310 q 936 360 922 333 q 950 413 950 386 q 924 469 950 449 q 860 490 897 490 q 799 469 825 490 q 774 414 774 447 q 808 349 774 372 q 892 310 843 325 m 860 49 q 936 76 904 49 q 968 142 968 103 q 949 194 968 175 q 897 227 929 214 q 828 256 865 240 q 753 143 753 211 q 783 78 753 107 q 860 49 813 49 z "},"\u215C":{ha:1140,x_min:49,x_max:1074,o:"m 250 353 q 133 383 185 353 q 49 458 81 413 l 108 504 q 168 445 133 467 q 246 424 203 424 q 322 449 290 424 q 354 521 354 474 q 310 592 354 568 q 186 617 265 617 l 186 674 q 294 701 256 674 q 333 771 333 729 q 306 833 333 810 q 235 857 279 857 q 176 838 204 857 q 125 792 149 819 l 71 839 q 150 903 107 879 q 249 928 193 928 q 369 890 318 928 q 421 782 421 851 q 394 701 421 735 q 326 649 368 668 q 408 603 372 638 q 443 515 443 569 q 386 397 443 440 q 250 353 329 353 m 278 -17 l 781 928 l 858 928 l 356 -17 l 278 -17 m 882 -17 q 744 28 797 -17 q 692 135 692 74 q 724 225 692 186 q 794 286 756 264 l 794 292 q 737 344 760 315 q 714 415 714 372 q 763 519 714 481 q 882 558 813 558 q 1006 519 956 558 q 1056 415 1056 481 q 1028 336 1056 368 q 972 285 1000 304 l 972 279 q 1047 222 1019 256 q 1074 139 1074 188 q 1019 28 1074 74 q 882 -17 964 -17 m 914 310 q 958 360 944 333 q 972 413 972 386 q 946 469 972 449 q 882 490 919 490 q 822 469 847 490 q 796 414 796 447 q 831 349 796 372 q 914 310 865 325 m 882 49 q 958 76 926 49 q 990 142 990 103 q 971 194 990 175 q 919 227 951 214 q 850 256 888 240 q 775 143 775 211 q 805 78 775 107 q 882 49 835 49 z "},"\u215D":{ha:1140,x_min:49,x_max:1074,o:"m 254 353 q 131 383 182 353 q 49 458 81 413 l 108 504 q 168 445 135 467 q 249 424 201 424 q 328 458 297 424 q 360 543 360 492 q 328 631 360 599 q 246 663 296 663 q 190 650 214 663 q 143 618 165 638 l 100 650 l 125 911 l 421 911 l 421 833 l 199 833 l 183 701 q 225 716 203 710 q 271 722 247 722 q 397 675 344 722 q 449 540 449 628 q 392 405 449 457 q 254 353 336 353 m 278 -17 l 781 928 l 858 928 l 356 -17 l 278 -17 m 882 -17 q 744 28 797 -17 q 692 135 692 74 q 724 225 692 186 q 794 286 756 264 l 794 292 q 737 344 760 315 q 714 415 714 372 q 763 519 714 481 q 882 558 813 558 q 1006 519 956 558 q 1056 415 1056 481 q 1028 336 1056 368 q 972 285 1000 304 l 972 279 q 1047 222 1019 256 q 1074 139 1074 188 q 1019 28 1074 74 q 882 -17 964 -17 m 914 310 q 958 360 944 333 q 972 413 972 386 q 946 469 972 449 q 882 490 919 490 q 822 469 847 490 q 796 414 796 447 q 831 349 796 372 q 914 310 865 325 m 882 49 q 958 76 926 49 q 990 142 990 103 q 971 194 990 175 q 919 227 951 214 q 850 256 888 240 q 775 143 775 211 q 805 78 775 107 q 882 49 835 49 z "},"\u215E":{ha:1113,x_min:42,x_max:1046,o:"m 154 369 q 178 540 160 464 q 231 688 196 617 q 321 835 265 760 l 42 835 l 42 911 l 421 911 l 421 861 q 319 701 356 778 q 268 544 283 624 q 247 369 253 464 l 154 369 m 208 -17 l 711 928 l 789 928 l 286 -17 l 208 -17 m 854 -17 q 717 28 769 -17 q 664 135 664 74 q 696 225 664 186 q 767 286 728 264 l 767 292 q 709 344 732 315 q 686 415 686 372 q 735 519 686 481 q 854 558 785 558 q 978 519 928 558 q 1028 415 1028 481 q 1000 336 1028 368 q 944 285 972 304 l 944 279 q 1019 222 992 256 q 1046 139 1046 188 q 991 28 1046 74 q 854 -17 936 -17 m 886 310 q 931 360 917 333 q 944 413 944 386 q 918 469 944 449 q 854 490 892 490 q 794 469 819 490 q 768 414 768 447 q 803 349 768 372 q 886 310 838 325 m 854 49 q 931 76 899 49 q 963 142 963 103 q 943 194 963 175 q 892 227 924 214 q 822 256 860 240 q 747 143 747 211 q 777 78 747 107 q 854 49 807 49 z "},"\u2151":{ha:1117,x_min:88,x_max:1060,o:"m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 228 -17 l 731 928 l 808 928 l 306 -17 l 228 -17 m 751 376 q 778 298 751 329 q 856 267 806 267 q 916 280 888 267 q 975 326 944 293 q 935 447 969 407 q 850 488 901 488 q 779 456 807 488 q 751 376 751 425 m 824 -17 q 745 -4 776 -17 q 690 25 714 8 l 728 88 q 770 64 747 74 q 821 54 793 54 q 926 104 882 54 q 975 258 969 154 q 839 201 915 201 q 714 250 758 201 q 669 375 669 299 q 693 469 669 428 q 758 534 717 510 q 849 558 799 558 q 1003 485 946 558 q 1060 285 1060 413 q 992 58 1060 132 q 824 -17 924 -17 z "},"\u2152":{ha:1517,x_min:88,x_max:1468,o:"m 228 -17 l 731 928 l 808 928 l 306 -17 l 228 -17 m 206 369 l 206 797 l 88 797 l 88 856 q 164 877 133 864 q 222 911 194 890 l 294 911 l 294 369 l 206 369 m 825 0 l 825 428 l 707 428 l 707 486 q 783 508 753 494 q 842 542 814 521 l 914 542 l 914 0 l 825 0 m 1261 -17 q 1111 58 1168 -17 q 1054 272 1054 133 q 1111 483 1054 408 q 1261 558 1168 558 q 1411 483 1354 558 q 1468 272 1468 408 q 1411 58 1468 133 q 1261 -17 1354 -17 m 1261 54 q 1347 109 1314 54 q 1381 272 1381 164 q 1347 434 1381 381 q 1261 488 1314 488 q 1174 434 1207 488 q 1140 272 1140 381 q 1174 109 1140 164 q 1261 54 1207 54 z "},"\u2189":{ha:1140,x_min:49,x_max:1072,o:"m 256 353 q 106 428 163 353 q 49 642 49 503 q 106 853 49 778 q 256 928 163 928 q 406 853 349 928 q 463 642 463 778 q 406 428 463 503 q 256 353 349 353 m 256 424 q 342 478 308 424 q 375 642 375 533 q 342 803 375 750 q 256 857 308 857 q 168 803 201 857 q 135 642 135 750 q 168 478 135 533 q 256 424 201 424 m 278 -17 l 781 928 l 858 928 l 356 -17 l 278 -17 m 879 -17 q 762 13 814 -17 q 678 89 710 43 l 738 135 q 797 76 763 97 q 875 54 832 54 q 951 79 919 54 q 983 151 983 104 q 939 223 983 199 q 815 247 894 247 l 815 304 q 924 332 885 304 q 963 401 963 360 q 935 464 963 440 q 864 488 908 488 q 806 469 833 488 q 754 422 778 450 l 700 469 q 779 534 736 510 q 878 558 822 558 q 999 520 947 558 q 1050 413 1050 482 q 1024 332 1050 365 q 956 279 997 299 q 1037 234 1001 268 q 1072 146 1072 200 q 1015 27 1072 71 q 879 -17 958 -17 z "},"+":{ha:690,x_min:47,x_max:643,o:"m 300 144 l 300 415 l 47 415 l 47 501 l 300 501 l 300 772 l 390 772 l 390 501 l 643 501 l 643 415 l 390 415 l 390 144 l 300 144 z "},"\u2212":{ha:690,x_min:47,x_max:643,o:"m 47 415 l 47 501 l 643 501 l 643 415 l 47 415 z "},"\xD7":{ha:690,x_min:69,x_max:621,o:"m 131 175 l 69 238 l 285 458 l 69 678 l 131 740 l 346 519 l 560 740 l 621 678 l 406 458 l 621 238 l 560 175 l 346 397 l 131 175 z "},"\xF7":{ha:690,x_min:47,x_max:643,o:"m 47 415 l 47 501 l 643 501 l 643 415 l 47 415 m 346 133 q 292 154 314 133 q 269 208 269 175 q 292 261 269 240 q 346 282 314 282 q 399 261 378 282 q 421 208 421 240 q 399 154 421 175 q 346 133 378 133 m 346 633 q 292 654 314 633 q 269 708 269 675 q 292 761 269 740 q 346 782 314 782 q 399 761 378 782 q 421 708 421 740 q 399 654 421 675 q 346 633 378 633 z "},"\u2219":{ha:690,x_min:263,x_max:428,o:"m 346 365 q 287 390 311 365 q 263 451 263 414 q 287 516 263 492 q 346 540 311 540 q 403 516 379 540 q 428 451 428 492 q 403 390 428 414 q 346 365 379 365 z "},"=":{ha:690,x_min:47,x_max:643,o:"m 47 564 l 47 650 l 643 650 l 643 564 l 47 564 m 47 267 l 47 353 l 643 353 l 643 267 l 47 267 z "},"\u2261":{ha:690,x_min:47,x_max:643,o:"m 47 714 l 47 800 l 643 800 l 643 714 l 47 714 m 47 415 l 47 501 l 643 501 l 643 415 l 47 415 m 47 117 l 47 203 l 643 203 l 643 117 l 47 117 z "},"<":{ha:690,x_min:47,x_max:643,o:"m 643 182 l 47 415 l 47 507 l 643 740 l 643 642 l 350 533 l 164 464 l 164 458 l 350 389 l 643 281 l 643 182 z "},">":{ha:690,x_min:47,x_max:643,o:"m 47 182 l 47 281 l 340 389 l 526 458 l 526 464 l 340 533 l 47 642 l 47 740 l 643 507 l 643 415 l 47 182 z "},"\u2264":{ha:690,x_min:47,x_max:643,o:"m 643 213 l 47 425 l 47 528 l 643 740 l 643 642 l 351 540 l 164 479 l 164 474 l 351 413 l 643 311 l 643 213 m 47 0 l 47 86 l 643 86 l 643 0 l 47 0 z "},"\u2265":{ha:690,x_min:47,x_max:643,o:"m 47 213 l 47 311 l 339 413 l 526 474 l 526 479 l 339 540 l 47 642 l 47 740 l 643 528 l 643 425 l 47 213 m 47 0 l 47 86 l 643 86 l 643 0 l 47 0 z "},"\xB1":{ha:690,x_min:47,x_max:643,o:"m 300 176 l 300 422 l 47 422 l 47 508 l 300 508 l 300 772 l 390 772 l 390 508 l 643 508 l 643 422 l 390 422 l 390 176 l 300 176 m 47 0 l 47 86 l 643 86 l 643 0 l 47 0 z "},"^":{ha:690,x_min:83,x_max:607,o:"m 83 394 l 294 931 l 396 931 l 607 394 l 507 394 l 417 639 l 349 824 l 343 824 l 274 639 l 183 394 l 83 394 z "},"\u2260":{ha:690,x_min:47,x_max:643,o:"m 85 90 l 190 267 l 47 267 l 47 353 l 240 353 l 367 564 l 47 564 l 47 650 l 417 650 l 522 826 l 606 826 l 500 650 l 643 650 l 643 564 l 450 564 l 324 353 l 643 353 l 643 267 l 274 267 l 168 90 l 85 90 z "},"~":{ha:690,x_min:50,x_max:640,o:"m 467 357 q 392 374 425 357 q 332 415 360 392 q 277 456 304 439 q 221 474 250 474 q 164 453 190 474 q 114 389 138 433 l 50 435 q 133 531 88 501 q 224 560 179 560 q 298 542 265 560 q 358 501 331 525 q 413 460 386 478 q 469 443 440 443 q 526 463 500 443 q 576 528 553 483 l 640 481 q 557 386 603 415 q 467 357 511 357 z "},"\u2248":{ha:690,x_min:50,x_max:640,o:"m 467 506 q 392 523 425 506 q 332 564 360 540 q 277 605 304 588 q 221 622 250 622 q 164 602 190 622 q 114 538 138 582 l 50 583 q 133 679 88 650 q 224 708 179 708 q 298 691 265 708 q 358 650 331 674 q 413 609 386 626 q 469 592 440 592 q 526 612 500 592 q 576 676 553 632 l 640 629 q 557 535 603 564 q 467 506 511 506 m 467 208 q 392 226 425 208 q 332 267 360 243 q 277 308 304 290 q 221 325 250 325 q 164 305 190 325 q 114 240 138 285 l 50 286 q 133 382 88 353 q 224 411 179 411 q 298 394 265 411 q 358 353 331 376 q 413 312 386 329 q 469 294 440 294 q 526 315 500 294 q 576 379 553 335 l 640 332 q 557 238 603 267 q 467 208 511 208 z "},"\xAC":{ha:690,x_min:47,x_max:643,o:"m 551 144 l 551 415 l 47 415 l 47 501 l 643 501 l 643 144 l 551 144 z "},"\u2310":{ha:690,x_min:47,x_max:643,o:"m 47 144 l 47 501 l 643 501 l 643 415 l 139 415 l 139 144 l 47 144 z "},"\u2229":{ha:690,x_min:61,x_max:629,o:"m 61 144 l 61 493 q 98 651 61 583 q 199 755 135 718 q 346 792 264 792 q 492 755 428 792 q 592 651 556 718 q 629 493 629 583 l 629 144 l 538 144 l 538 476 q 485 642 538 583 q 346 700 433 700 q 205 642 257 700 q 153 476 153 583 l 153 144 l 61 144 z "},"\u221F":{ha:690,x_min:47,x_max:643,o:"m 47 144 l 47 772 l 139 772 l 139 231 l 643 231 l 643 144 l 47 144 z "},"\u221E":{ha:1086,x_min:56,x_max:1031,o:"m 792 204 q 638 250 703 204 q 511 374 574 296 l 506 374 q 448 313 482 346 q 369 255 414 279 q 265 231 324 231 q 160 260 208 231 q 84 340 113 290 q 56 450 56 390 q 120 624 56 561 q 282 688 185 688 q 383 665 339 688 q 460 609 426 643 q 518 542 493 575 l 524 542 q 638 658 572 607 q 793 710 704 710 q 916 678 863 710 q 1000 592 969 647 q 1031 467 1031 538 q 999 328 1031 388 q 915 237 968 269 q 792 204 861 204 m 276 318 q 381 356 333 318 q 463 446 428 393 q 373 542 419 506 q 274 578 326 578 q 181 545 218 578 q 144 454 144 513 q 183 357 144 396 q 276 318 221 318 m 793 313 q 901 358 863 313 q 940 463 940 403 q 899 576 940 532 q 782 621 857 621 q 669 583 722 621 q 565 472 617 544 q 676 354 624 396 q 793 313 729 313 z "},"\xB0":{ha:460,x_min:57,x_max:404,o:"m 231 596 q 145 617 185 596 q 81 679 106 639 q 57 772 57 719 q 109 903 57 854 q 231 951 161 951 q 352 903 300 951 q 404 772 404 854 q 380 679 404 719 q 317 617 356 639 q 231 596 278 596 m 231 660 q 306 692 276 660 q 335 772 335 724 q 306 856 335 824 q 231 888 276 888 q 156 856 185 888 q 126 772 126 824 q 156 692 126 724 q 231 660 185 660 z "},"\u2032":{ha:346,x_min:108,x_max:261,o:"m 182 624 l 108 629 l 150 963 l 261 953 l 238 829 l 182 624 z "},"\u2033":{ha:592,x_min:108,x_max:507,o:"m 182 624 l 108 629 l 150 963 l 261 953 l 238 829 l 182 624 m 428 624 l 354 629 l 396 963 l 507 953 l 483 829 l 428 624 z "},"\u2035":{ha:346,x_min:89,x_max:232,o:"m 157 624 l 110 831 l 89 957 l 201 958 l 232 625 l 157 624 z "},"\u2202":{ha:733,x_min:56,x_max:676,o:"m 164 257 q 210 126 164 175 q 319 78 257 78 q 472 153 410 78 q 554 365 533 229 q 460 447 508 424 q 367 471 413 471 q 214 410 264 471 q 164 257 164 349 m 308 -17 q 184 15 242 -17 q 91 108 126 47 q 56 250 56 168 q 92 412 56 342 q 196 522 128 482 q 357 561 264 561 q 469 535 414 561 q 564 463 524 508 q 565 485 565 474 q 565 510 565 497 q 513 758 565 683 q 371 833 461 833 q 215 764 282 833 l 163 835 q 263 903 207 879 q 382 928 318 928 q 597 826 517 928 q 676 513 676 725 q 630 235 676 354 q 501 50 583 117 q 308 -17 418 -17 z "},"\u222B":{ha:461,x_min:72,x_max:426,o:"m 139 -219 q 72 -210 94 -219 l 86 -124 q 133 -129 101 -129 q 210 -72 193 -129 q 226 93 226 -15 q 217 257 226 169 q 197 435 208 344 q 177 615 186 526 q 168 779 168 703 q 183 941 168 869 q 240 1054 199 1013 q 361 1096 282 1096 q 400 1093 382 1096 q 426 1088 418 1090 l 413 1001 q 391 1006 403 1004 q 364 1007 379 1007 q 290 948 307 1007 q 274 782 274 889 q 282 619 274 707 q 302 442 290 532 q 322 264 314 351 q 331 99 331 176 q 316 -64 331 8 q 260 -178 301 -136 q 139 -219 218 -219 z "},"\u2320":{ha:738,x_min:319,x_max:578,o:"m 425 -556 l 319 -556 l 319 779 q 335 941 319 869 q 392 1054 350 1013 q 513 1096 433 1096 q 551 1093 533 1096 q 578 1088 569 1090 l 564 1001 q 542 1006 554 1004 q 515 1007 531 1007 q 442 948 458 1007 q 425 782 425 889 l 425 -556 z "},"\u2321":{ha:738,x_min:165,x_max:425,o:"m 231 -219 q 165 -210 188 -219 l 178 -124 q 226 -129 194 -129 q 302 -72 285 -129 q 319 93 319 -15 l 319 1389 l 425 1389 l 425 99 q 410 -64 425 8 q 353 -178 394 -136 q 231 -219 311 -219 z "},"\u221A":{ha:774,x_min:57,x_max:779,o:"m 390 -132 l 182 463 l 83 418 l 57 481 l 242 563 l 403 82 q 415 38 410 60 q 426 -7 421 15 l 432 -7 q 440 38 436 15 q 449 82 444 60 l 696 1139 l 779 1139 l 478 -132 l 390 -132 z "},"\u2200":{ha:756,x_min:4,x_max:751,o:"m 313 0 l 4 911 l 126 911 l 214 633 l 546 633 l 633 911 l 751 911 l 443 0 l 313 0 m 376 96 l 382 96 q 426 251 404 175 q 472 403 449 326 l 517 542 l 243 542 l 286 403 q 332 250 310 326 q 376 96 354 174 z "},"\u2203":{ha:732,x_min:68,x_max:607,o:"m 68 0 l 68 99 l 492 99 l 492 429 l 146 429 l 146 528 l 492 528 l 492 814 l 82 814 l 82 911 l 607 911 l 607 0 l 68 0 z "},"\u2236":{ha:346,x_min:90,x_max:256,o:"m 174 614 q 115 638 139 614 q 90 700 90 663 q 115 765 90 740 q 174 789 139 789 q 231 765 207 789 q 256 700 256 740 q 231 638 256 663 q 174 614 207 614 m 174 113 q 115 137 139 113 q 90 199 90 161 q 115 263 90 239 q 174 288 139 288 q 231 263 207 288 q 256 199 256 239 q 231 137 256 161 q 174 113 207 113 z "},"\u2237":{ha:750,x_min:90,x_max:660,o:"m 174 614 q 115 638 139 614 q 90 700 90 663 q 115 765 90 740 q 174 789 139 789 q 231 765 207 789 q 256 700 256 740 q 231 638 256 663 q 174 614 207 614 m 174 113 q 115 137 139 113 q 90 199 90 161 q 115 263 90 239 q 174 288 139 288 q 231 263 207 288 q 256 199 256 239 q 231 137 256 161 q 174 113 207 113 m 578 614 q 519 638 543 614 q 494 700 494 663 q 519 765 494 740 q 578 789 543 789 q 635 765 611 789 q 660 700 660 740 q 635 638 660 663 q 578 614 611 614 m 578 113 q 519 137 543 113 q 494 199 494 161 q 519 263 494 239 q 578 288 543 288 q 635 263 611 288 q 660 199 660 239 q 635 137 660 161 q 578 113 611 113 z "},"\u2211":{ha:700,x_min:31,x_max:696,o:"m 31 -167 l 31 -93 l 361 360 l 46 813 l 46 886 l 657 886 l 657 788 l 189 788 l 189 782 l 483 361 l 175 -62 l 175 -68 l 696 -68 l 696 -167 l 31 -167 z "},"\u220F":{ha:935,x_min:124,x_max:813,o:"m 124 -167 l 124 886 l 813 886 l 813 -167 l 694 -167 l 694 785 l 239 785 l 239 -167 l 124 -167 z "},"\u2105":{ha:1122,x_min:42,x_max:1079,o:"m 256 460 q 102 521 163 460 q 42 693 42 582 q 72 820 42 768 q 151 900 101 872 q 258 928 201 928 q 341 913 307 928 q 396 879 375 897 l 354 824 q 314 849 333 840 q 264 857 294 857 q 168 812 207 857 q 129 693 129 767 q 167 576 129 621 q 264 531 204 531 q 324 542 300 531 q 367 568 347 553 l 403 513 q 344 476 379 492 q 256 460 308 460 m 268 -17 l 771 928 l 849 928 l 346 -17 l 268 -17 m 868 -17 q 763 11 811 -17 q 685 91 714 39 q 657 217 657 143 q 685 344 657 292 q 763 424 714 397 q 868 451 811 451 q 973 424 925 451 q 1050 344 1021 397 q 1079 217 1079 292 q 1050 91 1079 143 q 973 11 1021 39 q 868 -17 925 -17 m 868 54 q 958 99 925 54 q 990 217 990 144 q 958 335 990 290 q 868 381 925 381 q 778 335 811 381 q 744 217 744 290 q 778 99 744 144 q 868 54 811 54 z "},\u2113:{ha:568,x_min:29,x_max:558,o:"m 261 725 l 261 429 q 389 602 343 511 q 435 790 435 693 q 412 889 435 860 q 354 918 389 918 q 289 872 317 918 q 261 725 261 826 m 369 -17 q 219 43 283 -17 q 149 221 156 103 q 113 196 131 208 q 75 171 94 183 l 29 243 q 91 285 61 264 q 149 328 121 306 l 149 704 q 207 935 149 865 q 351 1006 265 1006 q 482 951 431 1006 q 533 793 533 896 q 461 539 533 661 q 261 307 389 417 l 261 258 q 297 121 261 161 q 385 81 333 81 q 458 99 428 81 q 513 142 488 118 l 558 71 q 477 11 524 39 q 369 -17 431 -17 z "},"\u212E":{ha:1111,x_min:64,x_max:1047,o:"m 556 -17 q 365 19 454 -17 q 208 119 275 56 q 102 268 140 183 q 64 450 64 353 q 102 632 64 547 q 208 781 140 717 q 365 881 275 844 q 556 917 454 917 q 747 881 658 917 q 903 781 836 844 q 1009 632 971 717 q 1047 450 1047 547 l 1047 439 l 250 439 q 244 433 244 439 l 244 178 q 248 163 244 169 q 256 150 251 157 q 391 49 313 86 q 558 11 469 11 q 735 53 653 11 q 875 167 817 96 l 947 167 q 777 33 879 83 q 556 -17 675 -17 m 250 464 l 861 464 q 869 472 869 464 l 869 728 q 856 758 869 744 q 721 854 797 819 q 558 889 644 889 q 392 852 469 889 q 256 753 314 815 q 248 739 251 747 q 244 722 244 731 l 244 472 q 250 464 244 464 z "},"\u2190":{ha:860,x_min:36,x_max:804,o:"m 415 -21 l 36 347 l 36 353 l 415 721 l 474 657 l 194 397 l 804 397 l 804 303 l 194 303 l 474 43 l 415 -21 z "},"\u2191":{ha:860,x_min:58,x_max:801,o:"m 382 -35 l 382 575 l 122 296 l 58 354 l 426 732 l 432 732 l 801 354 l 736 296 l 476 575 l 476 -35 l 382 -35 z "},"\u2192":{ha:860,x_min:54,x_max:821,o:"m 443 -21 l 383 43 l 663 303 l 54 303 l 54 397 l 663 397 l 383 657 l 443 721 l 821 353 l 821 347 l 443 -21 z "},"\u2193":{ha:860,x_min:58,x_max:801,o:"m 426 -35 l 58 344 l 122 403 l 382 124 l 382 732 l 476 732 l 476 124 l 736 403 l 801 344 l 432 -35 l 426 -35 z "},"\u2196":{ha:860,x_min:147,x_max:725,o:"m 658 46 l 228 476 l 240 96 l 154 92 l 147 619 l 151 624 l 679 617 l 675 529 l 294 543 l 725 113 l 658 46 z "},"\u2197":{ha:860,x_min:125,x_max:703,o:"m 192 44 l 125 111 l 556 542 l 175 529 l 171 615 l 699 622 l 703 618 l 696 90 l 610 94 l 622 475 l 192 44 z "},"\u2198":{ha:860,x_min:133,x_max:711,o:"m 707 76 l 179 83 l 182 171 l 564 157 l 133 588 l 199 654 l 631 224 l 617 604 l 704 608 l 711 81 l 707 76 z "},"\u2199":{ha:860,x_min:157,x_max:733,o:"m 161 76 l 157 81 l 163 608 l 250 604 l 236 222 l 668 653 l 733 588 l 303 156 l 685 169 l 689 82 l 161 76 z "},"\u21D0":{ha:860,x_min:36,x_max:804,o:"m 415 -21 l 36 347 l 36 353 l 415 721 l 474 657 l 319 514 l 804 514 l 804 439 l 238 439 l 144 353 l 144 347 l 238 261 l 804 261 l 804 186 l 319 186 l 474 43 l 415 -21 z "},"\u21D1":{ha:860,x_min:58,x_max:801,o:"m 122 296 l 58 354 l 426 732 l 432 732 l 801 354 l 736 296 l 593 450 l 593 -35 l 518 -35 l 518 532 l 432 625 l 426 625 l 340 532 l 340 -35 l 267 -35 l 267 453 l 122 296 z "},"\u21D2":{ha:860,x_min:54,x_max:821,o:"m 443 -21 l 383 43 l 539 186 l 54 186 l 54 261 l 621 261 l 714 347 l 714 353 l 621 439 l 54 439 l 54 514 l 539 514 l 383 657 l 443 721 l 821 353 l 821 347 l 443 -21 z "},"\u21D3":{ha:860,x_min:58,x_max:801,o:"m 426 -35 l 58 344 l 122 403 l 267 246 l 267 732 l 340 732 l 340 167 l 426 74 l 432 74 l 518 167 l 518 732 l 593 732 l 593 249 l 736 403 l 801 344 l 432 -35 l 426 -35 z "},"\u2194":{ha:860,x_min:-4,x_max:863,o:"m 863 353 l 863 347 l 615 51 l 551 104 l 726 303 l 133 303 l 308 104 l 244 51 l -4 347 l -4 353 l 244 649 l 308 596 l 133 397 l 726 397 l 551 596 l 615 649 l 863 353 z "},"\u2195":{ha:860,x_min:131,x_max:728,o:"m 432 -79 l 426 -79 l 131 168 l 183 232 l 382 57 l 382 642 l 183 467 l 131 529 l 426 778 l 432 778 l 728 529 l 675 467 l 476 642 l 476 57 l 675 232 l 728 168 l 432 -79 z "},"\u21A8":{ha:860,x_min:96,x_max:763,o:"m 96 -192 l 96 -103 l 763 -103 l 763 -192 l 96 -192 m 444 -79 l 439 -79 l 143 168 l 196 232 l 394 57 l 394 642 l 196 467 l 143 529 l 439 778 l 444 778 l 740 529 l 688 467 l 489 642 l 489 57 l 688 232 l 740 168 l 444 -79 z "},"\u25CF":{ha:833,x_min:103,x_max:731,o:"m 417 146 q 256 187 326 146 q 144 299 185 228 q 103 458 103 369 q 144 619 103 549 q 256 730 185 689 q 417 771 326 771 q 578 730 507 771 q 690 619 649 689 q 731 458 731 549 q 690 299 731 369 q 578 187 649 228 q 417 146 507 146 z "},"\u25CB":{ha:833,x_min:86,x_max:747,o:"m 417 131 q 247 174 321 131 q 129 291 172 217 q 86 458 86 365 q 129 626 86 551 q 247 743 172 700 q 417 786 321 786 q 587 743 513 786 q 704 626 661 700 q 747 458 747 551 q 704 291 747 365 q 587 174 661 217 q 417 131 513 131 m 417 200 q 546 233 489 200 q 635 325 603 267 q 668 458 668 383 q 635 592 668 533 q 546 683 603 650 q 417 717 489 717 q 288 683 344 717 q 198 592 231 650 q 165 458 165 533 q 198 325 165 383 q 288 233 231 267 q 417 200 344 200 z "},"\u25A0":{ha:833,x_min:121,x_max:713,o:"m 121 163 l 121 754 l 713 754 l 713 163 l 121 163 z "},"\u25A1":{ha:833,x_min:101,x_max:732,o:"m 101 143 l 101 774 l 732 774 l 732 143 l 101 143 m 175 211 l 658 211 l 658 706 l 175 706 l 175 211 z "},"\u2752":{ha:833,x_min:101,x_max:732,o:"m 101 143 l 101 706 l 183 774 l 732 774 l 732 219 l 661 143 l 101 143 m 160 199 l 638 199 l 638 683 l 160 683 l 160 199 z "},"\u25C6":{ha:833,x_min:46,x_max:788,o:"m 417 104 l 46 476 l 417 847 l 788 476 l 417 104 z "},"\u25B2":{ha:833,x_min:86,x_max:747,o:"m 86 146 l 86 150 l 415 833 l 418 833 l 747 150 l 747 146 l 86 146 z "},"\u25B3":{ha:833,x_min:86,x_max:747,o:"m 86 146 l 86 150 l 415 833 l 418 833 l 747 150 l 747 146 l 86 146 m 190 207 l 643 207 l 417 689 l 190 207 z "},"\u25B6":{ha:833,x_min:86,x_max:775,o:"m 86 151 l 86 811 l 90 811 l 775 483 l 775 479 l 90 151 l 86 151 z "},"\u25B7":{ha:833,x_min:86,x_max:775,o:"m 86 151 l 86 811 l 90 811 l 775 483 l 775 479 l 90 151 l 86 151 m 151 258 l 631 481 l 151 704 l 151 258 z "},"\u25BC":{ha:833,x_min:86,x_max:747,o:"m 415 118 l 86 801 l 86 806 l 747 806 l 747 801 l 418 118 l 415 118 z "},"\u25BD":{ha:833,x_min:86,x_max:747,o:"m 415 118 l 86 801 l 86 806 l 747 806 l 747 801 l 418 118 l 415 118 m 417 263 l 643 744 l 190 744 l 417 263 z "},"\u25C0":{ha:833,x_min:58,x_max:747,o:"m 743 151 l 58 479 l 58 483 l 743 811 l 747 811 l 747 151 l 743 151 z "},"\u25C1":{ha:833,x_min:58,x_max:747,o:"m 743 151 l 58 479 l 58 483 l 743 811 l 747 811 l 747 151 l 743 151 m 682 258 l 682 704 l 204 481 l 682 258 z "},"\u25BA":{ha:833,x_min:29,x_max:868,o:"m 29 151 l 29 811 l 33 811 l 868 483 l 868 479 l 33 151 l 29 151 z "},"\u25C4":{ha:833,x_min:-35,x_max:804,o:"m 800 151 l -35 479 l -35 483 l 800 811 l 804 811 l 804 151 l 800 151 z "},"\u25D9":{ha:833,x_min:94,x_max:739,o:"m 94 139 l 94 778 l 739 778 l 739 139 l 94 139 m 417 144 q 581 185 510 144 q 692 298 651 226 q 733 458 733 369 q 692 619 733 549 q 581 731 651 690 q 417 772 510 772 q 253 731 325 772 q 141 619 182 690 q 100 458 100 549 q 141 298 100 369 q 253 185 182 226 q 417 144 325 144 m 417 213 q 294 244 349 213 q 210 332 240 276 q 179 458 179 388 q 210 585 179 531 q 294 672 240 640 q 417 704 349 704 q 540 672 486 704 q 624 585 593 640 q 654 458 654 531 q 624 332 654 388 q 540 244 593 276 q 417 213 486 213 z "},"\u25C9":{ha:833,x_min:71,x_max:763,o:"m 417 126 q 244 169 322 126 q 118 290 165 211 q 71 476 71 368 q 118 662 71 583 q 244 783 165 740 q 417 825 322 825 q 590 783 511 825 q 715 662 668 740 q 763 476 763 583 q 715 290 763 368 q 590 169 668 211 q 417 126 511 126 m 417 196 q 551 229 489 196 q 651 325 613 263 q 690 476 690 388 q 651 628 690 565 q 551 724 613 690 q 417 757 489 757 q 283 724 346 757 q 182 628 221 690 q 143 476 143 565 q 182 325 143 388 q 283 229 221 263 q 417 196 346 196 m 417 276 q 321 301 365 276 q 249 370 276 325 q 222 476 222 415 q 249 581 222 536 q 321 650 276 625 q 417 675 365 675 q 513 650 468 675 q 584 581 557 625 q 611 476 611 536 q 584 370 611 415 q 513 301 557 325 q 417 276 468 276 z "},"\u2610":{ha:1110,x_min:103,x_max:1007,o:"m 103 -14 l 103 861 l 188 932 l 1007 932 l 1007 71 l 933 -14 l 103 -14 m 163 46 l 903 46 l 903 829 l 163 829 l 163 46 z "},"\u2611":{ha:1110,x_min:103,x_max:1118,o:"m 103 -14 l 103 861 l 188 932 l 893 932 q 967 1023 929 981 q 1044 1104 1006 1065 l 1118 1035 q 1007 919 1061 982 l 1007 71 l 933 -14 l 103 -14 m 163 46 l 903 46 l 903 786 q 732 497 810 656 q 604 158 654 338 l 485 144 q 399 346 447 251 q 290 529 350 440 l 368 582 q 462 414 419 501 q 532 239 504 326 l 538 239 q 656 543 582 392 q 819 829 729 694 l 163 829 l 163 46 z "},"\u2713":{ha:850,x_min:0,x_max:856,o:"m 210 -28 q 0 382 128 197 l 78 435 q 182 254 135 349 q 261 67 229 160 l 267 67 q 395 394 317 232 q 573 700 474 557 q 781 950 672 843 l 856 881 q 645 642 746 779 q 463 339 544 504 q 329 -14 382 174 l 210 -28 z "},"\u2714":{ha:911,x_min:13,x_max:911,o:"m 236 -28 q 141 187 193 90 q 13 389 89 283 l 156 482 q 252 311 210 397 q 328 140 294 225 l 333 140 q 447 458 379 307 q 598 737 515 610 q 772 957 681 864 l 911 836 q 653 508 776 713 q 444 -3 529 304 l 236 -28 z "},"\u2717":{ha:740,x_min:69,x_max:739,o:"m 156 -35 l 69 10 q 190 301 117 156 q 354 579 264 447 q 271 738 315 661 q 178 886 226 815 l 264 939 q 345 813 306 879 q 422 674 385 746 q 671 950 543 835 l 739 883 q 599 744 667 821 q 468 579 531 667 q 575 315 526 453 q 656 31 624 178 l 560 -1 q 489 247 529 126 q 400 478 449 368 q 262 228 324 358 q 156 -35 200 97 z "},"\u2718":{ha:801,x_min:72,x_max:807,o:"m 233 -47 l 72 36 q 190 308 118 172 q 347 567 261 443 q 261 719 307 644 q 167 861 215 793 l 318 939 q 463 719 394 838 q 681 950 569 849 l 807 842 q 550 556 667 721 q 654 303 607 436 q 732 31 701 171 l 564 -18 q 506 188 538 88 q 433 381 474 288 q 233 -47 311 175 z "},"\u266A":{ha:699,x_min:40,x_max:668,o:"m 181 -33 q 83 -6 125 -33 q 40 72 40 21 q 68 152 40 115 q 146 212 96 189 q 260 235 196 235 q 310 230 288 235 q 343 218 333 225 l 343 964 l 413 964 q 428 933 419 946 q 456 904 438 919 q 510 864 475 889 q 636 734 604 797 q 668 592 668 671 q 653 490 668 538 q 624 410 639 442 l 575 428 q 590 490 586 461 q 593 556 593 518 q 548 679 593 621 q 419 764 503 738 l 419 199 q 386 71 419 122 q 299 -7 353 19 q 181 -33 244 -33 z "},"\u266B":{ha:833,x_min:6,x_max:824,o:"m 144 -33 q 47 -6 89 -33 q 6 72 6 21 q 32 152 6 115 q 106 212 58 189 q 214 235 153 235 q 265 230 242 235 q 299 218 289 225 l 299 936 l 824 1019 l 824 271 q 792 143 824 194 q 707 66 760 92 q 592 40 654 40 q 495 67 536 40 q 454 146 454 94 q 480 226 454 189 q 553 285 506 263 q 661 308 600 308 q 713 303 689 308 q 746 292 736 299 l 746 796 l 375 738 l 375 199 q 343 71 375 122 q 258 -7 311 19 q 144 -33 206 -33 z "},"\u2665":{ha:833,x_min:13,x_max:821,o:"m 419 -17 l 414 -17 q 210 222 289 118 q 88 409 131 325 q 28 567 44 493 q 13 715 13 640 q 71 921 13 851 q 214 990 129 990 q 333 953 282 990 q 414 824 385 917 l 419 824 q 501 953 449 917 q 619 990 553 990 q 763 921 706 990 q 821 715 821 851 q 805 567 821 640 q 746 409 789 493 q 624 222 703 325 q 419 -17 544 118 z "},"\u2663":{ha:833,x_min:13,x_max:821,o:"m 197 224 q 64 283 115 224 q 13 435 13 342 q 70 581 13 532 q 208 631 128 631 q 256 624 232 631 q 311 603 279 618 l 317 608 q 230 726 247 671 q 213 817 213 781 q 240 907 213 868 q 313 968 267 946 q 417 990 360 990 q 520 968 474 990 q 594 907 567 946 q 621 817 621 868 q 603 726 621 781 q 517 608 586 671 l 522 603 q 578 624 554 618 q 625 631 601 631 q 764 581 707 631 q 821 435 821 532 q 770 283 821 342 q 636 224 719 224 q 535 250 585 224 q 457 344 486 276 l 447 344 q 497 181 464 240 q 578 93 529 121 q 688 56 626 65 l 688 0 l 146 0 l 146 56 q 256 93 207 65 q 338 181 304 121 q 386 344 371 240 l 376 344 q 299 250 347 276 q 197 224 250 224 z "},"\u2666":{ha:833,x_min:7,x_max:826,o:"m 419 -17 l 414 -17 l 7 493 l 7 499 l 414 1006 l 419 1006 l 826 499 l 826 493 l 419 -17 z "},"\u2660":{ha:833,x_min:13,x_max:821,o:"m 376 344 q 297 246 346 272 q 192 219 249 219 q 64 265 115 219 q 13 408 13 311 q 31 527 13 471 q 94 648 50 583 q 217 798 139 713 q 414 1006 296 883 l 419 1006 q 617 798 539 883 q 739 648 694 713 q 802 527 783 583 q 821 408 821 471 q 770 265 821 311 q 642 219 719 219 q 537 246 585 219 q 457 344 489 272 l 447 344 q 497 181 464 240 q 578 93 529 121 q 688 56 626 65 l 688 0 l 146 0 l 146 56 q 256 93 207 65 q 338 181 304 121 q 386 344 371 240 l 376 344 z "},"\u263A":{ha:833,x_min:13,x_max:821,o:"m 417 54 q 208 106 299 54 q 65 250 117 158 q 13 458 13 342 q 65 667 13 576 q 208 810 117 758 q 417 863 299 863 q 626 810 535 863 q 769 667 717 758 q 821 458 821 576 q 769 250 821 342 q 626 106 717 158 q 417 54 535 54 m 417 117 q 590 160 515 117 q 708 280 665 203 q 750 458 750 357 q 708 637 750 560 q 590 757 665 714 q 417 800 515 800 q 243 757 318 800 q 126 637 168 714 q 83 458 83 560 q 126 280 83 357 q 243 160 168 203 q 417 117 318 117 m 307 472 q 258 497 276 472 q 240 561 240 522 q 258 626 240 601 q 307 650 276 650 q 357 626 339 650 q 375 561 375 601 q 357 497 375 522 q 307 472 339 472 m 526 472 q 477 497 496 472 q 458 561 458 522 q 477 626 458 601 q 526 650 496 650 q 576 626 558 650 q 593 561 593 601 q 576 497 593 522 q 526 472 558 472 m 417 211 q 269 259 325 211 q 201 392 213 307 l 249 410 q 312 331 268 356 q 417 306 356 306 q 522 331 478 306 q 585 410 567 356 l 632 392 q 565 259 622 307 q 417 211 508 211 m 328 551 q 346 572 346 551 q 328 593 346 593 q 310 572 310 593 q 328 551 310 551 m 546 551 q 564 572 564 551 q 546 593 564 593 q 529 572 529 593 q 546 551 529 551 z "},"\u263B":{ha:833,x_min:40,x_max:793,o:"m 417 82 q 220 131 306 82 q 88 265 135 179 q 40 458 40 350 q 88 653 40 568 q 220 786 135 738 q 417 835 306 835 q 614 786 529 835 q 746 653 699 738 q 793 458 793 568 q 746 265 793 350 q 614 131 699 179 q 417 82 529 82 m 306 479 q 354 504 338 479 q 371 567 371 529 q 354 628 371 603 q 306 653 338 653 q 257 628 275 653 q 239 567 239 603 q 257 504 239 529 q 306 479 275 479 m 528 479 q 577 504 560 479 q 594 567 594 529 q 577 628 594 603 q 528 653 560 653 q 480 628 497 653 q 463 567 463 603 q 480 504 463 529 q 528 479 497 479 m 417 207 q 567 253 511 207 q 638 386 624 300 l 590 404 q 525 324 569 350 q 417 297 481 297 q 308 324 353 297 q 243 404 264 350 l 196 386 q 267 253 211 300 q 417 207 324 207 m 289 547 q 272 553 279 547 q 265 572 265 560 q 272 592 265 585 q 289 599 279 599 q 304 592 297 599 q 311 572 311 585 q 304 553 311 560 q 289 547 297 547 m 511 547 q 494 553 501 547 q 488 572 488 560 q 494 592 488 585 q 511 599 501 599 q 528 592 521 599 q 535 572 535 585 q 528 553 535 560 q 511 547 521 547 z "},"\u2764":{ha:833,x_min:-99,x_max:932,o:"m 419 13 l 414 13 q 331 122 381 78 q 223 201 281 167 q 108 272 165 236 q 5 353 51 307 q -70 467 -42 400 q -99 633 -99 535 q -22 841 -99 769 q 175 913 56 913 q 327 872 267 913 q 414 728 388 831 l 419 728 q 506 872 446 831 q 658 913 567 913 q 855 841 778 913 q 932 633 932 769 q 903 467 932 535 q 828 353 875 400 q 725 272 782 307 q 610 201 668 236 q 503 122 553 167 q 419 13 453 78 z "},"\u2615":{ha:833,x_min:-44,x_max:900,o:"m 431 582 q 329 637 371 622 q 249 651 288 651 q 196 640 214 651 q 178 614 178 629 q 187 595 178 603 q 221 582 196 588 q 187 569 196 576 q 178 550 178 561 q 196 524 178 536 q 249 511 214 511 q 329 526 288 511 q 431 582 371 542 m 344 111 q 498 146 429 111 q 604 258 567 181 q 777 314 721 258 q 833 444 833 369 q 793 553 833 508 q 671 597 753 597 q 586 752 671 696 q 344 808 501 808 q 104 748 189 808 q 19 583 19 688 q 60 313 19 418 q 175 160 101 208 q 344 111 249 111 m 344 54 q 139 112 226 54 q 3 290 51 169 q -44 594 -44 410 q 59 794 -44 725 q 344 863 163 863 q 608 807 513 863 q 724 649 704 751 q 852 587 804 635 q 900 444 900 539 q 865 322 900 375 q 770 239 829 268 q 640 210 711 210 q 514 92 592 129 q 344 54 436 54 m 436 582 q 492 557 468 564 q 528 550 515 550 q 553 559 543 550 q 564 582 564 568 q 553 605 564 597 q 528 613 543 613 q 492 607 515 613 q 436 582 468 601 m 344 453 q 147 483 215 453 q 44 569 78 514 q 144 673 65 635 q 344 711 224 711 q 546 672 467 711 q 646 569 625 633 q 543 483 611 514 q 344 453 475 453 m 636 347 q 657 425 650 386 q 665 503 664 464 q 725 489 706 503 q 744 436 744 475 q 713 370 744 393 q 636 347 681 347 z "},"\u263F":{ha:833,x_min:86,x_max:747,o:"m 417 322 q 538 353 485 322 q 622 438 590 383 q 653 561 653 492 q 622 688 653 633 q 538 774 590 743 q 417 804 485 804 q 296 774 350 804 q 210 688 242 743 q 179 561 179 633 q 210 438 179 492 q 296 353 242 383 q 417 322 350 322 m 371 -64 l 371 64 l 228 64 l 228 150 l 371 150 l 371 247 q 224 301 289 258 q 123 412 160 344 q 86 561 86 479 q 138 735 86 660 q 272 847 190 811 q 192 923 218 876 q 161 1018 165 969 l 239 1029 q 290 928 247 974 q 417 883 333 883 q 543 928 500 883 q 594 1029 586 974 l 672 1018 q 642 923 668 969 q 561 847 615 876 q 695 735 643 811 q 747 561 747 660 q 710 412 747 479 q 610 301 674 344 q 463 247 546 258 l 463 150 l 606 150 l 606 64 l 463 64 l 463 -64 l 371 -64 z "},"\u2640":{ha:833,x_min:83,x_max:750,o:"m 417 415 q 539 447 485 415 q 624 533 593 478 q 656 660 656 589 q 624 786 656 732 q 539 872 593 840 q 417 903 485 903 q 294 872 349 903 q 208 786 239 840 q 176 660 176 732 q 208 533 176 589 q 294 447 239 478 q 417 415 349 415 m 371 -64 l 371 114 l 174 114 l 174 200 l 371 200 l 371 340 q 222 395 288 351 q 120 508 157 439 q 83 660 83 576 q 126 824 83 751 q 245 940 169 897 q 417 982 321 982 q 588 940 513 982 q 707 824 664 897 q 750 660 750 751 q 713 508 750 576 q 612 395 676 439 q 463 340 547 351 l 463 200 l 660 200 l 660 114 l 463 114 l 463 -64 l 371 -64 z "},"\u2641":{ha:833,x_min:15,x_max:818,o:"m 417 57 q 209 109 300 57 q 67 251 118 161 q 15 458 15 342 q 67 665 15 575 q 209 808 118 756 q 417 860 300 860 q 625 808 535 860 q 767 665 715 756 q 818 458 818 575 q 767 251 818 342 q 625 109 715 161 q 417 57 535 57 m 457 421 l 457 132 q 649 222 574 143 q 736 421 725 300 l 457 421 m 376 421 l 97 421 q 184 222 108 300 q 376 132 260 143 l 376 421 m 376 496 l 376 785 q 184 695 260 774 q 97 496 108 617 l 376 496 m 457 496 l 736 496 q 649 695 725 617 q 457 785 574 774 l 457 496 z "},"\u2642":{ha:833,x_min:-17,x_max:851,o:"m 317 92 q 439 123 385 92 q 525 209 493 154 q 557 336 557 264 q 525 462 557 407 q 439 548 493 517 q 317 579 385 579 q 194 548 249 579 q 108 462 139 517 q 76 336 76 407 q 108 209 76 264 q 194 123 139 154 q 317 92 249 92 m 317 13 q 146 55 221 13 q 27 171 71 97 q -17 336 -17 244 q 27 501 -17 428 q 146 616 71 574 q 317 658 221 658 q 413 646 368 658 q 496 610 458 633 l 715 825 l 471 815 l 471 896 l 847 900 l 851 896 l 849 518 l 767 518 l 776 764 l 568 550 q 649 336 649 463 q 606 171 649 244 q 488 55 563 97 q 317 13 413 13 z "},"\u211E":{ha:967,x_min:125,x_max:960,o:"m 125 0 l 125 911 l 410 911 q 575 887 503 911 q 688 806 647 863 q 729 656 729 750 q 673 485 729 550 q 522 397 617 421 l 628 226 q 660 174 646 200 q 690 119 674 147 l 696 119 q 722 174 710 147 q 749 226 735 200 l 825 360 l 947 360 l 751 40 l 960 -285 l 838 -285 l 746 -143 q 710 -85 728 -114 q 674 -26 692 -56 l 668 -26 l 606 -143 l 517 -285 l 393 -285 l 611 53 l 407 385 l 240 385 l 240 0 l 125 0 m 240 479 l 393 479 q 557 523 500 479 q 614 656 614 567 q 557 782 614 746 q 393 818 500 818 l 240 818 l 240 479 z "},"\u263C":{ha:833,x_min:-4,x_max:838,o:"m 417 267 q 552 320 499 267 q 606 458 606 374 q 552 597 606 543 q 417 650 499 650 q 281 597 335 650 q 228 458 228 543 q 281 320 228 374 q 417 267 335 267 m 133 115 l 74 176 l 196 297 q 165 352 178 322 q 146 415 151 382 l -4 415 l -4 501 l 146 501 q 163 562 150 533 q 193 615 175 590 l 74 738 l 133 799 l 254 676 q 309 707 279 694 q 372 724 339 719 l 372 885 l 461 885 l 461 724 q 522 708 493 719 q 576 678 551 696 l 700 799 l 760 738 l 638 618 q 688 501 676 568 l 838 501 l 838 415 l 688 415 q 639 300 678 351 l 760 176 l 700 115 l 578 240 q 461 193 526 201 l 461 32 l 372 32 l 372 193 q 313 209 342 197 q 258 238 283 221 l 133 115 z "},"\u25CA":{ha:718,x_min:78,x_max:640,o:"m 307 -14 l 78 458 l 307 931 l 411 931 l 640 458 l 411 -14 l 307 -14 m 357 82 l 363 82 l 449 267 l 539 458 l 449 649 l 363 835 l 357 835 l 269 649 l 179 458 l 269 267 l 357 82 z "},"\u2302":{ha:833,x_min:68,x_max:765,o:"m 68 0 l 68 500 l 367 926 l 467 926 l 765 500 l 765 0 l 68 0 m 165 83 l 668 83 l 668 469 l 533 668 l 419 842 l 414 842 l 300 668 l 165 469 l 165 83 z "},"`":{ha:753,x_min:172,x_max:483,o:"m 392 792 l 172 1008 l 179 1021 l 304 1021 l 483 792 l 392 792 z "},"\xB4":{ha:753,x_min:269,x_max:581,o:"m 269 792 l 449 1021 l 574 1021 l 581 1008 l 361 792 l 269 792 z "},"\u02C6":{ha:753,x_min:138,x_max:615,o:"m 138 792 l 326 1021 l 426 1021 l 615 792 l 522 792 l 379 935 l 374 935 l 231 792 l 138 792 z "},"\u02C7":{ha:753,x_min:138,x_max:615,o:"m 326 792 l 138 1021 l 231 1021 l 374 878 l 379 878 l 522 1021 l 615 1021 l 426 792 l 326 792 z "},"\u02DC":{ha:753,x_min:136,x_max:617,o:"m 476 801 q 413 819 439 801 q 365 860 386 836 q 322 901 343 883 q 278 918 301 918 q 231 888 247 918 q 213 808 215 857 l 136 813 q 172 948 139 894 q 276 1001 204 1001 q 340 984 314 1001 q 389 943 367 967 q 431 902 411 919 q 476 885 451 885 q 522 916 507 885 q 540 994 538 947 l 617 989 q 581 855 614 908 q 476 801 549 801 z "},"\xA8":{ha:753,x_min:174,x_max:579,o:"m 243 815 q 193 835 213 815 q 174 885 174 856 q 193 934 174 914 q 243 954 213 954 q 292 934 272 954 q 311 885 311 914 q 292 835 311 856 q 243 815 272 815 m 510 815 q 461 835 481 815 q 442 885 442 856 q 461 934 442 914 q 510 954 481 954 q 560 934 540 954 q 579 885 579 914 q 560 835 579 856 q 510 815 540 815 z "},"\xAF":{ha:753,x_min:192,x_max:561,o:"m 192 835 l 192 914 l 561 914 l 561 835 l 192 835 z "},"\u02D8":{ha:753,x_min:160,x_max:593,o:"m 376 790 q 256 822 303 790 q 187 901 210 853 q 160 1000 164 950 l 231 1013 q 274 913 239 958 q 376 868 308 868 q 479 913 444 868 q 522 1013 514 958 l 593 1000 q 567 901 590 950 q 498 822 544 853 q 376 790 451 790 z "},"\u02DA":{ha:753,x_min:224,x_max:529,o:"m 376 769 q 265 808 307 769 q 224 907 224 847 q 265 1004 224 965 q 376 1043 307 1043 q 488 1004 446 1043 q 529 907 529 965 q 488 808 529 847 q 376 769 446 769 m 376 821 q 433 844 410 821 q 456 907 456 868 q 433 969 456 946 q 376 992 410 992 q 320 969 343 992 q 297 907 297 946 q 320 844 297 868 q 376 821 343 821 z "},"\u02DD":{ha:753,x_min:221,x_max:665,o:"m 221 792 l 340 1021 l 435 1021 l 442 1008 l 289 792 l 221 792 m 444 792 l 564 1021 l 658 1021 l 665 1008 l 514 792 l 444 792 z "},"\u02D9":{ha:753,x_min:300,x_max:453,o:"m 376 814 q 322 834 343 814 q 300 889 300 854 q 322 943 300 922 q 376 964 343 964 q 431 943 410 964 q 453 889 453 922 q 431 834 453 854 q 376 814 410 814 z "},"\xB8":{ha:753,x_min:253,x_max:493,o:"m 264 -314 l 253 -258 q 372 -235 340 -251 q 404 -189 404 -219 q 381 -146 404 -161 q 297 -122 357 -131 l 358 4 l 432 4 l 392 -89 q 467 -122 440 -100 q 493 -187 493 -144 q 434 -278 493 -247 q 264 -314 375 -308 z "},"\u02DB":{ha:753,x_min:256,x_max:515,o:"m 394 -299 q 296 -267 336 -299 q 256 -169 256 -236 q 288 -69 256 -114 q 354 4 319 -24 l 438 4 q 371 -69 397 -31 q 344 -147 344 -107 q 367 -200 344 -183 q 415 -217 389 -217 q 453 -210 436 -217 q 486 -193 469 -204 l 515 -256 q 461 -286 493 -274 q 394 -299 429 -299 z "},"\u02B9":{ha:346,x_min:108,x_max:261,o:"m 182 669 l 108 675 l 150 1008 l 261 999 l 238 875 l 182 669 z "},\u02BB:{ha:357,x_min:61,x_max:286,o:"m 194 613 q 101 652 142 613 q 61 764 61 692 q 100 908 61 842 q 236 1014 139 975 l 269 956 q 172 876 199 921 q 144 788 144 832 q 154 747 144 761 q 210 768 175 768 q 262 750 238 768 q 286 694 286 732 q 260 635 286 658 q 194 613 233 613 z "},\u02BC:{ha:357,x_min:71,x_max:296,o:"m 121 604 l 88 664 q 185 742 157 697 q 213 831 213 788 q 203 872 213 857 q 147 850 182 850 q 96 869 121 850 q 71 924 71 888 q 97 983 71 960 q 161 1006 124 1006 q 256 967 215 1006 q 296 856 296 929 q 258 710 296 776 q 121 604 219 643 z "},\u02BD:{ha:357,x_min:61,x_max:286,o:"m 236 604 q 100 706 139 643 q 61 843 61 769 q 101 965 61 924 q 194 1006 142 1006 q 260 983 233 1006 q 286 924 286 960 q 262 869 286 888 q 210 850 238 850 q 154 872 175 850 q 144 828 144 854 q 173 741 144 785 q 269 664 201 697 l 236 604 z "},\u02BE:{ha:336,x_min:63,x_max:289,o:"m 63 629 l 63 699 q 200 814 200 699 q 63 928 200 928 l 63 997 q 231 955 174 1003 q 289 814 289 907 q 231 674 289 722 q 63 629 174 625 z "},\u02BF:{ha:336,x_min:47,x_max:274,o:"m 274 629 q 106 674 164 625 q 47 814 47 722 q 106 955 47 907 q 274 997 164 1003 l 274 928 q 136 814 136 928 q 274 699 136 699 l 274 629 z "},\u02C0:{ha:429,x_min:15,x_max:389,o:"m 149 549 l 149 690 q 267 756 233 722 q 301 839 301 790 q 271 909 301 883 q 189 935 240 935 q 117 918 147 935 q 63 875 88 901 l 15 922 q 88 981 43 956 q 194 1006 133 1006 q 333 963 278 1006 q 389 838 389 919 q 346 728 389 772 q 233 654 303 685 l 233 549 l 149 549 z "},\u02C1:{ha:429,x_min:40,x_max:414,o:"m 196 549 l 196 654 q 84 728 128 685 q 40 838 40 772 q 96 963 40 919 q 235 1006 151 1006 q 342 981 297 1006 q 414 922 388 956 l 368 875 q 313 918 343 901 q 240 935 283 935 q 159 909 189 935 q 129 839 129 883 q 163 756 129 790 q 282 690 197 722 l 282 549 l 196 549 z "},\u02D0:{ha:346,x_min:69,x_max:276,o:"m 69 0 l 165 197 l 181 197 l 276 0 l 69 0 m 165 481 l 69 675 l 276 675 l 181 481 l 165 481 z "},\u02D1:{ha:346,x_min:69,x_max:276,o:"m 165 481 l 69 675 l 276 675 l 181 481 l 165 481 z "},"\u02D2":{ha:336,x_min:63,x_max:289,o:"m 63 183 l 63 253 q 200 368 200 253 q 63 482 200 482 l 63 551 q 231 509 174 557 q 289 368 289 461 q 231 228 289 276 q 63 183 174 179 z "},"\u02D3":{ha:336,x_min:47,x_max:274,o:"m 274 183 q 106 228 164 179 q 47 368 47 276 q 106 509 47 461 q 274 551 164 557 l 274 482 q 136 368 136 482 q 274 253 136 253 l 274 183 z "},"\u02D4":{ha:510,x_min:42,x_max:468,o:"m 42 144 l 42 219 l 215 219 l 215 599 l 293 599 l 293 219 l 468 219 l 468 144 l 42 144 z "},"\u02D5":{ha:510,x_min:42,x_max:468,o:"m 215 144 l 215 525 l 42 525 l 42 599 l 468 599 l 468 525 l 293 525 l 293 144 l 215 144 z "},"\u02D6":{ha:510,x_min:42,x_max:468,o:"m 215 146 l 215 336 l 42 336 l 42 410 l 215 410 l 215 599 l 293 599 l 293 410 l 468 410 l 468 336 l 293 336 l 293 146 l 215 146 z "},"\u02D7":{ha:510,x_min:42,x_max:468,o:"m 42 336 l 42 410 l 468 410 l 468 336 l 42 336 z "},"\u02DE":{ha:239,x_min:-139,x_max:261,o:"m 163 269 q 74 305 111 269 q 36 428 36 340 l 36 453 l -139 382 l -139 467 l 92 558 l 107 547 q 105 509 106 525 q 104 478 104 493 q 123 372 104 400 q 176 343 142 343 q 207 349 193 343 q 229 363 221 356 l 261 301 q 219 280 243 290 q 163 269 196 269 z "},"\u02C8":{ha:260,x_min:81,x_max:179,o:"m 89 618 l 81 989 l 179 989 l 171 618 l 89 618 z "},"\u02C9":{ha:385,x_min:8,x_max:378,o:"m 8 835 l 8 914 l 378 914 l 378 835 l 8 835 z "},"\u02CA":{ha:313,x_min:47,x_max:358,o:"m 47 792 l 226 1021 l 351 1021 l 358 1008 l 139 792 l 47 792 z "},"\u02CB":{ha:313,x_min:-50,x_max:261,o:"m 169 792 l -50 1008 l -43 1021 l 82 1021 l 261 792 l 169 792 z "},"\u02CC":{ha:158,x_min:31,x_max:128,o:"m 31 -375 l 39 -99 l 119 -99 l 128 -375 l 31 -375 z "},"\uA71C":{ha:346,x_min:56,x_max:290,o:"m 165 610 l 56 808 l 133 808 l 124 989 l 222 989 l 213 808 l 290 808 l 181 610 l 165 610 z "},"\uA789":{ha:346,x_min:90,x_max:256,o:"m 174 485 q 115 509 139 485 q 90 571 90 533 q 115 635 90 611 q 174 660 139 660 q 231 635 207 660 q 256 571 256 611 q 231 509 256 533 q 174 485 207 485 m 174 -17 q 115 8 139 -17 q 90 69 90 32 q 115 134 90 110 q 174 158 139 158 q 231 134 207 158 q 256 69 256 110 q 231 8 256 32 q 174 -17 207 -17 z "},"\u25CC":{ha:813,x_min:64,x_max:750,o:"m 150 135 q 117 149 132 135 q 103 185 103 163 q 117 224 103 210 q 150 238 132 238 q 186 224 172 238 q 200 185 200 210 q 187 149 200 163 q 150 135 174 135 m 111 286 q 78 300 93 286 q 64 338 64 314 q 78 375 64 363 q 111 388 93 388 q 148 375 133 388 q 163 338 163 363 q 149 300 163 314 q 111 286 135 286 m 150 439 q 117 453 132 439 q 103 492 103 467 q 117 529 103 517 q 150 542 132 542 q 186 529 172 542 q 200 492 200 517 q 150 439 200 439 m 258 21 q 225 34 239 21 q 211 74 211 47 q 225 110 211 97 q 258 122 239 122 q 294 110 279 122 q 308 74 308 97 q 294 34 308 47 q 258 21 281 21 m 258 553 q 225 567 239 553 q 211 603 211 581 q 225 642 211 629 q 258 654 239 654 q 294 642 279 654 q 308 603 308 629 q 294 567 308 581 q 258 553 281 553 m 406 -17 q 372 -3 386 -17 q 358 35 358 10 q 372 72 358 58 q 406 85 386 85 q 442 72 428 85 q 456 35 456 58 q 442 -3 456 10 q 406 -17 428 -17 m 406 589 q 372 603 386 589 q 358 642 358 617 q 372 678 358 665 q 406 692 386 692 q 442 678 428 692 q 456 642 456 665 q 442 603 456 617 q 406 589 428 589 m 553 21 q 520 34 535 21 q 506 74 506 47 q 520 110 506 97 q 553 122 535 122 q 588 110 574 122 q 603 74 603 97 q 553 21 603 21 m 553 551 q 520 566 535 551 q 506 603 506 581 q 520 641 506 628 q 553 654 535 654 q 588 641 574 654 q 603 603 603 628 q 590 566 603 581 q 553 551 576 551 m 663 135 q 628 149 643 135 q 614 185 614 163 q 628 224 614 210 q 663 238 643 238 q 697 224 683 238 q 711 185 711 210 q 663 135 711 135 m 700 286 q 665 300 679 286 q 651 338 651 314 q 665 375 651 363 q 700 388 679 388 q 735 375 719 388 q 750 338 750 363 q 736 300 750 314 q 700 286 722 286 m 663 439 q 628 452 643 439 q 614 490 614 465 q 628 527 614 514 q 663 540 643 540 q 697 527 683 540 q 711 490 711 514 q 663 439 711 439 z "},"\u0300":{ha:0,x_min:-204,x_max:107,o:"m 15 792 l -204 1008 l -197 1021 l -72 1021 l 107 792 l 15 792 z "},"\u0301":{ha:0,x_min:-107,x_max:204,o:"m -107 792 l 72 1021 l 197 1021 l 204 1008 l -15 792 l -107 792 z "},"\u0302":{ha:0,x_min:-239,x_max:239,o:"m -239 792 l -50 1021 l 50 1021 l 239 792 l 146 792 l 3 935 l -3 935 l -146 792 l -239 792 z "},"\u0303":{ha:0,x_min:-240,x_max:240,o:"m 100 801 q 36 819 63 801 q -12 860 10 836 q -54 901 -33 883 q -99 918 -75 918 q -145 888 -129 918 q -164 808 -161 857 l -240 813 q -205 948 -237 894 q -100 1001 -172 1001 q -36 984 -62 1001 q 13 943 -10 967 q 55 902 35 919 q 100 885 75 885 q 146 916 131 885 q 164 994 161 947 l 240 989 q 205 855 238 908 q 100 801 172 801 z "},"\u0304":{ha:0,x_min:-185,x_max:185,o:"m -185 835 l -185 914 l 185 914 l 185 835 l -185 835 z "},"\u0305":{ha:0,x_min:-185,x_max:185,o:"m -185 835 l -185 914 l 185 914 l 185 835 l -185 835 z "},"\u0306":{ha:0,x_min:-217,x_max:217,o:"m 0 790 q -120 822 -74 790 q -190 901 -167 853 q -217 1000 -212 950 l -146 1013 q -103 913 -137 958 q 0 868 -68 868 q 103 913 68 868 q 146 1013 138 958 l 217 1000 q 191 901 214 950 q 122 822 168 853 q 0 790 75 790 z "},"\u0307":{ha:0,x_min:-76,x_max:76,o:"m 0 814 q -55 834 -33 814 q -76 889 -76 854 q -55 943 -76 922 q 0 964 -33 964 q 55 943 33 964 q 76 889 76 922 q 55 834 76 854 q 0 814 33 814 z "},"\u0308":{ha:0,x_min:-203,x_max:203,o:"m -133 815 q -183 835 -164 815 q -203 885 -203 856 q -183 934 -203 914 q -133 954 -164 954 q -85 934 -104 954 q -65 885 -65 914 q -85 835 -65 856 q -133 815 -104 815 m 133 815 q 85 835 104 815 q 65 885 65 856 q 85 934 65 914 q 133 954 104 954 q 183 934 164 954 q 203 885 203 914 q 183 835 203 856 q 133 815 164 815 z "},"\u0309":{ha:0,x_min:-94,x_max:111,o:"m -44 778 l -57 833 q -1 865 -22 843 q 21 914 21 886 q -94 981 21 976 l -87 1051 q 59 1021 7 1050 q 111 931 111 992 q 65 827 111 865 q -44 778 18 789 z "},"\u030A":{ha:0,x_min:-153,x_max:153,o:"m 0 769 q -111 808 -69 769 q -153 907 -153 847 q -111 1004 -153 965 q 0 1043 -69 1043 q 111 1004 69 1043 q 153 907 153 965 q 111 808 153 847 q 0 769 69 769 m 0 821 q 56 844 33 821 q 79 907 79 868 q 56 969 79 946 q 0 992 33 992 q -56 969 -33 992 q -79 907 -79 946 q -56 844 -79 868 q 0 821 -33 821 z "},"\u030B":{ha:0,x_min:-156,x_max:289,o:"m -156 792 l -36 1021 l 58 1021 l 65 1008 l -87 792 l -156 792 m 68 792 l 188 1021 l 282 1021 l 289 1008 l 138 792 l 68 792 z "},"\u030C":{ha:0,x_min:-239,x_max:239,o:"m -50 792 l -239 1021 l -146 1021 l -3 878 l 3 878 l 146 1021 l 239 1021 l 50 792 l -50 792 z "},"\u030D":{ha:0,x_min:-49,x_max:49,o:"m -40 786 l -49 1039 l 49 1039 l 40 786 l -40 786 z "},"\u030F":{ha:0,x_min:-289,x_max:156,o:"m -137 793 l -289 1011 l -282 1024 l -187 1024 l -68 793 l -137 793 m 88 793 l -65 1011 l -58 1024 l 36 1024 l 156 793 l 88 793 z "},"\u0310":{ha:0,x_min:-224,x_max:224,o:"m 0 793 q -123 824 -75 793 q -195 903 -171 856 q -224 1003 -219 951 l -157 1014 q -133 943 -151 978 q -81 886 -114 908 q 0 864 -47 864 q 81 886 47 864 q 133 943 114 908 q 157 1014 153 978 l 224 1003 q 195 903 219 951 q 124 824 171 856 q 0 793 76 793 m 0 1001 q -49 1021 -29 1001 q -69 1071 -69 1040 q -49 1121 -69 1101 q 0 1140 -29 1140 q 49 1121 29 1140 q 69 1071 69 1101 q 49 1021 69 1040 q 0 1001 29 1001 z "},"\u0311":{ha:0,x_min:-217,x_max:217,o:"m -146 789 l -217 800 q -190 899 -212 851 q -120 978 -167 947 q 0 1010 -74 1010 q 122 978 75 1010 q 191 899 168 947 q 217 800 214 851 l 146 789 q 123 858 140 825 q 76 912 106 890 q 0 933 46 933 q -75 912 -44 933 q -123 858 -106 890 q -146 789 -140 825 z "},"\u0312":{ha:0,x_min:-89,x_max:85,o:"m 7 776 q -62 806 -36 776 q -89 882 -89 835 q -58 985 -89 940 q 42 1058 -26 1029 l 68 1008 q -1 958 19 986 q -22 890 -22 931 q 22 906 -7 906 q 65 889 46 906 q 85 844 85 872 q 62 794 85 813 q 7 776 39 776 z "},"\u0313":{ha:0,x_min:-85,x_max:89,o:"m -42 776 l -68 826 q 1 876 -19 847 q 22 944 22 904 q -22 929 7 929 q -65 945 -44 929 q -85 990 -85 961 q -62 1040 -85 1022 q -7 1058 -39 1058 q 63 1030 36 1058 q 89 953 89 1001 q 58 849 89 894 q -42 776 26 804 z "},"\u0315":{ha:0,x_min:-85,x_max:89,o:"m -42 776 l -68 826 q 1 876 -19 847 q 22 944 22 904 q -22 929 7 929 q -65 945 -44 929 q -85 990 -85 961 q -62 1040 -85 1022 q -7 1058 -39 1058 q 63 1030 36 1058 q 89 953 89 1001 q 58 849 89 894 q -42 776 26 804 z "},"\u0318":{ha:0,x_min:-106,x_max:118,o:"m 49 -346 l 49 -246 l -106 -246 l -106 -181 l 49 -181 l 49 -81 l 118 -81 l 118 -346 l 49 -346 z "},"\u0319":{ha:0,x_min:-118,x_max:106,o:"m -118 -346 l -118 -81 l -49 -81 l -49 -181 l 106 -181 l 106 -246 l -49 -246 l -49 -346 l -118 -346 z "},"\u031A":{ha:0,x_min:-106,x_max:118,o:"m 49 796 l 49 926 l -106 926 l -106 992 l 118 992 l 118 796 l 49 796 z "},"\u031B":{ha:0,x_min:-12,x_max:206,o:"m -1 603 l -12 660 q 104 774 104 679 q 99 814 104 796 q 85 851 93 832 l 174 893 q 197 842 188 868 q 206 782 206 815 q 146 657 206 700 q -1 603 86 614 z "},"\u031C":{ha:0,x_min:-99,x_max:92,o:"m 92 -356 q -51 -322 -4 -358 q -99 -218 -99 -286 q -51 -115 -99 -151 q 92 -82 -4 -78 l 92 -133 q 10 -156 36 -132 q -17 -218 -17 -179 q 10 -281 -17 -257 q 92 -304 36 -306 l 92 -356 z "},"\u031D":{ha:0,x_min:-133,x_max:133,o:"m -133 -293 l -133 -228 l -35 -228 l -35 -81 l 35 -81 l 35 -228 l 133 -228 l 133 -293 l -133 -293 z "},"\u031E":{ha:0,x_min:-133,x_max:133,o:"m -35 -346 l -35 -199 l -133 -199 l -133 -133 l 133 -133 l 133 -199 l 35 -199 l 35 -346 l -35 -346 z "},"\u031F":{ha:0,x_min:-133,x_max:133,o:"m -35 -346 l -35 -246 l -133 -246 l -133 -181 l -35 -181 l -35 -81 l 35 -81 l 35 -181 l 133 -181 l 133 -246 l 35 -246 l 35 -346 l -35 -346 z "},"\u0320":{ha:0,x_min:-133,x_max:133,o:"m -133 -246 l -133 -181 l 133 -181 l 133 -246 l -133 -246 z "},"\u0323":{ha:0,x_min:-76,x_max:76,o:"m 0 -286 q -55 -266 -33 -286 q -76 -211 -76 -246 q -55 -157 -76 -178 q 0 -136 -33 -136 q 55 -157 33 -136 q 76 -211 76 -178 q 55 -266 76 -246 q 0 -286 33 -286 z "},"\u0324":{ha:0,x_min:-203,x_max:203,o:"m -133 -281 q -183 -260 -164 -281 q -203 -211 -203 -240 q -183 -162 -203 -182 q -133 -142 -164 -142 q -85 -162 -104 -142 q -65 -211 -65 -182 q -85 -260 -65 -240 q -133 -281 -104 -281 m 133 -281 q 85 -260 104 -281 q 65 -211 65 -240 q 85 -162 65 -182 q 133 -142 104 -142 q 183 -162 164 -142 q 203 -211 203 -182 q 183 -260 203 -240 q 133 -281 164 -281 z "},"\u0325":{ha:0,x_min:-153,x_max:153,o:"m 0 -356 q -111 -317 -69 -356 q -153 -218 -153 -278 q -111 -121 -153 -160 q 0 -82 -69 -82 q 111 -121 69 -82 q 153 -218 153 -160 q 111 -317 153 -278 q 0 -356 69 -356 m 0 -304 q 56 -281 33 -304 q 79 -218 79 -257 q 56 -156 79 -179 q 0 -133 33 -133 q -56 -156 -33 -133 q -79 -218 -79 -179 q -56 -281 -79 -257 q 0 -304 -33 -304 z "},"\u0326":{ha:0,x_min:-132,x_max:108,o:"m -121 -314 l -132 -258 q -12 -235 -44 -251 q 19 -192 19 -219 q -6 -151 19 -164 q -79 -133 -31 -137 l -54 -81 q 72 -115 36 -90 q 108 -187 108 -140 q 49 -278 108 -247 q -121 -314 -10 -308 z "},"\u0327":{ha:0,x_min:-132,x_max:108,o:"m -121 -314 l -132 -258 q -12 -235 -44 -251 q 19 -189 19 -219 q -4 -146 19 -161 q -87 -122 -28 -131 l -26 4 l 47 4 l 7 -89 q 82 -122 56 -100 q 108 -187 108 -144 q 49 -278 108 -247 q -121 -314 -10 -308 z "},"\u0328":{ha:0,x_min:-121,x_max:139,o:"m 18 -299 q -81 -267 -40 -299 q -121 -169 -121 -236 q -89 -69 -121 -114 q -22 4 -57 -24 l 61 4 q -6 -69 21 -31 q -32 -147 -32 -107 q -10 -200 -32 -183 q 39 -217 13 -217 q 76 -210 60 -217 q 110 -193 93 -204 l 139 -256 q 85 -286 117 -274 q 18 -299 53 -299 z "},"\u0329":{ha:0,x_min:-49,x_max:49,o:"m -49 -375 l -40 -99 l 40 -99 l 49 -375 l -49 -375 z "},"\u032A":{ha:0,x_min:-168,x_max:168,o:"m -168 -314 l -168 -114 l 168 -114 l 168 -314 l 104 -314 l 104 -179 l -104 -179 l -104 -314 l -168 -314 z "},"\u032C":{ha:0,x_min:-239,x_max:239,o:"m -50 -317 l -239 -87 l -146 -87 l -3 -231 l 3 -231 l 146 -87 l 239 -87 l 50 -317 l -50 -317 z "},"\u032E":{ha:0,x_min:-217,x_max:217,o:"m 0 -324 q -120 -292 -74 -324 q -190 -212 -167 -261 q -217 -114 -212 -164 l -146 -101 q -103 -201 -137 -156 q 0 -246 -68 -246 q 103 -201 68 -246 q 146 -101 138 -156 l 217 -114 q 191 -212 214 -164 q 122 -292 168 -261 q 0 -324 75 -324 z "},"\u032F":{ha:0,x_min:-217,x_max:217,o:"m -146 -329 l -217 -318 q -190 -219 -212 -267 q -120 -140 -167 -171 q 0 -108 -74 -108 q 122 -140 75 -108 q 191 -219 168 -171 q 217 -318 214 -267 l 146 -329 q 123 -260 140 -293 q 76 -206 106 -228 q 0 -185 46 -185 q -75 -206 -44 -185 q -123 -260 -106 -228 q -146 -329 -140 -293 z "},"\u0330":{ha:0,x_min:-240,x_max:240,o:"m 100 -310 q 36 -292 63 -310 q -12 -251 10 -275 q -54 -210 -33 -228 q -99 -193 -75 -193 q -145 -224 -129 -193 q -164 -303 -161 -254 l -240 -299 q -205 -163 -237 -217 q -100 -110 -172 -110 q -36 -127 -62 -110 q 13 -168 -10 -144 q 55 -209 35 -192 q 100 -226 75 -226 q 146 -195 131 -226 q 164 -117 161 -164 l 240 -122 q 205 -256 238 -203 q 100 -310 172 -310 z "},"\u0331":{ha:0,x_min:-185,x_max:185,o:"m -185 -229 l -185 -150 l 185 -150 l 185 -229 l -185 -229 z "},"\u0332":{ha:0,x_min:-389,x_max:389,o:"m -389 -231 l -389 -150 l 389 -150 l 389 -231 l -389 -231 z "},"\u0334":{ha:0,x_min:-262,x_max:263,o:"m 131 256 q 51 273 85 256 q -11 314 17 290 q -65 355 -39 338 q -122 372 -92 372 q -168 343 -153 372 q -186 265 -183 314 l -262 278 q -228 404 -258 353 q -131 456 -199 456 q -51 438 -85 456 q 11 397 -17 421 q 65 356 39 374 q 122 339 92 339 q 168 369 153 339 q 186 446 183 400 l 263 433 q 228 308 258 360 q 131 256 199 256 z "},"\u0339":{ha:0,x_min:-92,x_max:99,o:"m -92 -356 l -92 -304 q -9 -281 -35 -306 q 17 -218 17 -257 q -9 -156 17 -179 q -92 -133 -35 -132 l -92 -82 q 51 -115 4 -78 q 99 -218 99 -151 q 51 -322 99 -286 q -92 -356 4 -358 z "},"\u033A":{ha:0,x_min:-168,x_max:168,o:"m -168 -312 l -168 -114 l -104 -114 l -104 -247 l 104 -247 l 104 -114 l 168 -114 l 168 -312 l -168 -312 z "},"\u033B":{ha:0,x_min:-168,x_max:168,o:"m -168 -333 l -168 -107 l 168 -107 l 168 -333 l -168 -333 m -104 -278 l 104 -278 l 104 -161 l -104 -161 l -104 -278 z "},"\u033C":{ha:0,x_min:-233,x_max:233,o:"m -233 -317 q -200 -160 -233 -208 q -103 -111 -167 -111 q -39 -129 -67 -111 q -1 -192 -11 -147 l 1 -192 q 40 -129 13 -147 q 103 -111 68 -111 q 200 -160 167 -111 q 233 -317 233 -208 l 167 -325 q 148 -214 167 -242 q 97 -186 129 -186 q 49 -215 65 -186 q 33 -297 33 -244 l 33 -324 l -33 -324 l -33 -297 q -49 -215 -33 -244 q -99 -186 -65 -186 q -148 -214 -129 -186 q -167 -325 -167 -242 l -233 -317 z "},"\u033D":{ha:0,x_min:-117,x_max:117,o:"m -71 771 l -117 817 l -46 888 l -117 958 l -71 1006 l 0 935 l 71 1006 l 117 958 l 46 888 l 117 817 l 71 771 l 0 842 l -71 771 z "},"\u0342":{ha:0,x_min:-240,x_max:240,o:"m 100 801 q 36 819 63 801 q -12 860 10 836 q -54 901 -33 883 q -99 918 -75 918 q -145 888 -129 918 q -164 808 -161 857 l -240 813 q -205 948 -237 894 q -100 1001 -172 1001 q -36 984 -62 1001 q 13 943 -10 967 q 55 902 35 919 q 100 885 75 885 q 146 916 131 885 q 164 994 161 947 l 240 989 q 205 855 238 908 q 100 801 172 801 z "},"\u0343":{ha:0,x_min:-94,x_max:111,o:"m -44 778 l -57 833 q -1 865 -22 843 q 21 914 21 886 q -94 981 21 976 l -87 1051 q 59 1021 7 1050 q 111 931 111 992 q 65 827 111 865 q -44 778 18 789 z "},"\u0344":{ha:0,x_min:-225,x_max:225,o:"m -160 818 q -206 837 -187 818 q -225 882 -225 856 q -206 928 -225 910 q -160 947 -187 947 q -112 928 -131 947 q -94 882 -94 910 q -112 837 -94 856 q -160 818 -131 818 m 160 818 q 113 837 131 818 q 94 882 94 856 q 113 928 94 910 q 160 947 131 947 q 206 928 188 947 q 225 882 225 910 q 206 837 225 856 q 160 818 188 818 m -57 783 l -3 1047 l 88 1047 l 94 1033 l 0 783 l -57 783 z "},"\u0345":{ha:0,x_min:-46,x_max:125,o:"m 61 -279 q -46 -150 -46 -279 l -46 -86 l 43 -86 q 41 -124 42 -104 q 40 -160 40 -144 q 53 -192 40 -182 q 82 -203 65 -203 q 93 -202 88 -203 q 113 -199 99 -201 l 125 -267 q 98 -276 111 -272 q 61 -279 85 -279 z "},"\u0357":{ha:0,x_min:-92,x_max:99,o:"m -92 769 l -92 821 q -9 844 -35 819 q 17 907 17 868 q -9 969 17 946 q -92 992 -35 993 l -92 1043 q 51 1010 4 1047 q 99 907 99 974 q 51 803 99 839 q -92 769 4 767 z "},"\u0358":{ha:0,x_min:-76,x_max:76,o:"m 0 814 q -55 834 -33 814 q -76 889 -76 854 q -55 943 -76 922 q 0 964 -33 964 q 55 943 33 964 q 76 889 76 922 q 55 834 76 854 q 0 814 33 814 z "},"\u035C":{ha:0,x_min:-631,x_max:631,o:"m 0 -324 q -333 -278 -176 -324 q -631 -146 -490 -232 l -597 -89 q -308 -206 -465 -169 q 0 -243 -151 -243 q 308 -206 151 -243 q 597 -89 465 -169 l 631 -146 q 334 -278 492 -232 q 0 -324 176 -324 z "},"\u035E":{ha:0,x_min:-612,x_max:613,o:"m -612 838 l -612 910 l 613 910 l 613 838 l -612 838 z "},"\u035F":{ha:0,x_min:-612,x_max:613,o:"m -612 -232 l -612 -160 l 613 -160 l 613 -232 l -612 -232 z "},"\u0361":{ha:0,x_min:-631,x_max:631,o:"m -597 764 l -631 822 q -333 953 -490 908 q 0 999 -176 999 q 334 953 176 999 q 631 822 492 908 l 597 764 q 308 881 465 844 q 0 918 151 918 q -308 881 -151 918 q -597 764 -465 844 z "},"\u1DCD":{ha:0,x_min:-631,x_max:631,o:"m -597 764 l -631 822 l -43 999 l 43 999 l 631 822 l 597 764 l 0 918 l -597 764 z "},"\u0337":{ha:0,x_min:-689,x_max:-64,o:"m -639 -32 l -689 8 l -115 707 l -64 667 l -639 -32 z "},"\u0338":{ha:0,x_min:-853,x_max:-62,o:"m -789 -42 l -853 8 l -126 953 l -62 904 l -789 -42 z "},"\u034F":{ha:0,x_min:0,x_max:0,o:""},"\u2318":{ha:1389,x_min:69,x_max:1319,o:"m 289 -247 q 128 -185 186 -247 q 69 -29 69 -122 q 151 152 69 90 q 375 214 233 214 l 444 214 l 444 508 l 375 508 q 151 570 233 508 q 69 754 69 632 q 128 908 69 846 q 289 969 186 969 q 442 928 383 969 q 527 816 500 888 q 554 653 554 744 l 554 600 l 835 600 l 835 653 q 862 816 835 744 q 948 928 889 888 q 1100 969 1007 969 q 1261 908 1203 969 q 1319 754 1319 846 q 1238 570 1319 632 q 1014 508 1156 508 l 944 508 l 944 214 l 1014 214 q 1238 152 1156 214 q 1319 -29 1319 90 q 1261 -185 1319 -122 q 1100 -247 1203 -247 q 947 -204 1006 -247 q 862 -89 889 -161 q 835 69 835 -17 l 835 122 l 554 122 l 554 69 q 527 -89 554 -17 q 442 -204 500 -161 q 289 -247 383 -247 m 289 -160 q 403 -110 363 -160 q 444 46 444 -60 l 444 122 l 343 122 q 212 81 263 122 q 161 -26 161 40 q 192 -118 161 -76 q 289 -160 222 -160 m 343 600 l 444 600 l 444 676 q 403 829 444 776 q 289 882 363 882 q 192 840 222 882 q 161 749 161 799 q 212 641 161 682 q 343 600 263 600 m 944 676 l 944 600 l 1046 600 q 1177 641 1126 600 q 1228 749 1228 682 q 1197 840 1228 799 q 1100 882 1167 882 q 985 829 1025 882 q 944 676 944 776 m 944 46 q 985 -110 944 -60 q 1100 -160 1025 -160 q 1197 -118 1167 -160 q 1228 -26 1228 -76 q 1177 81 1228 40 q 1046 122 1126 122 l 944 122 l 944 46 m 554 214 l 835 214 l 835 508 l 554 508 l 554 214 z "},"\u2325":{ha:1389,x_min:53,x_max:1336,o:"m 903 -17 l 421 822 l 53 822 l 53 919 l 486 919 l 968 81 l 1336 81 l 1336 -17 l 903 -17 m 871 822 l 871 919 l 1336 919 l 1336 822 l 871 822 z "},"\u2326":{ha:1389,x_min:118,x_max:1361,o:"m 118 -6 l 118 908 l 982 908 l 1361 460 l 1361 454 l 982 -6 l 118 -6 m 221 81 l 919 81 l 1235 457 l 919 822 l 221 822 l 221 81 m 394 190 l 333 251 l 532 457 l 333 661 l 394 724 l 593 517 l 792 724 l 853 661 l 653 457 l 853 251 l 792 190 l 593 396 l 394 190 z "},"\u232B":{ha:1389,x_min:28,x_max:1271,o:"m 407 -6 l 28 454 l 28 460 l 407 908 l 1271 908 l 1271 -6 l 407 -6 m 469 81 l 1168 81 l 1168 822 l 469 822 l 154 457 l 469 81 m 597 190 l 536 251 l 736 457 l 536 661 l 597 724 l 796 517 l 994 724 l 1056 661 l 857 457 l 1056 251 l 994 190 l 796 396 l 597 190 z "},"\u21E7":{ha:1111,x_min:29,x_max:1082,o:"m 315 -74 l 315 428 l 51 428 l 29 482 l 553 983 l 558 983 l 1082 482 l 1060 428 l 796 428 l 796 -74 l 315 -74 m 399 0 l 713 0 l 713 501 l 931 501 l 933 507 l 558 871 l 553 871 l 178 507 l 181 501 l 399 501 l 399 0 z "},"\u2303":{ha:1111,x_min:131,x_max:981,o:"m 197 543 l 131 613 l 556 1004 l 981 613 l 914 543 l 556 881 l 197 543 z "},"\u2007":{ha:690,x_min:0,x_max:0,o:""},"\u2009":{ha:139,x_min:0,x_max:0,o:""},"\u200A":{ha:28,x_min:0,x_max:0,o:""},"\u200B":{ha:0,x_min:0,x_max:0,o:""},"\u202F":{ha:167,x_min:0,x_max:0,o:""},"\uFEFF":{ha:0,x_min:0,x_max:0,o:""},\uFB01:{ha:747,x_min:33,x_max:653,o:"m 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 782 q 181 945 133 885 q 331 1006 229 1006 q 392 999 363 1006 q 443 983 421 993 l 418 900 q 342 913 376 913 q 247 782 247 913 l 247 675 l 390 675 l 390 582 l 247 582 l 247 0 l 133 0 m 519 0 l 519 675 l 633 675 l 633 0 l 519 0 m 576 814 q 522 834 543 814 q 500 889 500 854 q 522 943 500 922 q 576 964 543 964 q 631 943 610 964 q 653 889 653 922 q 631 834 653 854 q 576 814 610 814 z "},\uFB02:{ha:760,x_min:33,x_max:706,o:"m 133 0 l 133 582 l 33 582 l 33 668 l 133 675 l 133 782 q 181 945 133 885 q 331 1006 229 1006 q 392 999 363 1006 q 443 983 421 993 l 418 900 q 342 913 376 913 q 247 782 247 913 l 247 675 l 390 675 l 390 582 l 247 582 l 247 0 l 133 0 m 640 -12 q 548 27 576 -12 q 519 139 519 67 l 519 989 l 633 989 l 633 131 q 643 93 633 104 q 667 82 653 82 q 677 83 672 82 q 690 85 682 83 l 706 -1 q 640 -12 681 -12 z "}},gi="Source Sans 3",Ai=1422,Ei=-556,vi=-69,Ci=69,Di={yMin:-556,xMin:-853,yMax:1389,xMax:2999},Bi=1e3,yi={format:0,copyright:"\xA9 2010 \u2013 2021 Adobe (http://www.adobe.com/), with Reserved Font Name \u2018Source\u2019",fontFamily:"Source Sans 3",fontSubfamily:"Regular",uniqueID:"3.046;ADBO;SourceSans3-Regular;ADOBE",fullName:"Source Sans 3",version:"Version 3.046;hotconv 1.0.118;makeotfexe 2.5.65603",postScriptName:"SourceSans3-Regular",trademark:"Source is a trademark of Adobe in the United States and/or other countries.",manufacturer:"Adobe",designer:"Paul D. Hunt",manufacturerURL:"http://www.adobe.com/type",licence:"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL. This Font Software is distributed on an \u2018AS IS\u2019 BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the SIL Open Font License for the specific language, permissions and limitations governing your use of this Font Software.",licenceURL:"http://scripts.sil.org/OFL",unknown1:"Simple a",unknown2:"Simple g",unknown3:"Simple l (\u25BC L)",unknown4:"Serifed a",unknown5:"Centered ogoneks [ \u0104 \u0118 \u0105 \u0119 \u0173 ] (Na-Den\xE9)",unknown6:"N-shaped Eng [ \u014A ] (Sami)",unknown7:"Greek alternates for phonetics [ \u0251 \uA7B5 \u0263 \u0269 \u028A \u0278 \uAB53 ] (IPA)",unknown8:"Greek cursive beta [ \u03B2 ]",unknown9:"Greek alternate theta [ \u03B8 ]",unknown10:"Greek alternate phi [ \u03C6 ]",unknown11:"Cyrillic lowercase alternates with ascenders [ \u0436 \u043A \u044E ] (Bulgarian)",unknown12:"Cyrillic cursive be [ \u0431 ] (Serbian)",unknown13:"Cyrillic cursive forms [ \u0432 \u0433 \u0434 \u0437 \u0438 \u0439 \u043F \u0442 \u0446 \u0448 \u0449 \u045D ]",unknown14:"Cyrillic geometric forms [ \u0414 \u041B \u0409 \u0434 \u043B \u0459 ]",unknown15:"Cyrillic simple forms [ \u0416 \u041A \u0436 \u043A \u04CF ]",unknown16:"Capital figures",unknown17:"Dotted zero [ 0 ]",unknown18:"Slashed zero [ 0 ]",unknown19:"Serifed I (\u25B2 i)",unknown20:"Serifed I (\u25B2 i)",unknown21:"Simple a g l",unknown22:"Simple a",unknown23:"Simple g",unknown24:"Simple l (\u25BC L)",unknown25:"Serifed a",unknown26:"Centered ogoneks [ \u0104 \u0118 \u0105 \u0119 \u0173 ] (Na-Den\xE9)",unknown27:"N-shaped Eng [ \u014A ] (Sami)",unknown28:"Capital figures",unknown29:"Dotted zero [ 0 ]"},Mi="normal",Fi="normal",Si={glyphs:_i,familyName:gi,ascender:Ai,descender:Ei,underlinePosition:vi,underlineThickness:Ci,boundingBox:Di,resolution:Bi,original_font_information:yi,cssFontWeight:Mi,cssFontStyle:Fi},Y7=document.querySelector("#c"),r5=new T7({canvas:Y7,antialias:!0});function bi(i){const e=i.domElement,t=e.clientWidth,l=e.clientHeight,n=e.width!==t||e.height!==l;return n&&i.setSize(t,l,!1),n}const zi=50,wi=2,Ti=.1,Li=2e3,W2=new d2(zi,wi,Ti,Li);W2.position.z=10;const j2=new qi(W2,Y7);j2.enablePan=!1;j2.maxDistance=1e3;j2.minDistance=5.5;j2.zoomSpeed=.3;j2.rotateSpeed=.3;j2.target.set(0,0,0);j2.update();const P2=new fq,r6=new r1;new S;const u6=new ei;let Z3=null;const c7=new S(0,0,0),Pi=new ii;Pi.load(Si,function(i){function e(t,l,n,q,s,a){const r=new q4({color:0,transparent:!1,side:w2}),o=new q4({color:q,transparent:!0,opacity:.5,side:w2}),m=i.generateShapes(t,100),h=new g6(m);h.computeBoundingBox();const c=-.5*(h.boundingBox.max.x-h.boundingBox.min.x),f=.5*(h.boundingBox.max.y-h.boundingBox.min.y);h.translate(c,f*2,0);const x=new i2(h,r),d=5.06;let u=a4(l,n,d),p=new S(u.x,u.y,u.z);x.lookAt(p),x.position.x=u.x,x.position.y=u.y,x.position.z=u.z,x.scale.x=a,x.scale.y=a,x.scale.z=a;const A=200,B=0;let v=a*125,g=0,F=0,z=(Math.abs(h.boundingBox.min.x)+Math.abs(h.boundingBox.max.x)+A)*a,_=(Math.abs(h.boundingBox.min.y)+Math.abs(h.boundingBox.max.y)+B)*a,M=new E4;M.moveTo(g,F+v),M.lineTo(g,F+_-v),M.quadraticCurveTo(g,F+_,g+v,F+_),M.lineTo(g+z-v,F+_),M.quadraticCurveTo(g+z,F+_,g+z,F+_-v),M.lineTo(g+z,F+v),M.quadraticCurveTo(g+z,F,g+z-v,F),M.lineTo(g+v,F),M.quadraticCurveTo(g,F,g,F+v);const T=new li(M);var X=T.attributes.uv;let q1=1/0,N=0;for(var w=0;w<X.count;w++){let I=X.getX(w),$=X.getY(w);q1=Math.min(q1,I,$),N=Math.max(N,I,$)}for(var w=0;w<X.count;w++){let $=X.getX(w),J=X.getY(w);$=_8.mapLinear($,q1,N,0,1),J=_8.mapLinear(J,q1,N,0,1),X.setXY(w,$,J)}T.computeBoundingBox();const W=-.5*(T.boundingBox.max.x-T.boundingBox.min.x),j=-.5*(T.boundingBox.max.y-T.boundingBox.min.y);T.translate(W,j*0,0);let Z=new i2(T,o),G=a4(l,n,d-.01),P=new S(G.x,G.y,G.z);Z.lookAt(P),Z.position.copy(P),P2.add(Z),P2.add(x)}for(let t=0;t<k1.length;t++)e(k1[t][1],k1[t][2],k1[t][3]-180,k1[t][4],k1[t][4],k1[t][5]/1e5)});let R5=[];document.querySelector("#labels");function Ri(i,e,t,l,n,q){const s=new i2(new r4(q,20,20),new q4({color:l}));n=n;let r=a4(e,t,5.01);return s.position.set(r.x,r.y,r.z),P2.add(s),R5.push(s),{pin:s,originalColor:n}}let o6=[];for(let i=0;i<k1.length;i++){let e=Ri(k1[i][1],k1[i][2],k1[i][3]-180,k1[i][4],k1[i][4],k1[i][5]/1500);o6.push(e)}for(let i=0;i<k1.length;i++)for(let e=0;e<i6.length;e++)if(k1[i][0]==i6[e][0]){for(let t=1;t<i6[e].length;t++)for(let l=0;l<k1.length;l++)if(k1[l][0]==i6[e][t]){let n=a4(k1[i][2],k1[i][3]-180,5),q=a4(k1[l][2],k1[l][3]-180,5);Ii(n,q)}}function Ii(i,e){let t=.01,l=3,n=.05,q=new S(i.x,i.y,i.z),s=new S(e.x,e.y,e.z),a=[];for(let c=0;c<=20;c++){let f=new S().lerpVectors(q,s,c/20);f.normalize(),f.multiplyScalar(5+n*Math.sin(Math.PI*c/20)),a.push(f)}let r=new P7(a);const o=new L5(r,20,t,l,!1),m=new q4({color:16777215,transparent:!0,opacity:.15}),h=new i2(o,m);P2.add(h)}const j7=new D2,Ni=new L7({size:5,map:new P5().load(fi),transparent:!0}),Z7=[];for(let i=0;i<1e4;i++){const e=(Math.random()-.5)*2e3,t=(Math.random()-.5)*2e3,l=(Math.random()-.5)*2e3;Math.abs(e)+Math.abs(t)+Math.abs(l)>400&&Z7.push(e,t,l)}j7.setAttribute("position",new t2(Z7,3));const Oi=new dq(j7,Ni);P2.add(Oi);const z4=new J1;P2.add(z4);const E6=new J1,v6=new J1,C6=new J1;E6.rotation.y=0;v6.rotation.y=0;C6.rotation.y=0;z4.add(E6);z4.add(v6);z4.add(C6);const M4=new P5;let Ui=M4.load(oi);const J7=new i2(new r4(5,250,250),new H7({map:Ui,normalMap:M4.load(mi),roughnessMap:M4.load(hi),metalness:0,flatShading:!1,side:i3}));P2.add(J7);const $7=new i2(new r4(5.05,50,50),new Wq({alphaMap:M4.load(ui),map:M4.load(ci),transparent:!0}));J7.add($7);class I5{constructor(e,t,l,n,q,s){this.radius=e,this.texture=t,this.z=l,this.rotation=n,this.pivot=q,this.intensity=s}}let ki=new I5(1.5,di,110,-5e-4,E6,.4),Gi=new I5(2.5,xi,190,-3e-4,v6,.1),Vi=new I5(1,pi,250,-1e-4,C6,.005),c3=[ki,Gi,Vi];for(let i=0;i<c3.length;i++){const e=new i2(new r4(c3[i].radius,50,50),new H7({map:new P5().load(c3[i].texture),metalness:0,flatShading:!1,side:i3}));e.position.set(c3[i].z,0,0),c3[i].pivot.add(e);const t=new X7(16777215,c3[i].intensity);t.position.set(c3[i].z,0,0),e.add(t)}let u7=[];const Hi=new Qq(16777215,.2);P2.add(Hi);const K7=new X7(16777215,.01);K7.position.set(0,0,0);P2.add(K7);function Wi(){for(let i=0;i<o6.length;i++)o6[i].pin.material.color.set(o6[i].originalColor)}function Xi(){u6.setFromCamera(r6,W2);const i=u6.intersectObjects(R5);for(let e=0;e<i.length;e++)i[e].object.material.color.set(16711680)}document.addEventListener("keydown",Yi,!1);function Yi(i){const e=i.which;if(Z3!=null){let t=ni(Z3.position.x,Z3.position.y,Z3.position.z);e==38?t.lat-=.3:e==40?t.lat+=.3:e==37?t.lng-=.3:e==39&&(t.lng+=.3);const l=5.01;let n=a4(t.lat,t.lng,l);Z3.position.set(n.x,n.y,n.z)}}function Q7(){window.requestAnimationFrame(()=>{performance.now(),Q7()})}Q7();function e9(i){if(bi(r5)){const l=r5.domElement;W2.aspect=l.clientWidth/l.clientHeight,W2.updateProjectionMatrix()}for(let l=0;l<u7.length;l++)u7[l].move();function e(l){r6.x=l.clientX/window.innerWidth*2-1,r6.y=-(l.clientY/window.innerHeight)*2+1}function t(l){u6.setFromCamera(r6,W2);const n=u6.intersectObjects(R5);n.length>0&&(Z3=n[0].object)}window.addEventListener("pointermove",e),window.addEventListener("click",t),Wi(),Xi(),r5.render(P2,W2),z4.rotation.y+=-1e-5,E6.rotation.y+=-3e-4,v6.rotation.y+=-3e-5,C6.rotation.y+=-3e-6,$7.rotation.y+=3e-4,j2.rotateSpeed=(W2.position.distanceTo(c7)-5)/W2.position.distanceTo(c7),j2.update(),requestAnimationFrame(e9)}requestAnimationFrame(e9);
